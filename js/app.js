(function() {
  'use strict';

  var globals = typeof global === 'undefined' ? self : global;
  if (typeof globals.require === 'function') return;

  var modules = {};
  var cache = {};
  var aliases = {};
  var has = {}.hasOwnProperty;

  var expRe = /^\.\.?(\/|$)/;
  var expand = function(root, name) {
    var results = [], part;
    var parts = (expRe.test(name) ? root + '/' + name : name).split('/');
    for (var i = 0, length = parts.length; i < length; i++) {
      part = parts[i];
      if (part === '..') {
        results.pop();
      } else if (part !== '.' && part !== '') {
        results.push(part);
      }
    }
    return results.join('/');
  };

  var dirname = function(path) {
    return path.split('/').slice(0, -1).join('/');
  };

  var localRequire = function(path) {
    return function expanded(name) {
      var absolute = expand(dirname(path), name);
      return globals.require(absolute, path);
    };
  };

  var initModule = function(name, definition) {
    var hot = hmr && hmr.createHot(name);
    var module = {id: name, exports: {}, hot: hot};
    cache[name] = module;
    definition(module.exports, localRequire(name), module);
    return module.exports;
  };

  var expandAlias = function(name) {
    return aliases[name] ? expandAlias(aliases[name]) : name;
  };

  var _resolve = function(name, dep) {
    return expandAlias(expand(dirname(name), dep));
  };

  var require = function(name, loaderPath) {
    if (loaderPath == null) loaderPath = '/';
    var path = expandAlias(name);

    if (has.call(cache, path)) return cache[path].exports;
    if (has.call(modules, path)) return initModule(path, modules[path]);

    throw new Error("Cannot find module '" + name + "' from '" + loaderPath + "'");
  };

  require.alias = function(from, to) {
    aliases[to] = from;
  };

  var extRe = /\.[^.\/]+$/;
  var indexRe = /\/index(\.[^\/]+)?$/;
  var addExtensions = function(bundle) {
    if (extRe.test(bundle)) {
      var alias = bundle.replace(extRe, '');
      if (!has.call(aliases, alias) || aliases[alias].replace(extRe, '') === alias + '/index') {
        aliases[alias] = bundle;
      }
    }

    if (indexRe.test(bundle)) {
      var iAlias = bundle.replace(indexRe, '');
      if (!has.call(aliases, iAlias)) {
        aliases[iAlias] = bundle;
      }
    }
  };

  require.register = require.define = function(bundle, fn) {
    if (bundle && typeof bundle === 'object') {
      for (var key in bundle) {
        if (has.call(bundle, key)) {
          require.register(key, bundle[key]);
        }
      }
    } else {
      modules[bundle] = fn;
      delete cache[bundle];
      addExtensions(bundle);
    }
  };

  require.list = function() {
    var list = [];
    for (var item in modules) {
      if (has.call(modules, item)) {
        list.push(item);
      }
    }
    return list;
  };

  var hmr = globals._hmr && new globals._hmr(_resolve, require, modules, cache);
  require._cache = cache;
  require.hmr = hmr && hmr.wrap;
  require.brunch = true;
  globals.require = require;
})();

(function() {
var global = typeof window === 'undefined' ? this : window;
var __makeRelativeRequire = function(require, mappings, pref) {
  var none = {};
  var tryReq = function(name, pref) {
    var val;
    try {
      val = require(pref + '/node_modules/' + name);
      return val;
    } catch (e) {
      if (e.toString().indexOf('Cannot find module') === -1) {
        throw e;
      }

      if (pref.indexOf('node_modules') !== -1) {
        var s = pref.split('/');
        var i = s.lastIndexOf('node_modules');
        var newPref = s.slice(0, i).join('/');
        return tryReq(name, newPref);
      }
    }
    return none;
  };
  return function(name) {
    if (name in mappings) name = mappings[name];
    if (!name) return;
    if (name[0] !== '.' && pref) {
      var val = tryReq(name, pref);
      if (val !== none) return val;
    }
    return require(name);
  }
};
require.register("app.coffee", function(exports, require, module) {
var Application, Middleware;

Middleware = require("lib/middleware");

Application = {
  actions: Middleware.actions,
  action: Middleware.action,
  publish: Middleware.publish,
  subscribe: Middleware.subscribe,
  initialize: function(platform, isPlayer) {
    var Analytics, Lesson, Router;
    this.isPlayer = isPlayer;
    window.iostap.initialize({
      allowDefault: function() {
        return true;
      }
    });
    Middleware.initialize(platform);
    require("lib/i18n").initialize("en");
    Router = require("lib/router");
    this.router = new Router();
    Analytics = Middleware.actions("Analytics");
    Analytics.startTracking();
    Lesson = Middleware.actions("Lesson");
    Lesson.open();
    Backbone.history.start();
    return console.log("HISTORY START");
  }
};

module.exports = window.Application = Application;
});

;require.register("collections/comments.coffee", function(exports, require, module) {
var CommentsCollection,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CommentsCollection = (function(superClass) {
  extend(CommentsCollection, superClass);

  function CommentsCollection() {
    return CommentsCollection.__super__.constructor.apply(this, arguments);
  }

  CommentsCollection.prototype.comparator = function(m) {
    return -new Date(m.get("timestamp")).getTime();
  };

  CommentsCollection.prototype.initialize = function() {};

  CommentsCollection.prototype.like = function(slideId, id) {
    var comment, isLikedByLearner, likes;
    comment = this.get(id);
    likes = comment.get("likes") || 0;
    isLikedByLearner = comment.get("isLikedByLearner");
    if (isLikedByLearner) {
      isLikedByLearner = false;
      likes -= 1;
    } else {
      likes += 1;
      isLikedByLearner = true;
    }
    comment.set({
      likes: likes,
      isLikedByLearner: isLikedByLearner
    });
    return isLikedByLearner;
  };

  CommentsCollection.prototype.flag = function(id) {
    var comment, isFlaggedByLearner;
    comment = this.get(id);
    isFlaggedByLearner = comment.get("isFlaggedByLearner");
    if (!isFlaggedByLearner) {
      isFlaggedByLearner = true;
    } else {
      return false;
    }
    comment.set({
      isFlaggedByLearner: isFlaggedByLearner
    });
    return true;
  };

  CommentsCollection.prototype["delete"] = function(id) {
    var comment;
    comment = this.get(id);
    return this.remove(comment);
  };

  return CommentsCollection;

})(Backbone.Collection);

module.exports = CommentsCollection;
});

;require.register("data/locales/ar.yaml", function(exports, require, module) {
module.exports = {"audio-popup":{"allow":"تفعيل خاصية الصوت لهذا الدرس","cancel":"إلغاء","description":"للاستماع إلى التعليق الصوتي، يُرجى تفعيل خاصية الصوت لهذا الدرس.","title":"هذا الدرس متوفر في شكل تعليق صوتي"},"buttons":{"close-lesson":"إغلاق الدرس","continue":"متابعة","done":"حسنًا، أنا انتهيت","open-ed":"فتح Ed","send":"إرسال"},"dial-distribution":{"touch-to-rotate":"المس&nbsp;للتدوير&nbsp;"},"dial":{"touch-to-rotate":"المس&nbsp;للتدوير&nbsp;"},"dialogs":{"disconnection":{"needs-background":"لإكمال هذا الدرس، يحتاج نظام Ed للعمل في&nbsp;الخلفية.","please-open-ed":"للمتابعة، الرجاء فتح Ed وإعادة تشغيل الدرس لكي يمكن متابعة تقدمك بصورة&nbsp;صحيحة."}},"game-jeopardy":{"is-false":"خطأ","is-true":"صواب"},"game-jumble":{"drag-letters":"اسحب الأحرف إلى الكلمة أعلاه"},"game":{"bonus-time":"+%{bonus_time} ثانية","go":"انطلاق","labels":{"score":"الدرجة","timer":"المؤقّت"},"move-on":"الانتقال","of":"من","play-again":"اللعب مرة أخرى","play-game":"حسنًا، أنا مستعد!","your-best":"أفضل درجة","your-score":"درجاتك","your-stars":"نجومك"},"image":{"tap-to-continue":"انقر للمتابعة"},"lesson-info":{"lesson-label":"الدرس"},"menu":{"brainboost-page-count":"أنت في السؤال **%{index}** من **%{total}**","cancel":"إلغاء","exit":"الخروج من الدرس","exit-quiz":"الخروج من الاختبار","go-back":"مراجعة الشريحة الأخيرة","page-count":"أنت على الشريحة **%{index}** من **%{total}**","restart":"إعادة بدء الدرس","resume":"استكمال"},"peer-authoring":{"image-title":"عنوان الصورة","submit":"إرسال","title-placeholder":"أدخل العنوان هنا","upload-complete":"اكتمل التحميل","uploading":"جارٍ التحميل…","video-title":"عنوان الفيديو"},"pie-chart":{"touch-to-begin":"المس للبدء"},"slide-answer":{"times-up":"انتهى الوقت!","too-slow":"بطئ جدًا!"},"slider":{"touch-to-slide":"المس للتمرير"},"social":{"be-first":"كن أول من يبدي رأيه.","delete":"حذف","have-your-say":"قم بإبداء رأيك","report":"إبلاغ","reported":"تم الإبلاغ","thats-all":"هذا كل ما لدينا الآن."},"stars":{"all-earned":"تم ربح 1 نجمة |||| تم ربح %{smart_count} نجوم","available":"1 نجمة متاحة |||| %{smart_count} نجوم متاحة","earned":"لقد ربحت %{earned} من %{smart_count} نجمة |||| لقد ربحت %{earned} من %{smart_count} نجوم"},"text-sequence":{"of":"من"},"video":{"not-available":"معذرةً، هذا الفيديو <br> غير متاح حاليًا.","skip-video":"تخطي الفيديو"}}
});

;require.register("data/locales/bn.yaml", function(exports, require, module) {
module.exports = {"audio-popup":{"allow":"এই লেসনের জন্য অডিওর অনুমতি দিন","cancel":"বাতিল করুন","description":"বর্ণনা শুনতে, এই লেসনের জন্য অডিওর অনুমতি দিন।","title":"এই লেসনটি বর্ণিত হয়েছে"},"buttons":{"close-lesson":"লেসন বন্ধ করুন","continue":"চালিয়ে যান","done":"চালিয়ে যান","open-ed":"Ed খুলুন","send":"পাঠান"},"dial-distribution":{"touch-to-rotate":"ঘোরাতে&nbsp;স্পর্শ&nbsp;করুন"},"dial":{"touch-to-rotate":"ঘোরাতে&nbsp;স্পর্শ&nbsp;করুন"},"dialogs":{"disconnection":{"needs-background":"এই লেসনটি সম্পূর্ণ করার জন্য, Ed-কে&nbsp;ব্যাকগ্রাউন্ডে চলতে থাকতে হবে৷","please-open-ed":"চালিয়ে যেতে, অনুগ্রহ করে Ed খুলুন এবং লেসনটি পুনরায় শুরু করুন যাতে আপনার অগ্রগতি সঠিকভাবে&nbsp;ট্র্যাক করা যায়৷"}},"game-jeopardy":{"is-false":"মিথ্যা","is-true":"সত্যি"},"game-jumble":{"drag-letters":"উপরের শব্দে অক্ষর টেনে আনুন"},"game":{"bonus-time":"+%{bonus_time} সেকেন্ড","go":"এগিয়ে যান","labels":{"score":"স্কোর","timer":"টাইমার"},"move-on":"এগিয়ে চলুন","of":"এর","play-again":"আবার প্লে করুন","play-game":"ঠিক আছে, আমি তৈরী!","your-best":"আপনার সেরা স্কোর","your-score":"আপনার স্কোর","your-stars":"আপনার তারা"},"image":{"tap-to-continue":"চালিয়ে যেতে ট্যাপ করুন"},"lesson-info":{"lesson-label":"লেসন"},"menu":{"brainboost-page-count":"আপনি **%{total}** এর মধ্যে **%{index}** নম্বর প্রশ্নে আছেন","cancel":"বাতিল করুন","exit":"লেসন এক্সিট করুন","exit-quiz":"কুইজ এক্সিট করুন","go-back":"শেষ স্লাইডটি পর্যালোচনা করুন","page-count":"আপনি **%{total}** এর মধ্যে **%{index}** নম্বর স্লাইডে আছেন","restart":"লেসনটি আবার শুরু করুন","resume":"আগের জায়গা থেকে শুরু করুন"},"peer-authoring":{"image-title":"ছবির শিরোনাম","submit":"জমা দিন","title-placeholder":"এখানে শিরোনাম লিখুন","upload-complete":"আপলোড সম্পন্ন হয়েছে","uploading":"আপলোড হচ্ছে...","video-title":"ভিডিওর শিরোনাম"},"pie-chart":{"touch-to-begin":"শুরু করতে স্পর্শ করুন"},"slide-answer":{"times-up":"সময় শেষ!","too-slow":"অত্যন্ত ধীর!"},"slider":{"touch-to-slide":"স্লাইড করার জন্য স্পর্শ করুন"},"social":{"be-first":"আপনার বক্তব্য রাখায় প্রথম হয়ে উঠুন।","delete":"ডিলিট করুন","have-your-say":"আপনার বক্তব্য রাখুন","report":"রিপোর্ট করুন","reported":"রিপোর্ট করা হয়েছে","thats-all":"এখনের জন্য এই পর্যন্তুই।"},"stars":{"all-earned":"1টি তারা উপার্জন করা হয়েছে |||| %{smart_count} তারা উপার্জন করা হয়েছে","available":"1টি তারা উপলব্ধ আছে |||| %{smart_count} তারা উপলব্ধ আছে","earned":"আপনি %{smart_count} এর মধ্যে %{earned} তারা উপার্জন করেছেন |||| আপনি %{smart_count} এর মধ্যে %{earned} তারা উপার্জন করেছেন"},"text-sequence":{"of":"এর"},"video":{"not-available":"দুঃখিত, এই মুহূর্তে এই ভিডিওটি </br> উপলব্ধ নেই।","skip-video":"ভিডিওটি এড়িয়ে যান"}}
});

;require.register("data/locales/da.yaml", function(exports, require, module) {
module.exports = {"audio-popup":{"allow":"Tillad lyd i denne lektion","cancel":"Annuller","description":"For at lytte til fortællingen skal du tillade lyd i denne lektion.","title":"Denne lektion er indtalt"},"buttons":{"close-lesson":"Luk lektion","continue":"Fortsæt","done":"OK, jeg er færdig","open-ed":"Åbn Ed","send":"Send"},"dial-distribution":{"touch-to-rotate":"Tryk&nbsp;for at&nbsp;rotere"},"dial":{"touch-to-rotate":"Tryk&nbsp;for at&nbsp;rotere"},"dialogs":{"disconnection":{"needs-background":"For at gennemføre denne lektion skal Ed køre i &nbsp;baggrunden.","please-open-ed":"For at fortsætte skal du åbne Ed og genstarte lektionen, så din fremdrift kan registreres&nbsp;korrekt."}},"game-jeopardy":{"is-false":"Falsk","is-true":"Sandt"},"game-jumble":{"drag-letters":"Træk bogstaverne til ordet ovenfor"},"game":{"bonus-time":"+%{bonus_time} sekunder","go":"KØR","labels":{"score":"Score","timer":"Timer"},"move-on":"Kom videre","of":"af","play-again":"Afspil igen","play-game":"OK, jeg er klar!","your-best":"Dit bedste","your-score":"Din score","your-stars":"Dine stjerner"},"image":{"tap-to-continue":"Tryk for at fortsætte"},"lesson-info":{"lesson-label":"Lektion"},"menu":{"brainboost-page-count":"Du er nået til  spørgsmål  **%{index}** af **%{total}**","cancel":"Annuller","exit":"Forlad lektion","exit-quiz":"Forlad quiz","go-back":"Gennemgå sidste slide","page-count":"Du er på slide **%{index}** af **%{total}**","restart":"Genstart lektion","resume":"Fortsæt "},"peer-authoring":{"image-title":"Billedtitel","submit":"Indsend","title-placeholder":"Indtast titel her","upload-complete":"Upload gennemført","uploading":"Uploader…","video-title":"Videotitel"},"pie-chart":{"touch-to-begin":"Tryk for begynde"},"slide-answer":{"times-up":"Tiden er udløbet!","too-slow":"For langsom!"},"slider":{"touch-to-slide":"Tryk for at slide"},"social":{"be-first":"Vær den første til at sige din mening.","delete":"Slet","have-your-say":"Sig din mening","report":"Rapportere","reported":"Rapporteret","thats-all":"Det er alt for nu"},"stars":{"all-earned":"1 stjerne optjent |||| %{smart_count} stjerner optjent","available":"1 stjerne tilgængelig |||| %{smart_count} stjerner tilgængelige","earned":"Du har optjent %{earned} ud af %{smart_count} stjerne |||| Du har optjent %{earned} ud af %{smart_count} stjerner"},"text-sequence":{"of":"af"},"video":{"not-available":"Beklager, denne video er </br> utilgængelig i øjeblikket.","skip-video":"Spring video over"}}
});

;require.register("data/locales/de.yaml", function(exports, require, module) {
module.exports = {"audio-popup":{"allow":"Audio für diese Lektion zulassen","cancel":"Abbrechen","description":"Um diese Lektion anzuhören, aktivieren Sie bitte die Audiofunktion.","title":"Diese Lektion ist sprachbasiert"},"buttons":{"close-lesson":"Lektion schließen","continue":"Weiter","done":"OK, ich bin fertig","open-ed":"Ed öffnen","send":"Senden"},"dial-distribution":{"touch-to-rotate":"Hier tippen,&nbsp;um&nbsp;zu drehen"},"dial":{"touch-to-rotate":"Hier tippen,&nbsp;um&nbsp;zu drehen"},"dialogs":{"disconnection":{"needs-background":"Um diese Lektion abzuschließen, muss Ed im&nbsp;Hintergrund laufen.","please-open-ed":"Um fortzufahren, öffnen Sie bitte Ed und starten Sie die Lektion neu, damit Ihr Fortschritt richtig protokolliert werden&nbsp;kann."}},"game-jeopardy":{"is-false":"Falsch","is-true":"Richtig"},"game-jumble":{"drag-letters":"Ziehen Sie die Buchstaben auf das Wort oben"},"game":{"bonus-time":"+%{bonus_time} Sekunden","go":"LOS","labels":{"score":"Ergebnis","timer":"Timer"},"move-on":"Weitermachen","of":"von","play-again":"Noch einmal spielen","play-game":"OK, ich bin soweit!","your-best":"Ihr Rekord","your-score":"Ihr Ergebnis","your-stars":"Ihre Sterne"},"image":{"tap-to-continue":"Hier tippen, um fortzufahren"},"lesson-info":{"lesson-label":"Lektion"},"menu":{"brainboost-page-count":"Sie sind bei Frage **%{index}** von **%{total}**","cancel":"Abbrechen","exit":"Lektion beenden","exit-quiz":"Quiz beenden","go-back":"Letzte Folie prüfen","page-count":"Sie sind auf Folie **%{index}** von **%{total}**","restart":"Lektion neu starten","resume":"Fortsetzen"},"peer-authoring":{"image-title":"Bildtitel","submit":"Einsenden","title-placeholder":"Geben Sie hier den Titel ein","upload-complete":"Upload abgeschlossen","uploading":"Wird hochgeladen …","video-title":"Videotitel"},"pie-chart":{"touch-to-begin":"Hier tippen, um zu beginnen"},"slide-answer":{"times-up":"Die Zeit ist abgelaufen!","too-slow":"Zu langsam!"},"slider":{"touch-to-slide":"Hier tippen, um zu schieben"},"social":{"be-first":"Geben Sie als erstes Ihre Meinung ab.","delete":"Löschen","have-your-say":"Geben Sie Ihre Meinung ab","report":"Melden","reported":"Gemeldet","thats-all":"So viel für heute."},"stars":{"all-earned":"1 Stern verdient |||| %{smart_count} Sterne verdient","available":"1 Stern verfügbar |||| %{smart_count} Sterne verfügbar","earned":"Sie haben %{earned} von %{smart_count} Stern verdient |||| Sie haben %{earned} von %{smart_count} Sternen verdient"},"text-sequence":{"of":"von"},"video":{"not-available":"Dieses Video ist </br> momentan leider nicht verfügbar.","skip-video":"Video überspringen"}}
});

;require.register("data/locales/en.yaml", function(exports, require, module) {
module.exports = {"audio-popup":{"allow":"Allow audio for this lesson","cancel":"Cancel","description":"To listen to the narration, please allow audio for this lesson.","title":"This lesson is narrated"},"buttons":{"close-lesson":"Close Lesson","continue":"Continue","done":"Continue","open-ed":"Open Ed","send":"Send"},"dial-distribution":{"touch-to-rotate":"Touch&nbsp;to&nbsp;rotate"},"dial":{"touch-to-rotate":"Touch&nbsp;to&nbsp;rotate"},"dialogs":{"disconnection":{"needs-background":"To complete this lesson, Ed needs to be running in the&nbsp;background.","please-open-ed":"To continue, please open Ed and restart the lesson so that your progress can be tracked&nbsp;correctly."}},"game-jeopardy":{"is-false":"False","is-true":"True"},"game-jumble":{"drag-letters":"Drag the letters to the word above"},"game":{"bonus-time":"+%{bonus_time} seconds","go":"GO","labels":{"score":"Score","timer":"Timer"},"move-on":"Move On","of":"of","play-again":"Play Again","play-game":"OK, I'm ready!","your-best":"Your best score","your-score":"Your score","your-stars":"Your stars"},"image":{"tap-to-continue":"Tap to continue"},"lesson-info":{"lesson-label":"Lesson"},"menu":{"brainboost-page-count":"You’re on question **%{index}** of **%{total}**","cancel":"Cancel","exit":"Exit lesson","exit-quiz":"Exit quiz","go-back":"Review last slide","page-count":"You’re on slide **%{index}** of **%{total}**","restart":"Restart lesson","resume":"Resume"},"peer-authoring":{"image-title":"Image Title","submit":"Submit","title-placeholder":"Enter title here","upload-complete":"Upload Complete","uploading":"Uploading...","video-title":"Video Title"},"pie-chart":{"touch-to-begin":"Touch to begin"},"slide-answer":{"times-up":"Time's Up!","too-slow":"Too Slow!"},"slider":{"touch-to-slide":"Touch to slide"},"social":{"be-first":"Be the first to have your say.","delete":"Delete","have-your-say":"Have your say","report":"Report","reported":"Reported","thats-all":"That's all for now."},"stars":{"all-earned":"1 star earned |||| %{smart_count} stars earned","available":"1 star available |||| %{smart_count} stars available","earned":"You earned %{earned} out of %{smart_count} star |||| You earned %{earned} out of %{smart_count} stars"},"text-sequence":{"of":"of"},"video":{"not-available":"Sorry, this video is </br> unavailable at the moment.","skip-video":"Skip Video"}}
});

;require.register("data/locales/es-ES.yaml", function(exports, require, module) {
module.exports = {"audio-popup":{"allow":"Permitir audio en esta lección","cancel":"Cancelar","description":"Para escuchar la narración, permite el audio en esta lección.","title":"Esta lección incluye narración"},"buttons":{"close-lesson":"Cerrar lección","continue":"Continuar","done":"He terminado","open-ed":"Abrir Ed","send":"Enviar"},"dial-distribution":{"touch-to-rotate":"Tocar&nbsp;para&nbsp;girar"},"dial":{"touch-to-rotate":"Tocar&nbsp;para&nbsp;girar"},"dialogs":{"disconnection":{"needs-background":"Para completar esta lección, Ed se tiene que ejecutar en&nbsp;segundo plano.","please-open-ed":"Para continuar, abre Ed y reinicia la lección para que se pueda realizar correctamente un seguimiento de tu&nbsp;progreso."}},"game-jeopardy":{"is-false":"Falso","is-true":"Verdadero"},"game-jumble":{"drag-letters":"Arrastra las letras a la palabra anterior"},"game":{"bonus-time":"+%{bonus_time} segundos","go":"IR","labels":{"score":"Puntuación","timer":"Temporizador"},"move-on":"Seguir","of":"de","play-again":"Volver a jugar","play-game":"¡Estoy listo/a!","your-best":"Tu mejor puntuación","your-score":"Tu puntuación","your-stars":"Tus estrellas"},"image":{"tap-to-continue":"Pulsar para continuar"},"lesson-info":{"lesson-label":"Lección"},"menu":{"brainboost-page-count":"Estás en la pregunta **%{index}** de **%{total}**","cancel":"Cancelar","exit":"Salir de la lección","exit-quiz":"Dejar cuestionario","go-back":"Revisar última diapositiva","page-count":"Estás en la diapositiva **%{index}** de **%{total}**","restart":"Reiniciar lección","resume":"Reanudar"},"peer-authoring":{"image-title":"Título de la imagen","submit":"Enviar","title-placeholder":"Introduce el título aquí","upload-complete":"Carga completada","uploading":"Cargando…","video-title":"Título del vídeo"},"pie-chart":{"touch-to-begin":"Tocar para empezar"},"slide-answer":{"times-up":"¡Se acabó el tiempo!","too-slow":"¡Demasiado lento!"},"slider":{"touch-to-slide":"Tocar para deslizar"},"social":{"be-first":"Sé el primero en expresar tu opinión.","delete":"Eliminar","have-your-say":"Expresa tu opinión","report":"Notificar","reported":"Notificado","thats-all":"Esto es todo por ahora."},"stars":{"all-earned":"1 estrella ganada |||| %{smart_count} estrellas ganadas","available":"1 estrella disponible |||| %{smart_count} estrellas disponibles","earned":"Has ganado %{earned} de %{smart_count} estrella |||| Has ganado %{earned} de %{smart_count} estrellas"},"text-sequence":{"of":"de"},"video":{"not-available":"Lo sentimos, este vídeo no está </br> disponible en este momento.","skip-video":"Saltar vídeo"}}
});

;require.register("data/locales/es.yaml", function(exports, require, module) {
module.exports = {"audio-popup":{"allow":"Activar el audio para esta lección","cancel":"Cancelar","description":"Para escuchar la narración, por favor active el audio en esta lección.","title":"Esta lección está narrada"},"buttons":{"close-lesson":"Cerrar lección","continue":"Continuar","done":"He terminado","open-ed":"Abrir Ed","send":"Enviar"},"dial-distribution":{"touch-to-rotate":"Tocar&nbsp;para&nbsp;girar"},"dial":{"touch-to-rotate":"Tocar&nbsp;para&nbsp;girar"},"dialogs":{"disconnection":{"needs-background":"Para completar esta lección, Ed se tiene que ejecutar en&nbsp;segundo plano.","please-open-ed":"Para continuar, abre Ed y reinicia la lección para que se pueda realizar correctamente un seguimiento de tu&nbsp;progreso."}},"game-jeopardy":{"is-false":"Falso","is-true":"Verdadero"},"game-jumble":{"drag-letters":"Arrastra las letras a la palabra anterior"},"game":{"bonus-time":"+%{bonus_time} segundos","go":"IR","labels":{"score":"Puntuación","timer":"Temporizador"},"move-on":"Seguir","of":"de","play-again":"Volver a jugar","play-game":"¡Estoy listo!","your-best":"Tu mejor puntuación","your-score":"Tu puntuación","your-stars":"Tus estrellas"},"image":{"tap-to-continue":"Pulsar para continuar"},"lesson-info":{"lesson-label":"Lección"},"menu":{"brainboost-page-count":"Estás en la pregunta **%{index}** de **%{total}**","cancel":"Cancelar","exit":"Salir de la lección","exit-quiz":"Dejar cuestionario","go-back":"Revisar última diapositiva","page-count":"Estás en la diapositiva **%{index}** de **%{total}**","restart":"Reiniciar lección","resume":"Reanudar"},"peer-authoring":{"image-title":"Título de la imagen","submit":"Enviar","title-placeholder":"Escriba el título aquí","upload-complete":"Carga completa","uploading":"Cargando...","video-title":"Título del video"},"pie-chart":{"touch-to-begin":"Tocar para empezar"},"slide-answer":{"times-up":"¡Se acabó el tiempo!","too-slow":"¡Demasiado lento!"},"slider":{"touch-to-slide":"Tocar para deslizar"},"social":{"be-first":"Sea el primero en opinar.","delete":"Eliminar","have-your-say":"Expresar su opinión","report":"Reportar","reported":"Reportado","thats-all":"Eso es todo por ahora."},"stars":{"all-earned":"1 estrella ganada |||| %{smart_count} estrellas ganadas","available":"1 estrella disponible |||| %{smart_count} estrellas disponibles","earned":"Has ganado %{earned} de %{smart_count} estrella |||| Has ganado %{earned} de %{smart_count} estrellas"},"text-sequence":{"of":"de"},"video":{"not-available":"Lo sentimos, este vídeo no está </br> disponible en este momento.","skip-video":"Saltar vídeo"}}
});

;require.register("data/locales/fi.yaml", function(exports, require, module) {
module.exports = {"audio-popup":{"allow":"Salli äänet tälle tehtävälle","cancel":"Peruuta","description":"Jos haluat kuunnella selostusta, salli äänet tälle tehtävälle.","title":"Tässä tehtävässä on selostusääni"},"buttons":{"close-lesson":"Sulje tehtävä","continue":"Jatka","done":"Jatka","open-ed":"Avaa Ed","send":"Lähetä"},"dial-distribution":{"touch-to-rotate":"Kierrä&nbsp;&nbsp;koskettamalla"},"dial":{"touch-to-rotate":"Kierrä&nbsp;&nbsp;koskettamalla"},"dialogs":{"disconnection":{"needs-background":"Edin on oltava käynnissä taustalla, jotta tämä tehtävä voitaisiin&nbsp;suorittaa.","please-open-ed":"Jos haluat jatkaa, avaa Ed ja aloita tehtävä uudelleen, jotta edistymistäsi voidaan seurata&nbsp;oikein."}},"game-jeopardy":{"is-false":"Väärin","is-true":"Totta"},"game-jumble":{"drag-letters":"Vedä kirjaimet yllä olevaan sanaan"},"game":{"bonus-time":"+ %{bonus_time} sekuntia","go":"ALOITA","labels":{"score":"Tulos","timer":"Kello"},"move-on":"Jatka eteenpäin","of":"/","play-again":"Toista uudestaan","play-game":"Selvä, olen valmis!","your-best":"Paras tuloksesi","your-score":"Oma tuloksesi","your-stars":"Omat tähtesi"},"image":{"tap-to-continue":"Jatka napauttamalla"},"lesson-info":{"lesson-label":"Tehtävä"},"menu":{"brainboost-page-count":"Olet kysymyksessä **%{index}**/**%{total}**","cancel":"Peruuta","exit":"Poistu tehtävästä","exit-quiz":"Poistu kyselystä","go-back":"Näytä viimeinen dia","page-count":"Olet diassa **%{index}**/**%{total}**","restart":"Aloita tehtävä uudelleen","resume":"Jatka"},"peer-authoring":{"image-title":"Kuvan nimi","submit":"Lähetä","title-placeholder":"Syötä nimi tähän","upload-complete":"Lataus valmis","uploading":"Ladataan...","video-title":"Videon nimi"},"pie-chart":{"touch-to-begin":"Aloita koskettamalla"},"slide-answer":{"times-up":"Aika loppui!","too-slow":"Liian hidas!"},"slider":{"touch-to-slide":"Vaihda diaa koskettamalla"},"social":{"be-first":"Sano sanottavasi ensimmäisenä.","delete":"Poista","have-your-say":"Sano sanottavasi","report":"Ilmoita","reported":"Ilmoitettu","thats-all":"Siinä oli toistaiseksi kaikki."},"stars":{"all-earned":"1 tähti ansaittu |||| %{smart_count} tähteä ansaittu","available":"1 tähti saatavilla |||| %{smart_count} tähteä saatavilla","earned":"Olet ansainnut %{earned}/%{smart_count} tähden |||| Olet ansainnut %{earned}/%{smart_count} tähteä"},"text-sequence":{"of":"/"},"video":{"not-available":"Ikävä kyllä tämä video ei ole </br> juuri nyt saatavilla.","skip-video":"Ohita video"}}
});

;require.register("data/locales/fr.yaml", function(exports, require, module) {
module.exports = {"audio-popup":{"allow":"Autoriser l’audio pour cette leçon","cancel":"Annuler","description":"Pour écouter le commentaire, veuillez autoriser l’audio pour cette leçon.","title":"Cette leçon est commentée"},"buttons":{"close-lesson":"Fermer la leçon","continue":"Continuer","done":"Ok, j’ai fini","open-ed":"Ouvrir Ed","send":"Envoyer"},"dial-distribution":{"touch-to-rotate":"Appuyer pour tourner"},"dial":{"touch-to-rotate":"Appuyer pour tourner"},"dialogs":{"disconnection":{"needs-background":"Pour faire cette leçon, Ed a besoin de fonctionner en arrière-plan","please-open-ed":"Pour continuer, veuillez ouvrir Ed et recommencer la leçon afin de calculer votre progrès. "}},"game-jeopardy":{"is-false":"Faux","is-true":"Vrai"},"game-jumble":{"drag-letters":"Fair glisser les lettres au mot au-dessus"},"game":{"bonus-time":"+%{bonus_time} secondes","go":"ALLEZ","labels":{"score":"Score","timer":"Minuteur"},"move-on":"Poursuivre","of":"de","play-again":"Recommencer","play-game":"OK, je suis prêt(e) !","your-best":"Votre meilleur score","your-score":"Votre score","your-stars":"Vos étoiles"},"image":{"tap-to-continue":"Appuyer pour continuer"},"lesson-info":{"lesson-label":"Leçon"},"menu":{"brainboost-page-count":"Vous en êtes à la question **%{index}** sur **%{total}**","cancel":"Annuler","exit":"Quitter","exit-quiz":"Quitter le quiz","go-back":"Retourner au dernier écran","page-count":"Vous regardez diapo. **%{index}** de **%{total}**","restart":"Recommencer","resume":"Continuer"},"peer-authoring":{"image-title":"Titre de l’image","submit":"Envoyer","title-placeholder":"Saisir le titre ici","upload-complete":"Téléchargement terminé","uploading":"Téléchargement en cours...","video-title":"Titre de la vidéo"},"pie-chart":{"touch-to-begin":"Appuyer pour commencer"},"slide-answer":{"times-up":"Le temps est écoulé !","too-slow":"Trop lent!"},"slider":{"touch-to-slide":"Toucher pour glisser"},"social":{"be-first":"Soyez le premier/la première à donner votre avis.","delete":"Supprimer","have-your-say":"Donnez votre avis","report":"Signaler","reported":"Communiqué","thats-all":"C’est tout pour l’instant."},"stars":{"all-earned":"1 étoile gagnée |||| %{smart_count} étoiles gagnées","available":"1 étoile à gagner |||| %{smart_count} étoiles à gagner","earned":"Vous avez gagné %{earned} de %{smart_count} étoile |||| Vous avez gagné %{earned} de %{smart_count} étoiles"},"text-sequence":{"of":"de"},"video":{"not-available":"Malheureusement, cette video n’est </br> pas disponible pour le moment. ","skip-video":"Passer la vidéo"}}
});

;require.register("data/locales/hi.yaml", function(exports, require, module) {
module.exports = {"audio-popup":{"allow":"इस पाठ के लिए ऑडियो की अनुमति दें","cancel":"रद्द ","description":"वर्णन को सुनने के लिए, कृपया इस पाठ के लिए ऑडियो की अनुमति दें।","title":"यह पाठ सुनाया गया है"},"buttons":{"close-lesson":"बंद करना","continue":"जारी","done":"ठीक है, मेरा हो गया","open-ed":"Ed खोलें","send":"भेजना"},"dial-distribution":{"touch-to-rotate":"घुमाने के लिए स्पर्श करें"},"dial":{"touch-to-rotate":"घुमाने के लिए स्पर्श करें"},"dialogs":{"disconnection":{"needs-background":"इस पाठ को पूरा करने के लिए, Ed को पृष्ठभूमि में चलने की आवश्यकता है।","please-open-ed":"जारी रखने के लिए, कृपया Ed खोलें और पाठ को फिर से शुरू करें ताकि आपकी प्रगति को ट्रैक किया जा सके & nbsp;"}},"game-jeopardy":{"is-false":"ग़लत","is-true":"सच"},"game-jumble":{"drag-letters":"अक्षरों को ऊपर दिए गए शब्द पर खींचें"},"game":{"bonus-time":"\"+%{bonus_time} सेकंड","go":"चलना","labels":{"score":"अंक","timer":"घड़ी"},"move-on":"आगे जाना","of":"के","play-again":"पाठ दोबारा करें","play-game":"ठीक है, मैं तैयार हूं","your-best":"तुम्हारा सर्वोत्तम","your-score":"आपके अंक","your-stars":"आपके तेरे"},"image":{"tap-to-continue":"जारी रखने के लिए दबाएं"},"lesson-info":{"lesson-label":"पाठ"},"menu":{"cancel":"रद्द ","exit":"सबक से बाहर निकलें","go-back":"अंतिम स्लाइड की समीक्षा करें","page-count":"आप स्लाइड पर हैं **%{index} ** का **%{total} **","restart":"पाठ को पुनः आरंभ करें"},"peer-authoring":{"image-title":"छवि शीर्षक","submit":"सबमिट करें","title-placeholder":"शीर्षक यहां दर्ज करें","upload-complete":"अपलोड पूर्ण","uploading":"अपलोड हो रहा...","video-title":"वीडियो शीर्षक"},"pie-chart":{"touch-to-begin":"शुरू करने के लिए स्पर्श करें"},"slide-answer":{"too-slow":"बहुत धीमा!"},"slider":{"touch-to-slide":"स्लाइड करने के लिए स्पर्श करें"},"social":{"be-first":"अपनी राय रखने वाले पहले व्यक्ति बनिए।","delete":"हटाना","have-your-say":"अपनी बात रखो","report":"शिकायत करना","reported":"की सूचना दी","thats-all":"अभी के लिए इतना ही।"},"stars":{"all-earned":"1 सितारा कमाया ||| %{smart_count} सितारों ने कमाया","available":"1 सितारा उपलब्ध ||| %{smart_count} सितारे उपलब्ध हैं","earned":"आपने %{earned} को %{smart_count} स्टार से अर्जित किया है ||| आपने %{earned} को %{smart_count} सितारों से अर्जित किया"},"text-sequence":{"of":"के"},"video":{"not-available":"क्षमा करें, यह वीडियो इस समय </br> अनुपलब्ध है।","skip-video":"वीडियो छोड़ें"}}
});

;require.register("data/locales/id.yaml", function(exports, require, module) {
module.exports = {"audio-popup":{"allow":"Izinkan audio untuk pelajaran ini","cancel":"Batal","description":"Untuk mendengarkan narasinya, izinkanlah audio untuk pelajaran ini.","title":"Pelajaran ini dinarasikan"},"buttons":{"close-lesson":"Tutup Pelajaran","continue":"Lanjutkan","done":"Ok, saya sudah selesai","open-ed":"Buka Ed","send":"Kirim"},"dial-distribution":{"touch-to-rotate":"Sentuh&nbsp;untuk&nbsp;memutar"},"dial":{"touch-to-rotate":"Sentuh&nbsp;untuk&nbsp;memutar"},"dialogs":{"disconnection":{"needs-background":"Untuk menyelesaikan pelajaran ini, Ed harus dijalankan di latar belakang&nbsp;.","please-open-ed":"Untuk melanjutkan, buka Ed dan mulai ulang pelajaran agar kemajuan Anda dapat dilacak&nbsp;dengan benar."}},"game-jeopardy":{"is-false":"Salah","is-true":"Benar"},"game-jumble":{"drag-letters":"Geser huruf ke kata di atas"},"game":{"bonus-time":"+%{bonus_time} detik","go":"YAK!","labels":{"score":"Skor","timer":"Pengatur Waktu"},"move-on":"Maju Terus","of":"dari","play-again":"Mainkan Lagi","play-game":"Baik, saya siap!","your-best":"Rekor terbaik Anda","your-score":"Skor Anda","your-stars":"Bintang Anda"},"image":{"tap-to-continue":"Ketuk untuk melanjutkan"},"lesson-info":{"lesson-label":"Pelajaran"},"menu":{"brainboost-page-count":"Anda berada di pertanyaan **%{index}** dari **%{total}**","cancel":"Batal","exit":"Keluar dari pelajaran","exit-quiz":"Keluar kuis","go-back":"Tinjau slide terakhir","page-count":"Anda berada pada slide **%{index}** dari **%{total}**","restart":"Mulai kembali pelajaran","resume":"Lanjut"},"peer-authoring":{"image-title":"Judul Gambar","submit":"Serahkan","title-placeholder":"Masukkan judul di sini","upload-complete":"Unduh Selesai","uploading":"Sedang mengunduh...","video-title":"Judul Video"},"pie-chart":{"touch-to-begin":"Sentuh untuk memulai"},"slide-answer":{"times-up":"Waktu Habis!","too-slow":"Terlalu Lambat!"},"slider":{"touch-to-slide":"Sentuh untuk menggeser"},"social":{"be-first":"Jadilah orang pertama yang berkesempatan mengungkapkan pendapat Anda.","delete":"Hapus","have-your-say":"Katakan saja","report":"Laporan","reported":"Dilaporkan","thats-all":"Itu saja untuk saat ini."},"stars":{"all-earned":"1 bintang diperoleh |||| %{smart_count} perolehan bintang","available":"1 bintang tersedia |||| %{smart_count} bintang tersedia","earned":"Anda memperoleh %{earned} dari %{smart_count} bintang |||| Anda memperoleh %{earned} dari %{smart_count} bintang"},"text-sequence":{"of":"dari"},"video":{"not-available":"Maaf, video ini </br> tidak tersedia saat ini.","skip-video":"Lewati Video"}}
});

;require.register("data/locales/it.yaml", function(exports, require, module) {
module.exports = {"audio-popup":{"allow":"Consenti audio per questa lezione","cancel":"Annulla","description":"Per ascoltare i commenti, consenti l’audio per questa lezione.","title":"Questa lezione ha commenti audio"},"buttons":{"close-lesson":"Chiudi lezione","continue":"Continua","done":"OK, ho finito","open-ed":"Apri Ed","send":"Invia"},"dial-distribution":{"touch-to-rotate":"Tocca&nbsp;per&nbsp;ruotare"},"dial":{"touch-to-rotate":"Tocca&nbsp;per&nbsp;ruotare"},"dialogs":{"disconnection":{"needs-background":"Per completare questa lezione, Ed dev’essere eseguito in&nbsp;background.","please-open-ed":"Per continuare, apri Ed e riavvia la lezione così il tuo progresso potrà essere tracciato&nbsp;correttamente."}},"game-jeopardy":{"is-false":"Falso","is-true":"Vero"},"game-jumble":{"drag-letters":"Trascina le lettere nella parola in alto"},"game":{"bonus-time":"+%{bonus_time} secondi","go":"VIA","labels":{"score":"Punteggio","timer":"Timer"},"move-on":"Vai avanti","of":"di","play-again":"Gioca di nuovo","play-game":"OK, sono pronto!","your-best":"Il tuo record","your-score":"Il tuo punteggio","your-stars":"Le tue stelle"},"image":{"tap-to-continue":"Tocca per continuare"},"lesson-info":{"lesson-label":"Lezione"},"menu":{"brainboost-page-count":"Sei alla domanda **%{index}** di **%{total}**","cancel":"Annulla","exit":"Esci dalla lezione","exit-quiz":"Esci dal quiz","go-back":"Rivedi l’ultima diapositiva","page-count":"Ti trovi alla diapositiva **%{index}** di **%{total}**","restart":"Ricomincia la lezione","resume":"Riprendi"},"peer-authoring":{"image-title":"Titolo immagine","submit":"Invia","title-placeholder":"Inserisci il titolo","upload-complete":"Caricamento completato","uploading":"Caricamento...","video-title":"Titolo video"},"pie-chart":{"touch-to-begin":"Tocca per iniziare"},"slide-answer":{"times-up":"Tempo scaduto!","too-slow":"Troppo lento!"},"slider":{"touch-to-slide":"Tocca per scorrere"},"social":{"be-first":"Sii il primo a dire la tua.","delete":"Elimina","have-your-say":"Di' la tua","report":"Segnala","reported":"Segnalato","thats-all":"È tutto per ora."},"stars":{"all-earned":"1 stella ottenuta |||| %{smart_count} stelle ottenute","available":"1 stella disponibile |||| %{smart_count} stelle disponibili","earned":"Hai ottenuto %{earned} stella su %{smart_count}. |||| Hai ottenuto %{earned} stelle su %{smart_count}."},"text-sequence":{"of":"di"},"video":{"not-available":"Questo video non è </br> al momento disponibile.","skip-video":"Salta video"}}
});

;require.register("data/locales/ja.yaml", function(exports, require, module) {
module.exports = {"audio-popup":{"allow":"このレッスンでオーディオを有効にする","cancel":"キャンセル","description":"ナレーションを聞くには、このレッスンでオーディオを有効にしてください。","title":"このレッスンはナレーション付きです"},"buttons":{"close-lesson":"レッスンを閉じる","continue":"続ける","done":"続ける","open-ed":"Edを開く","send":"送信"},"dial-distribution":{"touch-to-rotate":"&nbsp;タッチして&nbsp;回転"},"dial":{"touch-to-rotate":"&nbsp;タッチして&nbsp;回転"},"dialogs":{"disconnection":{"needs-background":"このレッスンを完了するには&nbsp;バックグラウンドでEdを実行する必要があります。","please-open-ed":"続けるには、Edを開いてレッスンを再開してください。&nbsp;進捗が正しい状態に戻ります。"}},"game-jeopardy":{"is-false":"正しくない","is-true":"正しい"},"game-jumble":{"drag-letters":"上の語句をドラッグしてください"},"game":{"bonus-time":"+%{bonus_time}秒","go":"スタート","labels":{"score":"スコア","timer":"タイマー"},"move-on":"次へ","of":"／","play-again":"もう一度","play-game":"準備OK！","your-best":"ベストスコア","your-score":"スコア","your-stars":"スター数"},"image":{"tap-to-continue":"タップして続ける"},"lesson-info":{"lesson-label":"レッスン"},"menu":{"brainboost-page-count":"現在,**%{total}**問中**%{index}**問目です。","cancel":"キャンセル","exit":"レッスン終了","exit-quiz":"クイズを終了","go-back":"最後のスライドを確認","page-count":"\\*%{index}/%{total}\\*スライド目です","restart":"レッスン再開始","resume":"再開"},"peer-authoring":{"image-title":"画像のタイトル","submit":"提出","title-placeholder":"ここにタイトルを入力","upload-complete":"アップロード完了","uploading":"アップロード中...","video-title":"ビデオのタイトル"},"pie-chart":{"touch-to-begin":"タッチして開始"},"slide-answer":{"times-up":"時間切れです！","too-slow":"遅すぎ！"},"slider":{"touch-to-slide":"タッチしてスライド"},"social":{"be-first":"意見を言う最初の人になりましょう。","delete":"削除","have-your-say":"ご意見","report":"レポート","reported":"レポート済","thats-all":"これで以上です。"},"stars":{"all-earned":"1 つのスターを獲得 |||| %{smart_count} つのスターを獲得","available":"1 つのスターを利用可能 |||| %{smart_count} つのスターを利用可能","earned":"あなたは %{smart_count} つのスターのうち %{earned} つを獲得 |||| あなたは %{smart_count} つのスターのうち %{earned} を獲得"},"text-sequence":{"of":"／"},"video":{"not-available":"現在この動画は</br> 利用できません。","skip-video":"動画をスキップ"}}
});

;require.register("data/locales/ko.yaml", function(exports, require, module) {
module.exports = {"audio-popup":{"allow":"이 수업에 오디오 허용","cancel":"취소","description":"내레이션을 들으려면 이 수업에 오디오를 허용해 주세요.","title":"이 수업은 내레이션이 있습니다"},"buttons":{"close-lesson":"레슨 닫기","continue":"계속하기","done":"네, 마쳤습니다","open-ed":"Ed 열기","send":"보내기"},"dial-distribution":{"touch-to-rotate":"터치하여 로테이트하기"},"dial":{"touch-to-rotate":"터치하여 로테이트하기"},"dialogs":{"disconnection":{"needs-background":"이 레슨을 완료하려면 Ed가 백그라운드에서 실행되어야 합니다.","please-open-ed":"계속하려면 학습 진행률을 올바르게 추적할 수 있도록 Ed를 열고 레슨을 재시작하세요."}},"game-jeopardy":{"is-false":"거짓","is-true":"참"},"game-jumble":{"drag-letters":"글자 위의 단어로 끌어다 놓기"},"game":{"bonus-time":"+%{bonus_time} 초","go":"시작","labels":{"score":"점수","timer":"타이머"},"move-on":"이동","of":"게임","play-again":"다시 플레이","play-game":"준비 완료!","your-best":"최고 점수","your-score":"점수","your-stars":"별"},"image":{"tap-to-continue":"탭하여 계속하기"},"lesson-info":{"lesson-label":"레슨"},"menu":{"brainboost-page-count":"**%{total}** 중 **%{index}** 질문입니다.","cancel":"취소","exit":"레슨 나가기","exit-quiz":"퀴즈에서 나가기","go-back":"이전 슬라이드 검토","page-count":"**%{total}** 중 **%{index}** 슬라이드 학습 중","restart":"레슨 재시작","resume":"다시 시작하기"},"peer-authoring":{"image-title":"이미지 제목","submit":"제출","title-placeholder":"여기에 제목 입력","upload-complete":"업로드 완료","uploading":"업로드 중…","video-title":"비디오 제목"},"pie-chart":{"touch-to-begin":"터치하여 시작하기"},"slide-answer":{"times-up":"시간이 다 됐어요!","too-slow":"너무 느립니다!"},"slider":{"touch-to-slide":"슬라이드 터치"},"social":{"be-first":"먼저 말을 걸어 보세요.","delete":"삭제","have-your-say":"하고 싶은 말을 다 하세요","report":"리포트","reported":"리포트됨","thats-all":"더 이상 로드할 내용이 없습니다."},"stars":{"all-earned":"별 1개 획득 |||| 별 %{smart_count}개 획득","available":"별 1개 이용 가능 |||| 별 %{smart_count}개 이용 가능","earned":"별 {smart_count}개 중 %{earned}개 획득 |||| 별 {smart_count}개 중 %{earned}개 획득"},"text-sequence":{"of":"의"},"video":{"not-available":"죄송합니다. 현재 이 비디오를 이용할 수 없습니다.","skip-video":"비디오 건너뛰기"}}
});

;require.register("data/locales/nl.yaml", function(exports, require, module) {
module.exports = {"audio-popup":{"allow":"Sta audio toe voor deze les","cancel":"Annuleren","description":"Om te luisteren, sta je voor deze les audio toe.","title":"Deze les is ingesproken"},"buttons":{"close-lesson":"Sluit les","continue":"Ga verder","done":"Ok, ik ben klaar","open-ed":"Open Ed","send":"Verzenden"},"dial-distribution":{"touch-to-rotate":"Aanraken&nbsp;om te&nbsp;draaien"},"dial":{"touch-to-rotate":"Aanraken&nbsp;om te&nbsp;draaien"},"dialogs":{"disconnection":{"needs-background":"Om deze les te voltooien, moet Ed op de achtergrond&nbsp;draaien.","please-open-ed":"Om verder te gaan, open je Ed en start je de les opnieuw zodat je vooruitgang correct kan worden&nbsp;gevolgd."}},"game-jeopardy":{"is-false":"Niet waar","is-true":"Waar"},"game-jumble":{"drag-letters":"Sleep de letters naar het bovenstaande woord"},"game":{"bonus-time":"+%{bonus_time} seconden","go":"START!","labels":{"score":"Score","timer":"Timer"},"move-on":"Verder gaan","of":"van","play-again":"Weer spelen","play-game":"Ik ben er klaar voor!","your-best":"Je record","your-score":"Je score","your-stars":"Je sterren"},"image":{"tap-to-continue":"Tik om verder te gaan"},"lesson-info":{"lesson-label":"Les"},"menu":{"brainboost-page-count":"Je bent bij vraag **%{index}** van **%{total}**","cancel":"Annuleren","exit":"Verlaat les","exit-quiz":"Quiz afsluiten","go-back":"Bekijk laatste dia","page-count":"Je bent op dia **%{index}** van **%{total}**","restart":"Begin les opnieuw","resume":"Doorgaan"},"peer-authoring":{"image-title":"Titel afbeelding","submit":"Indienen","title-placeholder":"Titel hier invoeren","upload-complete":"Upload voltooid","uploading":"Uploaden…","video-title":"Titel video"},"pie-chart":{"touch-to-begin":"Aanraken om te beginnen"},"slide-answer":{"times-up":"De tijd is om!","too-slow":"Te langzaam!"},"slider":{"touch-to-slide":"Aanraken om te glijden"},"social":{"be-first":"Wees de eerste om je mening te geven.","delete":"Verwijder","have-your-say":"Geef je mening","report":"Rapporteren","reported":"Gerapporteerd","thats-all":"Dat was het."},"stars":{"all-earned":"1 ster verdiend |||| %{smart_count} sterren verdiend","available":"1 ster beschikbaar |||| %{smart_count} sterren beschikbaar","earned":"Je hebt %{earned} van de %{smart_count} ster verdiend |||| Je hebt %{earned} van de %{smart_count} sterren verdiend"},"text-sequence":{"of":"van"},"video":{"not-available":"Sorry, deze video is </br>  momenteel niet beschikbaar.","skip-video":"Video overslaan"}}
});

;require.register("data/locales/no.yaml", function(exports, require, module) {
module.exports = {"audio-popup":{"allow":"Tillatt lyd for denne leksjonen","cancel":"Avbryt","description":"For å høre på taleveiledning må du gi tillatelse til lyd for denne leksjonen.","title":"Denne leksjonen har taleveiledning"},"buttons":{"close-lesson":"Lukk leksjon","continue":"Fortsett","done":"Fortsett","open-ed":"Åpne Ed","send":"Send"},"dial-distribution":{"touch-to-rotate":"Berør&nbsp;for å&nbsp;rotere"},"dial":{"touch-to-rotate":"Berør&nbsp;for å&nbsp;rotere"},"dialogs":{"disconnection":{"needs-background":"For å fullføre denne leksjonen må Ed kjøre i&nbsp;bakgrunnen.","please-open-ed":"For å fortsette må du åpne Ed og starte leksjonen på nytt, slik at fremgangen din kan spores&nbsp;riktig."}},"game-jeopardy":{"is-false":"Galt","is-true":"Riktig"},"game-jumble":{"drag-letters":"Dra bokstavene til ordet ovenfor"},"game":{"bonus-time":"+%{bonus_time} sekunder","go":"START","labels":{"score":"Poengsum","timer":"Stoppeklokke"},"move-on":"Gå videre","of":"av","play-again":"Spill av på nytt","play-game":"OK, jeg er klar!","your-best":"Din beste poengsum","your-score":"Din poengsum","your-stars":"Dine stjerner"},"image":{"tap-to-continue":"Trykk for å fortsette"},"lesson-info":{"lesson-label":"Leksjon"},"menu":{"brainboost-page-count":"Du er på spørsmål  **%{index}** av **%{total}**","cancel":"Avbryt","exit":"Gå ut av leksjon","exit-quiz":"Gå ut av quiz","go-back":"Se forrige bilde på nytt","page-count":"Du er på bilde **%{index}** av **%{total}**","restart":"Start leksjonen på nytt","resume":"Gjenoppta"},"peer-authoring":{"image-title":"Bildetittel","submit":"Send inn","title-placeholder":"Skriv inn tittel her","upload-complete":"Opplasting fullført","uploading":"Laster opp …","video-title":"Videotittel"},"pie-chart":{"touch-to-begin":"Berør for å begynne"},"slide-answer":{"times-up":"Tiden er ute!","too-slow":"For sent!"},"slider":{"touch-to-slide":"Berør for å sveipe"},"social":{"be-first":"Vær den første til å si din mening.","delete":"Slett","have-your-say":"Si din mening","report":"Rapporter","reported":"Rapportert","thats-all":"Det var alt for denne gang."},"stars":{"all-earned":"1 stjerne opptjent |||| %{smart_count} stjerner opptjent","available":"1 stjerne tilgjengelig |||| %{smart_count} stjerner tilgjengelig","earned":"Du har tjent opp %{earned} av %{smart_count} stjerne |||| Du har tjent opp %{earned} av %{smart_count} stjerner"},"text-sequence":{"of":"av"},"video":{"not-available":"Beklager, denne videoen er </br> utilgjengelig for øyeblikket.","skip-video":"Hopp over video"}}
});

;require.register("data/locales/pl.yaml", function(exports, require, module) {
module.exports = {"audio-popup":{"allow":"Włącz dźwięk dla tej lekcji","cancel":"Anuluj","description":"Aby móc słuchać narracji, włącz dźwięk dla tej lekcji.","title":"Ta lekcja ma narratora"},"buttons":{"close-lesson":"Zamknij lekcję","continue":"Kontynuuj","done":"OK, gotowe","open-ed":"Otwórz aplikację Ed","send":"Wyślij"},"dial-distribution":{"touch-to-rotate":"Dotknij,&nbsp;aby&nbsp;obrócić"},"dial":{"touch-to-rotate":"Dotknij,&nbsp;aby&nbsp;obrócić"},"dialogs":{"disconnection":{"needs-background":"Aby zakończyć tę lekcję, aplikacja Ed musi być uruchomiona w&nbsp;tle.","please-open-ed":"Aby kontynuować, otwórz aplikację Ed i uruchom ponownie lekcję. Pozwoli to na&nbsp;poprawne śledzenie postępów."}},"game-jeopardy":{"is-false":"Fałsz","is-true":"Prawda"},"game-jumble":{"drag-letters":"Przeciągnij litery na słowo powyżej"},"game":{"bonus-time":"+%{bonus_time} sekund","go":"PRZEJDŹ","labels":{"score":"Punkty","timer":"Timer"},"move-on":"Przejdź dalej","of":"z","play-again":"Zagraj ponownie","play-game":"OK, gotowe!","your-best":"Twój najlepszy wynik","your-score":"Twój wynik","your-stars":"Twoje gwiazdki"},"image":{"tap-to-continue":"Dotknij, aby kontynuować"},"lesson-info":{"lesson-label":"Lekcja"},"menu":{"brainboost-page-count":"Jesteś na pytaniu **%{index}** z **%{total}**","cancel":"Anuluj","exit":"Zamknij lekcję","exit-quiz":"Opuść quiz","go-back":"Przejrzyj ostatni slajd","page-count":"Jesteś na slajdzie **%{index}** z **%{total}**","restart":"Uruchom ponownie lekcję","resume":"Wznów"},"peer-authoring":{"image-title":"Nazwa grafiki","submit":"Wyślij","title-placeholder":"Wpisz tytuł tutaj","upload-complete":"Wysyłanie zakończone","uploading":"Wysyłanie...","video-title":"Tytuł filmu"},"pie-chart":{"touch-to-begin":"Dotknij, aby rozpocząć"},"slide-answer":{"times-up":"Czas minął!","too-slow":"Za wolno!"},"slider":{"touch-to-slide":"Dotknij, aby przesunąć"},"social":{"be-first":"Zabierz głos jako pierwszy.","delete":"Usuń","have-your-say":"Zabierz głos","report":"Zgłoś","reported":"Zgłoszone","thats-all":"To wszystko na teraz."},"stars":{"all-earned":"Zdobyta 1 gwiazda |||| Liczba zdobytych gwiazdek: %{smart_count}","available":"Dostępna 1 gwiazdka |||| Liczba dostępnych gwiazdek: %{smart_count}","earned":"Zdobyto %{earned} z %{smart_count} gwiazdki |||| Zdobyto %{earned} z %{smart_count} gwiazdek"},"text-sequence":{"of":"z"},"video":{"not-available":"Przepraszamy, ten film </br>jest w tej chwili niedostępny.","skip-video":"Pomiń film"}}
});

;require.register("data/locales/pt.yaml", function(exports, require, module) {
module.exports = {"audio-popup":{"allow":"Permitir o áudio para esta aula","cancel":"Cancelar","description":"Para escutar a narração, permita o áudio para esta aula.","title":"Esta aula é narrada"},"buttons":{"close-lesson":"Fechar aula","continue":"Continuar","done":"OK, terminei","open-ed":"Abrir Ed","send":"Enviar"},"dial-distribution":{"touch-to-rotate":"Toque&nbsp;para&nbsp;rodar"},"dial":{"touch-to-rotate":"Toque&nbsp;para&nbsp;rodar"},"dialogs":{"disconnection":{"needs-background":"Para concluir esta aula, o Ed deve estar em execução em&nbsp;segundo plano.","please-open-ed":"Para continuar, abra o Ed e reinicie a aula para que o seu progresso possa ser monitorizado&nbsp;corretamente."}},"game-jeopardy":{"is-false":"Falso","is-true":"Verdadeiro"},"game-jumble":{"drag-letters":"Arraste as letras para a palavra acima"},"game":{"bonus-time":"+%{bonus_time} segundos","go":"IR","labels":{"score":"Pontuação","timer":"Temporizador"},"move-on":"Avançar","of":"de","play-again":"Jogar novamente","play-game":"OK, estou pronto!","your-best":"O seu melhor resultado","your-score":"A sua pontuação","your-stars":"As suas estrelas"},"image":{"tap-to-continue":"Toque para continuar"},"lesson-info":{"lesson-label":"Aula"},"menu":{"brainboost-page-count":"Está na pergunta **%{index}** de **%{total}**","cancel":"Cancelar","exit":"Sair da aula","exit-quiz":"Sair do teste","go-back":"Rever último diapositivo","page-count":"Está no diapositivo **%{index}** de **%{total}**","restart":"Reiniciar aula","resume":"Retomar"},"peer-authoring":{"image-title":"Título da imagem","submit":"Entregar","title-placeholder":"Introduza o título aqui","upload-complete":"Carregamento concluído","uploading":"A carregar…","video-title":"Título do vídeo"},"pie-chart":{"touch-to-begin":"Toque para iniciar"},"slide-answer":{"times-up":"Acabou o tempo!","too-slow":"Demasiado lento!"},"slider":{"touch-to-slide":"Toque para deslizar"},"social":{"be-first":"Seja o primeiro a dar a sua opinião.","delete":"Eliminar","have-your-say":"Dê a sua opinião","report":"Denunciar","reported":"Denunciado","thats-all":"Por agora é tudo."},"stars":{"all-earned":"Ganhou 1 estrela |||| Ganhou %{smart_count} estrelas","available":"1 estrela disponível |||| %{smart_count} estrelas disponíveis","earned":"Ganhou %{earned} de %{smart_count} estrela |||| Ganhou %{earned} de %{smart_count} estrelas"},"text-sequence":{"of":"de"},"video":{"not-available":"Lamentamos, mas este vídeo está </br> indisponível de momento.","skip-video":"Ignorar vídeo"}}
});

;require.register("data/locales/ro.yaml", function(exports, require, module) {
module.exports = {"audio-popup":{"allow":"Activați componenta audio pentru această lecție","cancel":"Anulare","description":"Pentru a asculta narațiunea, activați componenta audio pentru această lecție.","title":"Această lecție este narată"},"buttons":{"close-lesson":"Închidere lecție","continue":"Continuare","done":"Ok, am terminat","open-ed":"Deschidere Ed","send":"Trimitere"},"dial-distribution":{"touch-to-rotate":"Atingeți&nbsp;pentru&nbsp;a roti"},"dial":{"touch-to-rotate":"Atingeți&nbsp;pentru&nbsp;a roti"},"dialogs":{"disconnection":{"needs-background":"Pentru a finaliza această lecție, Ed trebuie să ruleze în&nbsp;fundal.","please-open-ed":"Pentru a continua, vă rugăm să deschideți Ed și să reporniți lecția pentru ca evoluția dvs. să poată fi urmărită&nbsp;în mod corect."}},"game-jeopardy":{"is-false":"Fals","is-true":"Adevărat"},"game-jumble":{"drag-letters":"Trageți literele pe cuvântul de mai sus"},"game":{"bonus-time":"+%{bonus_time} secunde","go":"START","labels":{"score":"Punctaj","timer":"Cronometru"},"move-on":"Treceți mai departe","of":"din","play-again":"Jucați din nou","play-game":"OK, sunt gata!","your-best":"Cel mai bun rezultat al dvs.","your-score":"Punctajul dvs.","your-stars":"Stelele dvs."},"image":{"tap-to-continue":"Apăsați pentru a continua"},"lesson-info":{"lesson-label":"Lecție"},"menu":{"brainboost-page-count":"Ești la întrebarea **%{index}** din **%{total}**","cancel":"Anulare","exit":"Părăsire lecție","exit-quiz":"Ieșire din test","go-back":"Revizualizarea ultimului diapozitiv","page-count":"Sunteți la diapozitivul **%{index}** din **%{total}**","restart":"Repornire lecție","resume":"Reluare"},"peer-authoring":{"image-title":"Titlu imagine","submit":"Transmiteți","title-placeholder":"Introduceți aici titlul","upload-complete":"Încărcare finalizată","uploading":"Se încarcă…","video-title":"Titlu videoclip"},"pie-chart":{"touch-to-begin":"Atingeți pentru a începe"},"slide-answer":{"times-up":"Timpul a expirat!","too-slow":"Prea încet!"},"slider":{"touch-to-slide":"Atingeți pentru a glisa"},"social":{"be-first":"Fiți primul care își spune cuvântul.","delete":"Ștergere","have-your-say":"Spuneți-vă cuvântul","report":"Raport","reported":"Raportat","thats-all":"Aceasta este tot deocamdată."},"stars":{"all-earned":"1 stea câștigată |||| %{smart_count} stele câștigate","available":"1 stea disponibilă |||| %{smart_count} stele disponibile","earned":"Ați câștigat %{earned} din %{smart_count} stea |||| Ați câștigat %{earned} din %{smart_count} stele"},"text-sequence":{"of":"din"},"video":{"not-available":"Ne cerem scuze, acest videoclip </br> nu este disponibil momentan.","skip-video":"Omitere videoclip"}}
});

;require.register("data/locales/ru.yaml", function(exports, require, module) {
module.exports = {"audio-popup":{"allow":"Включить звук для этого урока","cancel":"Отменить","description":"Чтобы прослушивать комментарии, включите звук для этого урока.","title":"Этот урок содержит устные комментарии"},"buttons":{"close-lesson":"Закрыть урок","continue":"Продолжить","done":"Ок, я закончил","open-ed":"Открыть Ed","send":"Отправить"},"dial-distribution":{"touch-to-rotate":"Нажми&nbsp;чтобы&nbsp;прокрутить"},"dial":{"touch-to-rotate":"Нажми&nbsp;чтобы&nbsp;прокрутить"},"dialogs":{"disconnection":{"needs-background":"Чтобы завершить этот урок, Ed необходимо продолжить работать в&nbsp;фоновом режиме.","please-open-ed":"Чтобы продолжить, пожалуйста, откройте Ed и перезапустите урок. Так ваш прогресс будет отображен верно."}},"game-jeopardy":{"is-false":"невернo","is-true":"вернo"},"game-jumble":{"drag-letters":"Перетащи буквы в слово выше"},"game":{"bonus-time":"+%{bonus_time} секунд","go":"Поехали","labels":{"score":"Балл","timer":"Таймер"},"move-on":"Дальше","of":"из","play-again":"Играть снова","play-game":"Ок, я готов!","your-best":"Лучший результат","your-score":"Ваш балл","your-stars":"Ваши звезды"},"image":{"tap-to-continue":"Коснись, чтобы продолжить"},"lesson-info":{"lesson-label":"Урок"},"menu":{"brainboost-page-count":"Вы на вопросе **%{index}** из **%{total}**","cancel":"Отменить","exit":"Покинуть урок","exit-quiz":"Выйти из опроса","go-back":"Вернуться на последний слайд","page-count":"Вы на **%{index}** слайде из **%{total}**","restart":"Перезапустить урок","resume":"Продолжить"},"peer-authoring":{"image-title":"Название изображения","submit":"Отправить","title-placeholder":"Введите название здесь","upload-complete":"Загрузка завершена","uploading":"Выполняется загрузка...","video-title":"Название видео"},"pie-chart":{"touch-to-begin":"Нажми, чтобы начать"},"slide-answer":{"times-up":"Время вышло!","too-slow":"Очень медленно!"},"slider":{"touch-to-slide":"Нажми, чтобы продолжить"},"social":{"be-first":"Выскажите свое мнение первым.","delete":"Удалить","have-your-say":"Сказать свое слово","report":"Сообщить","reported":"Сообщено","thats-all":"На этом пока все."},"stars":{"all-earned":"%{smart_count} звезда заработана |||| %{smart_count} звезд(-ы) заработано","available":"%{smart_count} звезда доступна |||| %{smart_count} звезды доступны |||| %{smart_count} звезд доступны","earned":"Вы заработали %{earned} из %{smart_count} звезды |||| Вы заработали %{earned} из %{smart_count} звезд"},"text-sequence":{"of":"из"},"video":{"not-available":"К сожалению, данное видео сейчас недоступно.","skip-video":"Пропустить видео"}}
});

;require.register("data/locales/sv.yaml", function(exports, require, module) {
module.exports = {"audio-popup":{"allow":"Tillåt ljud för den här lektionen","cancel":"Avbryt","description":"För att lyssna till berättaren, tillåt ljud för den här lektionen.","title":"Lektionen berättas"},"buttons":{"close-lesson":"Stäng lektionen","continue":"Fortsätt","done":"Okej, jag är klar","open-ed":"Öppna Ed","send":"Skicka"},"dial-distribution":{"touch-to-rotate":"Tryck för att vrida"},"dial":{"touch-to-rotate":"Tryck för att vrida"},"dialogs":{"disconnection":{"needs-background":"För att kunna avsluta den här lektionen måste Ed köras i bakgrunden.","please-open-ed":"För att fortsätta ska du öppna Ed och starta om lektionen så att dina framsteg kan spåras ordentligt."}},"game-jeopardy":{"is-false":"Falskt","is-true":"Sant"},"game-jumble":{"drag-letters":"Dra bokstäverna till ordet ovan"},"game":{"bonus-time":"+%{bonus_time} sekunder","go":"GÅ","labels":{"score":"Poäng","timer":"Timer"},"move-on":"Gå vidare","of":"av","play-again":"Spela igen","play-game":"Okej, jag är redo!","your-best":"Din bästa","your-score":"Din poäng","your-stars":"Dina stjärnor"},"image":{"tap-to-continue":"Tryck för att fortsätta"},"lesson-info":{"lesson-label":"Lektion"},"menu":{"brainboost-page-count":"Du har en fråga. **%{index}** på **%{total}**","cancel":"Avbryt","exit":"Avsluta lektionen","exit-quiz":"Frågesport för att avsluta","go-back":"Granska sista bilden","page-count":"Du är på bild **%{index}** av **%{total}**","restart":"Starta om lektionen","resume":"Återuppta"},"peer-authoring":{"image-title":"Bildtitel","submit":"Skicka","title-placeholder":"Ange titeln här","upload-complete":"Uppladdning klar","uploading":"Laddar upp…","video-title":"Videotitel"},"pie-chart":{"touch-to-begin":"Tryck för att börja"},"slide-answer":{"times-up":"Tiden är ute!","too-slow":"För långsamt!"},"slider":{"touch-to-slide":"Tryck för att glida"},"social":{"be-first":"Bli den första som säger vad du tycker.","delete":"Radera","have-your-say":"Säg vad du tycker","report":"Rapportera","reported":"Rapporterad","thats-all":"Det var allt just nu."},"stars":{"all-earned":"1 stjärna intjänad |||| %{smart_count} stjärnor intjänade","available":"1 stjärna tillgänglig |||| %{smart_count} stjärnor tillgängliga","earned":"Du har tjänat in %{earned} av %{smart_count} stjärna |||| Du har tjänat in %{earned} av %{smart_count} stjärnor"},"text-sequence":{"of":"av"},"video":{"not-available":"Den här videon är </br>  tyvärr inte tillgänglig just nu.","skip-video":"Hoppa över videon"}}
});

;require.register("data/locales/ta.yaml", function(exports, require, module) {
module.exports = {"audio-popup":{"allow":"இந்தப் பாடத்திற்கு ஆடியோவை அனுமதிக்கவும்","cancel":"ரத்து செய்","description":"விளக்கத்தைக் கேட்க, தயவுசெய்து இந்தப் பாடத்திற்கான ஆடியோவை அனுமதிக்கவும்.","title":"இந்தப் பாடம் சொல்லப்படுகிறது"},"buttons":{"close-lesson":"பாடத்தை மூடவும்","continue":"தொடரவும்","done":"தொடரவும்","open-ed":"Ed-ஐத் திறக்கவும்","send":"அனுப்பு"},"dial-distribution":{"touch-to-rotate":"தொடவும்&nbsp;to&nbsp;சுழற்றவும்"},"dial":{"touch-to-rotate":"தொடவும்&nbsp;to&nbsp;சுழற்றவும்"},"dialogs":{"disconnection":{"needs-background":"இந்தப் பாடத்தை முடிக்க, Ed&nbsp;பின்னணியில் இயங்க வேண்டும்.","please-open-ed":"தொடர, Ed-ஐத் திறந்து பாடத்தை மீண்டும் தொடங்கவும் எனவே உங்கள் முன்னேற்றத்தை&nbsp;சரியாகக் கண்காணிக்க முடியும்."}},"game-jeopardy":{"is-false":"தவறு","is-true":"சரி"},"game-jumble":{"drag-letters":"மேலே உள்ள வார்த்தைக்கு எழுத்துக்களை இழுக்கவும்"},"game":{"bonus-time":"+%{bonus_time} விநாடிகள்","go":"போகவும்","labels":{"score":"மதிப்பெண்","timer":"டைமர்"},"move-on":"நகர்த்தவும்","of":"இன்","play-again":"மீண்டும் பிளே செய்யவும்","play-game":"சரி, நான் தயார்!","your-best":"உங்கள் சிறந்த மதிப்பெண்","your-score":"உங்கள் மதிப்பெண்","your-stars":"உங்கள் ஸ்டார்கள்"},"image":{"tap-to-continue":"தொடர தட்டவும்"},"lesson-info":{"lesson-label":"பாடம்"},"menu":{"brainboost-page-count":"நீங்கள் **%{total}**-ல் கேள்வி **%{index}**-ல் இருக்கிறீர்கள்","cancel":"ரத்து செய்","exit":"பாடத்திலிருந்து வெளியேறு","exit-quiz":"வினாடி வினாவிலிருந்து வெளியேறவும்","go-back":"கடைசி ஸ்லைடை மதிப்பாய்வு செய்யவும்","page-count":"நீங்கள் **%{total}**-ல் ஸ்லைடு **%{index}**-ல் இருக்கிறீர்கள்","restart":"பாடத்தை மீண்டும் தொடங்கவும்","resume":"மீண்டும் தொடங்கவும்"},"peer-authoring":{"image-title":"படத்தின் தலைப்பு","submit":"சமர்ப்பிக்கவும்","title-placeholder":"தலைப்பை இங்கே உள்ளிடவும்","upload-complete":"பதிவேற்றம் முடிந்தது","uploading":"பதிவேற்றுகிறது...","video-title":"வீடியோ தலைப்பு"},"pie-chart":{"touch-to-begin":"தொடங்க தொடவும்"},"slide-answer":{"times-up":"நேரம் முடிந்து விட்டது!","too-slow":"மிக மெதுவாக!"},"slider":{"touch-to-slide":"ஸ்லைடு செய்யத் தொடவும்"},"social":{"be-first":"உங்கள் கருத்தை முதலில் கூறுங்கள்.","delete":"நீக்கவும்","have-your-say":"உங்கள் கருத்தைச் சொல்லுங்கள்","report":"தெரிவிக்கவும்","reported":"தெரிவிக்கப்பட்டது","thats-all":"இப்பொழுது இத்துடன் நிறைவடைகிறது."},"stars":{"all-earned":"1 ஸ்டார் பெறப்பட்டது |||| %{smart_count} ஸ்டார்கள் பெறப்பட்டன","available":"1 ஸ்டார் உள்ளது |||| %{smart_count} ஸ்டார்கள் உள்ளன","earned":"%{smart_count} ஸ்டாரில் நீங்கள் %{earned}சம்பாத்தித்தீர்கள் |||| %{smart_count} ஸ்டார்களில் நீங்கள் %{earned} சம்பாத்தித்தீர்கள்"},"text-sequence":{"of":"இன்"},"video":{"not-available":"மன்னிக்கவும், இந்த வீடியோ தற்போது </br> கிடைக்கவில்லை.","skip-video":"வீடியோவைத் தவிர்க்கவும்"}}
});

;require.register("data/locales/th.yaml", function(exports, require, module) {
module.exports = {"audio-popup":{"allow":"อนุญาตให้ใช้เสียงสำหรับบทเรียนนี้","cancel":"ยกเลิก","description":"หากต้องการฟังคำบรรยาย โปรดอนุญาตให้ใช้เสียงสำหรับบทเรียนนี้","title":"บทเรียนนี้มีเสียงบรรยาย"},"buttons":{"close-lesson":"ปิดบทเรียน","continue":"ดำเนินการต่อ","done":"ตกลง ฉันทำเสร็จแล้ว","open-ed":"เปิด Ed","send":"ส่ง"},"dial-distribution":{"touch-to-rotate":"แตะ&nbsp;เพื่อ&nbsp;หมุน"},"dial":{"touch-to-rotate":"แตะ&nbsp;เพื่อ&nbsp;หมุน"},"dialogs":{"disconnection":{"needs-background":"เพื่อให้จบบทเรียนนี้ Ed ต้องทำงานใน&nbsp;เบื้องหลัง","please-open-ed":"หากต้องการดำเนินการต่อ โปรดเปิดใช้งาน Ed และเริ่มต้นบทเรียนใหม่เพื่อให้สามารถติดตามความคืบหน้าของคุณ&nbsp;ได้อย่างถูกต้อง"}},"game-jeopardy":{"is-false":"เท็จ","is-true":"จริง"},"game-jumble":{"drag-letters":"ลากตัวอักษรไปที่คำด้านบน"},"game":{"bonus-time":"+%{bonus_time} วินาที","go":"ไป","labels":{"score":"คะแนน","timer":"เครื่องจับเวลา"},"move-on":"ก้าวต่อไป","of":"ของ","play-again":"เล่นอีกครั้ง","play-game":"ตกลง ฉันพร้อมแล้ว!","your-best":"คะแนนดีที่สุดของคุณ","your-score":"คะแนนของคุณ","your-stars":"จำนวนดาวของคุณ"},"image":{"tap-to-continue":"แตะเพื่อดำเนินการต่อ"},"lesson-info":{"lesson-label":"บทเรียน"},"menu":{"brainboost-page-count":"คุณอยู่ในคำถาม **%{index}** จาก **%{total}**","cancel":"ยกเลิก","exit":"ออกจากบทเรียน","exit-quiz":"ออกจากแบบทดสอบ","go-back":"ตรวจทานสไลด์ล่าสุด","page-count":"คุณอยู่ในสไลด์ **%{index}** จาก **%{total}**","restart":"เริ่มต้นบทเรียนใหม่","resume":"เริ่มต้นใหม่"},"peer-authoring":{"image-title":"ชื่อภาพ","submit":"ส่ง","title-placeholder":"ป้อนชื่อที่นี่","upload-complete":"การอัปโหลดเสร็จสมบูรณ์","uploading":"กำลังอัปโหลด ..","video-title":"ชื่อวิดีโอ"},"pie-chart":{"touch-to-begin":"แตะเพื่อเริ่มต้น"},"slide-answer":{"times-up":"หมดเวลา!","too-slow":"ช้าเกินไป!"},"slider":{"touch-to-slide":"แตะเพื่อเลื่อน"},"social":{"be-first":"เป็นคนแรกที่พูดของคุณ","delete":"ลบ","have-your-say":"มีการพูดของคุณ","report":"รายงาน","reported":"รายงาน","thats-all":"นั่นคือทั้งหมดที่สำหรับตอนนี้."},"stars":{"all-earned":"ได้รับ1 ดาว |||| ได้รับ %{smart_count} ดาว","available":"สามารถรับได้ 1 ดาว |||| สามารถรับได้ %{smart_count} ดาว","earned":"คุณได้รับ %{earned} จาก %{smart_count} ดาว |||| คุณได้รับ %{earned} จาก %{smart_count} ดาว"},"text-sequence":{"of":"ของ"},"video":{"not-available":"ขออภัย ไม่สามารถดูวิดีโอนี้ <br> ได้ในขณะนี้","skip-video":"ข้ามวิดีโอ"}}
});

;require.register("data/locales/tr.yaml", function(exports, require, module) {
module.exports = {"audio-popup":{"allow":"Bu derste ses oynatılmasına izin ver","cancel":"İptal","description":"Anlatımı dinlemek için lütfen bu derste ses oynatılmasına izin verin.","title":"Bu ders, anlatımlıdır"},"buttons":{"close-lesson":"Dersi Kapat","continue":"Devam","done":"Tamam, 'bitirdim","open-ed":"Ed'i Aç","send":"Gönder"},"dial-distribution":{"touch-to-rotate":"Döndürmek&nbsp;için&nbsp;dokunun"},"dial":{"touch-to-rotate":"Döndürmek&nbsp;için&nbsp;dokunun"},"dialogs":{"disconnection":{"needs-background":"Bu dersi tamamlamak için Ed'in arka planda&nbsp;çalışması gerekir.","please-open-ed":"İlerlemenin doğru olarak&nbsp;takip edilebilmesi için lütfen Ed'i açın ve dersi yeniden başlatın."}},"game-jeopardy":{"is-false":"Yanlış","is-true":"Doğru"},"game-jumble":{"drag-letters":"Harfleri yukarıdaki sözcüğe sürükleyin"},"game":{"bonus-time":"+%{bonus_time} saniye","go":"Başla","labels":{"score":"Puan","timer":"Zaman Sayacı"},"move-on":"Devam Et","of":"/","play-again":"Tekrar Oynat","play-game":"Tamam, 'hazırım!","your-best":"En iyi puanınız","your-score":"Puanınız","your-stars":"Yıldızlarınız"},"image":{"tap-to-continue":"Devam etmek için dokunun"},"lesson-info":{"lesson-label":"Ders"},"menu":{"brainboost-page-count":"**%{total}** sorunun **%{index}**. sorusundasın","cancel":"İptal","exit":"Dersten çık","exit-quiz":"Testten çık","go-back":"Son slaytı incele","page-count":"Bulunduğunuz slayt: **%{index}** / **%{total}**","restart":"Dersi yeniden başlat","resume":"Devam et"},"peer-authoring":{"image-title":"Resim Başlığı","submit":"Gönder","title-placeholder":"Başlığı buraya girin","upload-complete":"Yükleme Tamamlandı","uploading":"Yükleniyor…","video-title":"Video Başlığı"},"pie-chart":{"touch-to-begin":"Başlamak için dokunun"},"slide-answer":{"times-up":"Süre bitti!","too-slow":"Çok Yavaş!"},"slider":{"touch-to-slide":"Kaydırmak için dokunun"},"social":{"be-first":"İlk sizin sesiniz duyulsun.","delete":"Sil","have-your-say":"Sesinizi duyurun","report":"Bildir","reported":"Bildirildi","thats-all":"Şimdilik hepsi bu kadar."},"stars":{"all-earned":"1 yıldız kazanıldı |||| %{smart_count} yıldız kazanıldı","available":"1 yıldız var |||| %{smart_count} yıldız var","earned":"Kazandığınız yıldız: %{earned} / %{smart_count} |||| Kazandığınız yıldız: %{earned} / %{smart_count}"},"text-sequence":{"of":"arasında"},"video":{"not-available":"Üzgünüz, bu video </br> şu an mevcut değil.","skip-video":"Videoyu Atla"}}
});

;require.register("data/locales/uk.yaml", function(exports, require, module) {
module.exports = {"audio-popup":{"allow":"Включити аудіо для цього уроку","cancel":"Скасувати","description":"Щоби прослухати коментарі, включи аудіо для цього уроку.","title":"Цей урок має аудіокоментарі"},"buttons":{"close-lesson":"Закрити урок","continue":"Продовжити","done":"Ok, я вже","open-ed":"Відкрити Ed","send":"Надіслати"},"dial-distribution":{"touch-to-rotate":"Торкнися,&nbsp;щоб&nbsp;обертати"},"dial":{"touch-to-rotate":"Торкнися,&nbsp;щоб&nbsp;обертати"},"dialogs":{"disconnection":{"needs-background":"Для завершення цього уроку Ed повинна працювати у фоновому&nbsp;режимі.","please-open-ed":"Для продовження відкрий Ed та перезапусти урок, щоб не втратити&nbsp;свій прогрес."}},"game-jeopardy":{"is-false":"Неправильно","is-true":"Правильно"},"game-jumble":{"drag-letters":"Перетягни літери в слово вгорі"},"game":{"bonus-time":"Додаткова кількість секунд: +%{bonus_time}","go":"ПОЧИНАЙМО","labels":{"score":"Оцінка","timer":"Таймер"},"move-on":"Просувайся","of":"з","play-again":"Грай знову","play-game":"OK, готово!","your-best":"Твій найкращий результат","your-score":"Твоя оцінка","your-stars":"Твої зірки"},"image":{"tap-to-continue":"Торкнися, щоб продовжити"},"lesson-info":{"lesson-label":"Урок"},"menu":{"brainboost-page-count":"Ви на питанні **%{index}** з **%{total}**","cancel":"Скасувати","exit":"Вийти з уроку","exit-quiz":"Вийти з тесту","go-back":"Переглянути останній слайд","page-count":"Ти на слайді **%{index}** з **%{total}**","restart":"Перезапустити урок","resume":"Продовжити"},"peer-authoring":{"image-title":"Назва зображення","submit":"Надіслати","title-placeholder":"Введи назву тут","upload-complete":"Передавання завершено","uploading":"Передавання…","video-title":"Назва відео"},"pie-chart":{"touch-to-begin":"Торкнися, щоб розпочати"},"slide-answer":{"times-up":"Час вийшов!","too-slow":"Занадто повільно!"},"slider":{"touch-to-slide":"Торкнися, щоб перейти"},"social":{"be-first":"Висунь свою пропозицію найраніше.","delete":"Видалити","have-your-say":"Твоя пропозиція","report":"Звіт","reported":"Прозвітовано","thats-all":"Наразі це все."},"stars":{"all-earned":"Зароблена 1 зірка |||| Зароблено зірок: %{smart_count}","available":"Доступна 1 зірка |||| Доступно зірок: %{smart_count}","earned":"Ти заробив(-ла) зірки: %{earned} з %{smart_count} |||| Ти заробив(-ла) зірки: %{earned} з %{smart_count}"},"text-sequence":{"of":"з"},"video":{"not-available":"Вибач, це відео </br> наразі недоступне.","skip-video":"Пропустити відео"}}
});

;require.register("data/locales/vi.yaml", function(exports, require, module) {
module.exports = {"audio-popup":{"allow":"Bật âm thanh cho bài học này","cancel":"Hủy","description":"Để nghe tường thuật, xin vui lòng bật âm thanh cho bài học này.","title":"Bài học này được thuật lại"},"buttons":{"close-lesson":"Đóng Bài học","continue":"Tiếp tục","done":"Tiếp tục","open-ed":"Mở Ed","send":"Gửi"},"dial-distribution":{"touch-to-rotate":"Chạm&nbsp;để&nbsp;xoay"},"dial":{"touch-to-rotate":"Chạm&nbsp;để&nbsp;xoay"},"dialogs":{"disconnection":{"needs-background":"Để hoàn thành bài học này, Ed cần chạy trong&nbsp;nền.","please-open-ed":"Để tiếp tục, xin vui lòng mở Ed và bắt đầu lại bài học để có thể theo dõi tiến độ của bạn&nbsp;chính xác."}},"game-jeopardy":{"is-false":"Sai","is-true":"Đúng"},"game-jumble":{"drag-letters":"Kéo các chữ cái vào từ phía trên"},"game":{"bonus-time":"+%{bonus_time} giây","go":"TIẾN HÀNH","labels":{"score":"Điểm","timer":"Đồng hồ đếm giờ"},"move-on":"Tiến lên","of":"của","play-again":"Phát Lại","play-game":"OK, tôi đã sẵn sàng!","your-best":"Điểm cao nhất của bạn","your-score":"Điểm của bạn","your-stars":"Sao của bạn"},"image":{"tap-to-continue":"Nhấn để tiếp tục"},"lesson-info":{"lesson-label":"Bài học"},"menu":{"brainboost-page-count":"Bạn đang ở câu hỏi **%{index}** trên **%{total}**","cancel":"Hủy","exit":"Thoát bài học","exit-quiz":"Thoát bài kiểm tra","go-back":"Xem lại trang trình bày cuối cùng","page-count":"Bạn đang ở trang trình bày **%{index}** trên **%{total}**","restart":"Bắt đầu lại bài học","resume":"Tiếp tục"},"peer-authoring":{"image-title":"Tiêu đề Hình ảnh","submit":"Gửi","title-placeholder":"Nhập tiêu đề ở đây","upload-complete":"Tải lên Hoàn tất","uploading":"Đang tải lên...","video-title":"Tiêu đề Video"},"pie-chart":{"touch-to-begin":"Chạm để bắt đầu"},"slide-answer":{"times-up":"Hết Giờ!","too-slow":"Quá Chậm!"},"slider":{"touch-to-slide":"Chạm để trượt"},"social":{"be-first":"Hãy là người đầu tiên nêu lên ý kiến.","delete":"Xóa","have-your-say":"Nêu lên ý kiến","report":"Báo cáo","reported":"Đã báo cáo","thats-all":"Hiện tại chỉ có bấy nhiêu thôi."},"stars":{"all-earned":"Đã kiếm được 1 sao |||| Đã kiếm được %{smart_count} sao","available":"Có sẵn 1 sao |||| Có sẵn %{smart_count} sao","earned":"Bạn đã kiếm được %{earned} trên %{smart_count} sao |||| Bạn đã kiếm được %{earned} trên %{smart_count} sao"},"text-sequence":{"of":"của"},"video":{"not-available":"Rất tiếc, video này </br> hiện không khả dụng.","skip-video":"Bỏ qua Video"}}
});

;require.register("data/locales/zh-tw.yaml", function(exports, require, module) {
module.exports = {"audio-popup":{"allow":"允許播放本課程的音訊","cancel":"取消","description":"若要聽到講述,請允許播放本課程的音訊。","title":"此為講述課程"},"buttons":{"close-lesson":"關閉課程","continue":"繼續","done":"繼續","open-ed":"打開 Ed","send":"傳送"},"dial-distribution":{"touch-to-rotate":"輕觸&nbsp;&nbsp;旋轉"},"dial":{"touch-to-rotate":"輕觸&nbsp;&nbsp;旋轉"},"dialogs":{"disconnection":{"needs-background":"若要完成本課程,Ed 必須在&nbsp;背景中執行。","please-open-ed":"若要繼續,請打開 Ed 並重啟課程,我們才能正確追蹤&nbsp;您的進度。"}},"game-jeopardy":{"is-false":"錯","is-true":"對"},"game-jumble":{"drag-letters":"拖曳字母到上方的單字"},"game":{"bonus-time":"+%{bonus_time} 秒","go":"開始","labels":{"score":"得分","timer":"計時器"},"move-on":"繼續前進","of":"/","play-again":"重玩","play-game":"我準備好了！","your-best":"您的最佳得分","your-score":"您的得分","your-stars":"您的星星"},"image":{"tap-to-continue":"輕點繼續"},"lesson-info":{"lesson-label":"課程"},"menu":{"brainboost-page-count":"您正位於問題 **%{index}**,共 **%{total}**","cancel":"取消","exit":"退出課程","exit-quiz":"退出測驗","go-back":"回顧上一張投影片","page-count":"您正位於投影片 **%{index}**,共 **%{total}**","restart":"重啟課程","resume":"繼續"},"peer-authoring":{"image-title":"影像標題","submit":"提交","title-placeholder":"在此輸入標題","upload-complete":"上傳完成","uploading":"上傳中...","video-title":"影片標題"},"pie-chart":{"touch-to-begin":"輕觸開始"},"slide-answer":{"times-up":"時間到！","too-slow":"太慢了！"},"slider":{"touch-to-slide":"輕觸滑動"},"social":{"be-first":"率先發表意見。","delete":"刪除","have-your-say":"發表意見","report":"報告","reported":"已回報","thats-all":"目前就這些了。"},"stars":{"all-earned":"已獲取 1 顆星 |||| 已獲取 %{smart_count} 顆星","available":"有 1 顆星 |||| 有 %{smart_count} 顆星","earned":"您已獲取 %{smart_count} 顆星中的 %{earned} 顆 |||| 您已獲取 %{smart_count} 顆星中的 %{earned} 顆"},"text-sequence":{"of":"/"},"video":{"not-available":"很抱歉,目前這支影片</br>無法觀看。","skip-video":"跳過影片"}}
});

;require.register("data/locales/zh.yaml", function(exports, require, module) {
module.exports = {"audio-popup":{"allow":"允许播放此课程的音频","cancel":"取消","description":"要收听解说，请允许播放此课程的音频。","title":"此课程配有解说"},"buttons":{"close-lesson":"关闭课堂","continue":"继续","done":"好的，我已经完成","open-ed":"打开 Ed","send":"发送"},"dial-distribution":{"touch-to-rotate":"触摸以旋转"},"dial":{"touch-to-rotate":"触摸以旋转"},"dialogs":{"disconnection":{"needs-background":"要完成本课程，Ed 需要在后台运行。","please-open-ed":"要继续，请打开 Ed 并重新开始课堂，以便正确跟踪您的进度。"}},"game-jeopardy":{"is-false":"错误","is-true":"正确"},"game-jumble":{"drag-letters":"把字母拖到上方的单词中"},"game":{"bonus-time":"+%{bonus_time} 秒","go":"开始","labels":{"score":"成绩","timer":"计时器"},"move-on":"继续","of":"/","play-again":"重新游戏","play-game":"我准备好了！","your-best":"您的最佳成绩","your-score":"您的成绩","your-stars":"您的星星"},"image":{"tap-to-continue":"点按以继续"},"lesson-info":{"lesson-label":"课堂"},"menu":{"brainboost-page-count":"您在回答第 **%{index}** 个问题,共 **%{total}** 个问题","cancel":"取消","exit":"退出课堂","exit-quiz":"退出小测验","go-back":"查看最后一张幻灯片","page-count":"您当前位于第 **%{index}** 张幻灯片，共 **%{total}** 张","restart":"重新开始课堂","resume":"恢复"},"peer-authoring":{"image-title":"图像标题","submit":"提交","title-placeholder":"在此处输入标题","upload-complete":"上传完成","uploading":"正在上传……","video-title":"视频标题"},"pie-chart":{"touch-to-begin":"触摸以开始"},"slide-answer":{"times-up":"时间到了！","too-slow":"太慢了！"},"slider":{"touch-to-slide":"触摸以滑动"},"social":{"be-first":"抢先第一个发表评论。","delete":"删除","have-your-say":"发表您的评论","report":"报告","reported":"已报告","thats-all":"仅此而已。"},"stars":{"all-earned":"赢得了 1 颗星 |||| 赢得了 %{smart_count} 颗星","available":"1 颗星可用 |||| %{smart_count} 颗星可用","earned":"您已经赢得了 %{smart_count} 颗星中的 %{earned} 颗 |||| 您已经赢得了 %{smart_count} 颗星中的 %{earned} 颗"},"text-sequence":{"of":"/"},"video":{"not-available":"抱歉，本视频目前无法观看。","skip-video":"跳过视频"}}
});

;require.register("engine/aicc/model.yaml", function(exports, require, module) {
module.exports = {"title":"aicc","display":"AICC","category":"Advanced","description":"Play an AICC Package","hideFrom":["freemium","sponsor"],"features":{"stars":true},"model":{"package":{"type":"aicc","default":"about:blank","display":"AICC File","help":"Upload your AICC package."},"shouldOpenInPopup":{"default":false,"type":"boolean","display":"Open in a new window","help":"Some AICC content performs better in a separate window. If your AICC package is performing poorly, this option may help.\n"},"isRequiredForLessonCompletion":{"default":true,"type":"boolean","display":"Required Content","help":"The learner must complete the AICC content before the lesson is marked as complete.\n"},"background":{"type":"string","default":"","display":"Background Color","help":"This color (eg. \"orange\", \"#f90\", \"rgb(255,160,0)\") will be used for the background of the entire screen in lightbox mode.\n"},"button":{"text":{"type":"text","default":"Continue","display":"Done text"},"position":{"type":"select","enum":["Below","Overlay Bottom","Overlay Top","None"],"default":"Below","help":"Choose the best position based on your content. If you choose not to display the button, your AICC content must allow the learner to exit, or they will not be able to continue.\n"}}}}
});

;require.register("engine/aicc/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (button, i18n) {
buf.push("<div class=\"full-screen content-fill hide-overflow\"><iframe type=\"text/html\" frameborder=\"0\" class=\"scorm-object\"></iframe><div class=\"exit-btn btn\">" + (jade.escape(null == (jade_interp = button.text || i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");}.call(this,"button" in locals_for_with?locals_for_with.button:typeof button!=="undefined"?button:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/aicc/view.coffee", function(exports, require, module) {
var AICCView, Device, Lesson, Session, SlideView, lessonPassed, lookupCaseInsensitive, ref,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SlideView = require("views/slide");

ref = Application.actions(), Session = ref.Session, Lesson = ref.Lesson;

Device = require("lib/device");

lookupCaseInsensitive = function(ob, key) {
  var k, v;
  for (k in ob) {
    v = ob[k];
    if (k.toLowerCase() === key.toLowerCase()) {
      return ob[k];
    }
  }
  return null;
};

lessonPassed = function(attemptData) {
  return lookupCaseInsensitive(attemptData.core, "Lesson_Status");
};

AICCView = (function(superClass) {
  extend(AICCView, superClass);

  function AICCView() {
    return AICCView.__super__.constructor.apply(this, arguments);
  }

  AICCView.prototype.template = require("./template");

  AICCView.prototype.events = function() {
    return {
      "iostap .exit-btn": "stopAICC"
    };
  };

  AICCView.prototype.initialize = function() {
    return AICCView.__super__.initialize.apply(this, arguments);
  };

  AICCView.prototype.beforeShow = function() {
    var position, ref1, ref2;
    position = ((ref1 = this.options.data.button) != null ? (ref2 = ref1.position) != null ? ref2.toLowerCase() : void 0 : void 0) || "none";
    this.setState(written.hyphenCase(position), "exit-btn");
    this.trigger("ui", {
      lightbox: this.options.data.background || true,
      fullscreen: true
    });
    return this.onResize();
  };

  AICCView.prototype.beforeHide = function() {
    return this.trigger("ui", {
      lightbox: false,
      fullscreen: false
    });
  };

  AICCView.prototype.show = function() {
    this.listenTo(this, "resize", this.onResize);
    return this.initAICC(function(err) {
      if (err != null) {
        return console.error("Error while initializing AICC", err);
      }
    });
  };

  AICCView.prototype.onRefresh = function() {
    this.beforeShow();
    return AICCView.__super__.onRefresh.apply(this, arguments);
  };

  AICCView.prototype.onResize = function() {
    var button, iframe;
    if (this.currentState["exit-btn"] === "below") {
      button = this.findOne(".exit-btn");
      iframe = this.findOne(".scorm-object");
      iframe.style.bottom = button.offsetHeight + "px";
      return iframe.style.height = (iframe.parentNode.offsetHeight - button.offsetHeight) + "px";
    }
  };

  AICCView.prototype.getAttempt = function(done) {
    return this.getAICCPackageURLAndSID(function(err, arg) {
      var aiccSID, aiccURL;
      aiccURL = arg.aiccURL, aiccSID = arg.aiccSID;
      return $.ajax({
        url: aiccURL + "/result",
        type: "POST",
        data: {
          session_id: aiccSID
        },
        success: function(d) {
          return done(null, d);
        },
        error: function(e) {
          return done(e);
        }
      });
    });
  };

  AICCView.prototype.stopAICC = function() {
    return this.getAttempt((function(_this) {
      return function(err, attempt) {
        var attemptCompletion, attemptScore, completed, coreAttempt, score;
        coreAttempt = lookupCaseInsensitive(attempt, "core") || {};
        attemptCompletion = lookupCaseInsensitive(coreAttempt, "Lesson_Status") || "";
        attemptScore = lookupCaseInsensitive(coreAttempt, "Score") || "0";
        score = parseInt(attemptScore) * 0.01;
        completed = attemptCompletion.toLowerCase().match(/^[pc]/) != null;
        return Session.get(function(err, arg) {
          var attempt, interaction, ref1;
          attempt = arg.attempt;
          interaction = {
            id: _this.options.id,
            name: _this.options.name,
            type: _this.options.type,
            slideData: _this.options.data,
            attempt: attempt,
            answerDetails: [],
            metadata: _this.options.metadata,
            isAiccAttempt: true,
            isCompleted: completed,
            isRequiredForLessonCompletion: _this.options.data.isRequiredForLessonCompletion,
            score: score,
            configuration: (ref1 = _this.options.data) != null ? ref1.challenge_configuration : void 0,
            success: completed
          };
          _this.lesson.processInteraction(interaction);
          if (window.ED_LMS_PREVIEW || window.ED_PUBLIC_PREVIEW) {

          } else if (_this.isLastSlide) {
            Lesson.complete();
            return _this.exit();
          } else {
            return _this.next();
          }
        });
      };
    })(this));
  };

  AICCView.prototype.getAICCPackageURLAndSID = function(done) {
    var slideId;
    slideId = this.options.id;
    return Session.get(function(err, arg) {
      var aiccSID, aiccURL, attempt, id, lessonId, userId;
      id = arg.id, userId = arg.userId, attempt = arg.attempt, aiccURL = arg.aiccURL;
      if (err != null) {
        return done(err);
      }
      lessonId = id;
      aiccSID = lessonId ? lessonId + "|" + slideId + "|" + userId + "|" + attempt : "lessonId|slideId||userId|attempt";
      aiccURL = window.location.origin + "/api/aicc";
      return done(null, {
        aiccURL: aiccURL,
        aiccSID: aiccSID
      });
    });
  };

  AICCView.prototype.serialize = function() {
    return AICCView.__super__.serialize.apply(this, arguments);
  };

  AICCView.prototype.initAICCResource = function(done) {
    var data, resource;
    data = this.serialize();
    resource = data["package"];
    return this.getAICCPackageURLAndSID((function(_this) {
      return function(err, arg) {
        var aiccSID, aiccURL, aiccWindow, params, pollTimer;
        aiccURL = arg.aiccURL, aiccSID = arg.aiccSID;
        if (err != null) {
          return done(err);
        }
        params = "aicc_url=" + aiccURL + "&aicc_sid=" + aiccSID;
        resource += resource.match(/\?/) ? resource.match(/\&$/) ? "" + params : "&" + params : "?" + params;
        if (!(window.ED_LMS_PREVIEW || window.ED_PUBLIC_PREVIEW) && data.shouldOpenInPopup) {
          aiccWindow = window.open(resource);
          pollTimer = window.setInterval(function() {
            if (aiccWindow.closed !== false) {
              window.clearInterval(pollTimer);
              return _this.stopAICC();
            }
          }, 200);
        } else {
          _this.findOne(".scorm-object").src = resource;
        }
        return done();
      };
    })(this));
  };

  AICCView.prototype.initAICC = function(done) {
    return this.initAICCResource(done);
  };

  return AICCView;

})(SlideView);

module.exports = AICCView;
});

;require.register("engine/carousel/model.yaml", function(exports, require, module) {
module.exports = {"title":"carousel","display":"Carousel","category":"Multiple Choice","features":{"stars":true,"social":true},"model":{"title":{"type":"html","default":"Ask a question"},"answers":{"min":2,"max":8,"type":[{"content":{"type":"html"},"correct":{"type":"boolean"}}]},"randomize":{"type":"boolean","default":false,"help":"Shuffle the order of carousel items from left to right\n"},"answer":{"text":{"type":"html","default":"","display":"Answer Text"},"correct":{"type":"html","default":"That's correct!","display":"Correct Reinforcement"},"incorrect":{"type":"html","default":"Not quite...","display":"Incorrect Reinforcement"},"takeaway":{"type":"html","default":"","display":"Core Message"}},"game":{"timer":{"limit":{"type":"number","default":-1,"display":"Time Limit (seconds)"},"out-of-time-prompt":{"type":"html","display":"Out of time prompt"}}},"prompt":{"type":"html","default":"Swipe to select an answer"},"doneText":{"type":"html","default":"Continue","display":"Done text"}},"examples":[{"subtype":"true-or-false","title":"What's the correct answer?","answers":[{"content":"Answer 1"},{"correct":true,"content":"Answer 2.<br> This is the correct answer and it contains more text.\n"},{"content":"Answer 3"}]}]}
});

;require.register("engine/carousel/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (answers, continueBtnText, doneText, game, hasNarration, hasPrompt, i18n, prompt, submitUp, title, undefined) {
if ( game && game.timer && game.timer.limit > 0 && !game.timer.isDisabled)
{
buf.push("<div class=\"full-screen\"><div class=\"game-stepper text-lg text-bold\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div></div>");
}
buf.push("<div class=\"content-fill\"><div class=\"content-md-fill content-sm-ver content-fit\"><div class=\"content-md-ver text-center block-v-lg\"><h1 class=\"block-h-xl fade-in\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"row carousel-container block-h-xl block-v-lg\"><div class=\"col-md-8 col-md-offset-2 col-sm-12\"><div class=\"carousel slide-up delay-6\"><div" + (jade.attr("style", "width: " + (answers.length * 100) + "%;", true, false)) + " class=\"carousel-slider block-flex-ver clearfix\">");
// iterate answers
;(function(){
  var $$obj = answers;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var answer = $$obj[$index];

buf.push("<div" + (jade.attr("data-is-correct", answer.correct, true, false)) + (jade.attr("data-answer-id", answer.id, true, false)) + (jade.attr("style", "width: " + (100 / answers.length) + "%;", true, false)) + (jade.cls(['carousel-item','block-md',answer.correct ? "carousel-item-correct" : ""], [null,null,true])) + "><div class=\"carousel-block block-md block-dk draggy draggy-ver delay-3\"><div" + (jade.cls(['carousel-btn','btn','btn-solid','btn-block',answer.content.length > 20 ? "btn-long" : ""], [null,null,null,null,true])) + "><div class=\"text-center\">" + (null == (jade_interp = answer.content) ? "" : jade_interp) + "</div></div></div></div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var answer = $$obj[$index];

buf.push("<div" + (jade.attr("data-is-correct", answer.correct, true, false)) + (jade.attr("data-answer-id", answer.id, true, false)) + (jade.attr("style", "width: " + (100 / answers.length) + "%;", true, false)) + (jade.cls(['carousel-item','block-md',answer.correct ? "carousel-item-correct" : ""], [null,null,true])) + "><div class=\"carousel-block block-md block-dk draggy draggy-ver delay-3\"><div" + (jade.cls(['carousel-btn','btn','btn-solid','btn-block',answer.content.length > 20 ? "btn-long" : ""], [null,null,null,null,true])) + "><div class=\"text-center\">" + (null == (jade_interp = answer.content) ? "" : jade_interp) + "</div></div></div></div>");
    }

  }
}).call(this);

buf.push("</div></div></div></div></div></div></div><div class=\"pagination\">");
// iterate answers
;(function(){
  var $$obj = answers;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var answer = $$obj[i];

buf.push("<div class=\"page\"></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var answer = $$obj[i];

buf.push("<div class=\"page\"></div>");
    }

  }
}).call(this);

buf.push("</div><div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"answers" in locals_for_with?locals_for_with.answers:typeof answers!=="undefined"?answers:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"game" in locals_for_with?locals_for_with.game:typeof game!=="undefined"?game:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/carousel/view.coffee", function(exports, require, module) {
var AutoCursorRemoveDraggy, CarouselView, GameView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

GameView = require("views/base/game");

AutoCursorRemoveDraggy = require("views/components/draggy").AutoCursorRemoveDraggy;

CarouselView = (function(superClass) {
  extend(CarouselView, superClass);

  function CarouselView() {
    return CarouselView.__super__.constructor.apply(this, arguments);
  }

  CarouselView.prototype.template = require("./template");

  CarouselView.prototype.currentIndex = 0;

  CarouselView.prototype.events = {
    "iostap .btn-done": "endGame"
  };

  CarouselView.prototype.serialize = function() {
    var answers, data, randomize, ref, ref1;
    data = CarouselView.__super__.serialize.apply(this, arguments);
    randomize = data.randomize;
    answers = (((ref = data.metadata.questions) != null ? (ref1 = ref[0]) != null ? ref1.answers : void 0 : void 0) || []).map(function(a) {
      return {
        content: a.content,
        correct: a.correct,
        id: a.id
      };
    });
    answers = answers.filter(function(m) {
      return m.content != null;
    });
    if (this.options.config().direction === "rtl") {
      answers = answers.reverse();
    }
    if (randomize) {
      answers = _.shuffle(answers);
    }
    data.answers = answers;
    return data;
  };

  CarouselView.prototype.show = function(index) {
    var el, ln, min, x;
    if (index == null) {
      index = 0;
    }
    CarouselView.__super__.show.apply(this, arguments);
    el = this.findOne(".carousel");
    this.setEl(this.findOne(".pagination"), "pagination");
    this.setEl(el.firstChild, "scroller");
    ln = this.serialize().answers.length;
    min = -el.offsetWidth * (ln - 1);
    this.draggy = new AutoCursorRemoveDraggy({
      el: el,
      minX: min,
      maxX: 0,
      lock: "y"
    });
    this.listenTo(this.draggy, "drag", this.onDrag);
    this.listenTo(this.draggy, "drop", this.onDrop);
    this.listenTo(this, "resize", this.onResize);
    if (this.options.config().direction === "rtl") {
      x = -this.draggy.el.offsetWidth * (ln - 1 - index);
    } else {
      x = -this.draggy.el.offsetWidth * index;
    }
    this.draggy.reset({
      x: x
    });
    this.onResize();
    return this.enterGame();
  };

  CarouselView.prototype.onDrag = function(draggy, isInitial) {
    this.transform(this.getEl("scroller"), {
      x: this.getScrollDist(draggy),
      transition: isInitial ? "all 300ms" : ""
    });
    return this.updateChildren(draggy, isInitial && "none");
  };

  CarouselView.prototype.onDrop = function(draggy, isReset) {
    var child, func, i, j, len, m, ref, step, transition, x;
    if (isReset) {
      transition = this.currentIndex != null ? "all 300ms" : "";
      this.currentIndex = Math.floor(-draggy.x / draggy.offset.width);
      this.setState(this.currentIndex, "page");
      ref = this.getEl("pagination").children;
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        child = ref[i];
        child.classList.toggle("active", i === this.currentIndex);
      }
      this.transform(this.getEl("scroller"), {
        x: this.getScrollDist(draggy),
        transition: transition
      });
      return this.updateChildren(draggy, transition);
    } else {
      x = draggy.velocity.x;
      m = 0.9;
      func = x < -m ? "ceil" : x > m ? "floor" : "round";
      step = Math[func](Math.min(draggy.x / draggy.offset.width, 1));
      draggy.reset({
        x: step * draggy.offset.width
      });
      if (this.currentState.state === "prompt") {
        return this.setState("touched");
      }
    }
  };

  CarouselView.prototype.updateChildren = function(draggy, transition) {
    var button, child, i, j, len, ref, width;
    width = draggy.offset.width;
    ref = this.getEl("scroller").children;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      child = ref[i];
      if (!(button = child.querySelector(".btn"))) {
        return;
      }
      if (transition) {
        child.classList.toggle("active", i === this.currentIndex);
        this.transition(button, transition, true);
      }
      this.transform(button, {
        scale: 1 - Math.abs(draggy.x + (i * width)) / width / 5,
        opacity: 1 - Math.abs(draggy.x + (i * width)) / width
      });
    }
  };

  CarouselView.prototype.getScrollDist = function(draggy) {
    return (draggy.x / draggy.offset.width / this.options.data.answers.length * 100) + "%";
  };

  CarouselView.prototype.answerDetails = function() {
    var answer, details, question, questions, ref, ref1, selectedAnswerId;
    questions = ((ref = this.options.metadata) != null ? ref.questions : void 0) || [];
    if (!(questions.length > 0)) {
      return [];
    }
    question = questions[0];
    selectedAnswerId = $((ref1 = this.getEl("scroller")) != null ? ref1.children[this.currentIndex || 0] : void 0).data("answer-id");
    answer = _.find(question.answers, function(a) {
      return a.id === selectedAnswerId;
    });
    details = {
      question: question.question,
      answer: answer
    };
    return [details];
  };

  CarouselView.prototype.isCorrect = function() {
    var ref;
    return ((ref = this.getEl("scroller")) != null ? ref.children[this.currentIndex || 0].dataset.isCorrect : void 0) != null;
  };

  CarouselView.prototype.onResize = function() {
    var height, ref, scroller;
    if (scroller = this.getEl("scroller")) {
      if ((ref = this.draggy) != null) {
        ref.options.minX = -this.draggy.el.offsetWidth * (this.options.data.answers.length - 1);
      }
      scroller.style.height = "";
      height = scroller.offsetHeight;
      scroller.style.height = height + "px";
      return height;
    }
  };

  CarouselView.prototype.refresh = function(params) {
    var changed, content, i, j, len, ref, ref1;
    ref = params.data.answers;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      content = ref[i].content;
      if (content && ((ref1 = this.options.data.answers[i]) != null ? ref1.content : void 0) !== content) {
        changed = i;
      }
    }
    CarouselView.__super__.refresh.apply(this, arguments);
    this.currentIndex = null;
    return this.show(changed);
  };

  CarouselView.prototype.endGame = function() {
    CarouselView.__super__.endGame.apply(this, arguments);
    return this.submit();
  };

  return CarouselView;

})(GameView);

module.exports = CarouselView;
});

;require.register("engine/categorise/model.yaml", function(exports, require, module) {
module.exports = {"title":"categorise","display":"Categorise","category":"Multiple Choice","links":{"academy":"https://academy.edapp.com/how-to-categorise/"},"features":{"stars":true,"social":true},"model":{"title":{"types":["text","image","video","audio"],"default":"Which category?"},"buttonText":{"type":"html","default":"","display":"Answer"},"categories":{"min":2,"max":2,"type":[{"text":{"type":"html"},"correct":{"type":"boolean"}}]},"answer":{"text":{"type":"html","default":"","display":"Answer Text"},"correct":{"type":"html","default":"That's correct!","display":"Correct Reinforcement"},"incorrect":{"type":"html","default":"Not quite...","display":"Incorrect Reinforcement"},"takeaway":{"type":"html","default":"","display":"Core Message"}},"game":{"timer":{"limit":{"type":"number","default":-1,"display":"Time Limit (seconds)"},"out-of-time-prompt":{"type":"html","display":"Out of time prompt"}}},"prompt":{"type":"html","default":"Drag to the correct category"},"doneText":{"type":"html","default":"Continue","display":"Done text"}},"examples":[{"subtype":"true-or-false","title":"Is the following statement true or false?","buttonText":"Product Z is the newest feature and offers a new level of feedback for the user.","categories":[{"text":"True","correct":true},{"text":"False","correct":false}],"answer":{"text":"This statement is correct."}},{"subtype":"classification","title":"Is Product X type 1 or type 2?","buttonText":"Product X","categories":[{"text":"Type 1","correct":true},{"text":"Type 2","correct":false}],"answer":{"text":"Product X is type 1."}}]}
});

;require.register("engine/categorise/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (buttonClass, buttonText, categories, config, continueBtnText, doneText, game, hasNarration, hasPrompt, i18n, playinline, prompt, submitUp) {
jade_mixins["video-stream"] = jade_interp = function(videoUrl, playsinline, controls, klass, poster){
var block = (this && this.block), attributes = (this && this.attributes) || {};
playinline = playinline || true
controls = controls || true
klass = klass || 'video vjs-fluid'
var cloudinaryVideoFolderUrl = config.CLOUDINARY_CDN_URL+config.CLOUDINARY_VIDEO_FOLDER
var streamUrl = ''
if ( videoUrl && videoUrl.indexOf(cloudinaryVideoFolderUrl) > -1)
{
streamUrl = videoUrl.replace(cloudinaryVideoFolderUrl, cloudinaryVideoFolderUrl+'sp_full_hd/')
streamUrl = streamUrl.replace('.mp4', '.m3u8')
}
buf.push("<video" + (jade.attr("webkit-playsinline", playsinline, true, false)) + (jade.attr("controls", controls, true, false)) + " preload=\"auto\"" + (jade.attr("dir", config.direction, true, false)) + (jade.attr("poster", poster, true, false)) + (jade.cls(['video-js',klass], [null,true])) + "><source" + (jade.attr("src", videoUrl, true, false)) + "/>");
if ( streamUrl)
{
buf.push("<source" + (jade.attr("src", streamUrl, true, false)) + "/>");
}
buf.push("</video>");
};
jade_mixins["image"] = jade_interp = function(imageUrl, klass){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<img" + (jade.attr("src", imageUrl, true, false)) + (jade.cls([klass], [true])) + "/>");
};
jade_mixins["multi-content"] = jade_interp = function(prop, obj){
var block = (this && this.block), attributes = (this && this.attributes) || {};
obj = obj || locals;
switch (obj[prop + "Type"]){
case "image":
buf.push("<div" + (jade.attr("data-content", obj.image, true, false)) + " class=\"multi-content-wrapper multi-content-wrapper-image block-md block-lt\"><div class=\"block-sm multi-content-media\">");
jade_mixins["image"](obj[prop], 'multi-content multi-content-image');
buf.push("</div></div>");
  break;
case "video":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-video block-md block-lt\"><div class=\"block-sm multi-content-media\">");
jade_mixins["video-stream"](obj[prop], true, true,"multi-content multi-content-video block-dk");
buf.push("</div></div>");
  break;
case "audio":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-audio block-md block-lt\"><div class=\"block-sm multi-content-media\"><audio" + (jade.attr("src", obj[prop], true, false)) + " playsinline=\"playsinline\" preload=\"auto\" controls=\"controls\"" + (jade.attr("dir", config.direction, true, false)) + " class=\"multi-content multi-content-audio block-dk\"></audio></div></div>");
  break;
case "iframe":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-iframe block-md block-lt\"><div class=\"block-sm multi-content-iframe\">");
var iframe = obj[prop].match(/<iframe[^<]*<\/iframe>/)
if ( iframe)
{
buf.push(null == (jade_interp = iframe[0].replace(/ (width|height)=["'\d\w]+/g, "")) ? "" : jade_interp);
}
buf.push("</div></div>");
  break;
default:
buf.push("<span class=\"multi-content multi-content-text\">" + (null == (jade_interp = obj[prop]) ? "" : jade_interp) + "</span>");
  break;
}
};
if ( game && game.timer && game.timer.limit > 0 && !game.timer.isDisabled)
{
buf.push("<div class=\"full-screen\"><div class=\"game-stepper text-lg text-bold\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div></div>");
}
buf.push("<div class=\"content-fill content-fit\"><div class=\"row content-lg-fill content-sm-ver content-md-ver\"><div class=\"col-lg-6 col-sm-12 content-lg-ver block-v-md\"><h1 class=\"slide-title text-lg-right text-md-center text-sm-center fade-in tight\">");
jade_mixins["multi-content"]("title");
buf.push("</h1></div><div class=\"col-lg-6 col-sm-12 content-lg-ver block-v-md\"><div class=\"draggy-parent\"><div" + (jade.attr("data-correct", categories[0].correct, true, false)) + (jade.attr("data-answer-id", categories[0].id, true, false)) + (jade.cls(['category','droppy','droppy-top','block-v-md','delay-4',"droppy-" + (categories[0].correct) + ""], [null,null,null,null,null,true])) + "><div class=\"droppy-child block-dk text-center text-lg slide-left\"><div class=\"content-ver block-sm\">" + (null == (jade_interp = categories[0].content) ? "" : jade_interp) + "</div></div></div><div class=\"draggy block-v-md\"><div" + (jade.cls(['btn','btn-solid','btn-block','selectable','draggy-btn','fade-in','delay-6',buttonClass], [null,null,null,null,null,null,null,true])) + "><div class=\"btn-text\">" + (null == (jade_interp = buttonText) ? "" : jade_interp) + "</div></div></div><div" + (jade.attr("data-correct", categories[1].correct, true, false)) + (jade.attr("data-answer-id", categories[1].id, true, false)) + (jade.cls(['category','droppy','droppy-bottom','block-v-md','delay-4',"droppy-" + (categories[1].correct) + ""], [null,null,null,null,null,true])) + "><div class=\"droppy-child block-dk text-center text-lg slide-right\"><div class=\"content-ver\">" + (null == (jade_interp = categories[1].content) ? "" : jade_interp) + "</div></div></div></div></div></div></div><div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"buttonClass" in locals_for_with?locals_for_with.buttonClass:typeof buttonClass!=="undefined"?buttonClass:undefined,"buttonText" in locals_for_with?locals_for_with.buttonText:typeof buttonText!=="undefined"?buttonText:undefined,"categories" in locals_for_with?locals_for_with.categories:typeof categories!=="undefined"?categories:undefined,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"game" in locals_for_with?locals_for_with.game:typeof game!=="undefined"?game:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"playinline" in locals_for_with?locals_for_with.playinline:typeof playinline!=="undefined"?playinline:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/categorise/view.coffee", function(exports, require, module) {
var CategoriseView, Device, DraggyView, GameView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  slice = [].slice;

GameView = require("views/base/game");

DraggyView = require("views/components/draggy").DraggyView;

Device = require("lib/device");

CategoriseView = (function(superClass) {
  extend(CategoriseView, superClass);

  function CategoriseView() {
    return CategoriseView.__super__.constructor.apply(this, arguments);
  }

  CategoriseView.prototype.template = require("./template");

  CategoriseView.prototype.fitTextOnResize = false;

  CategoriseView.prototype.fitTextOnRender = false;

  CategoriseView.prototype.serialize = function() {
    var data, maxTextLength;
    data = CategoriseView.__super__.serialize.apply(this, arguments);
    maxTextLength = data.width > 375 ? 30 : 20;
    if (data.buttonText.length > maxTextLength) {
      data.buttonClass = "btn-long";
    }
    data.categories = _.shuffle(data.metadata.questions[0].answers);
    return data;
  };

  CategoriseView.prototype.events = function() {
    return {
      "iostap .btn-done": "endGame"
    };
  };

  CategoriseView.prototype.show = function() {
    CategoriseView.__super__.show.apply(this, arguments);
    delete this.index;
    this.setEl(this.findOne(".draggy-btn"), "draggyBtn");
    this.setEl(this.findOne(".draggy-parent"), "draggyParent");
    this.setEl(this.findAll(".droppy"), "droppies");
    this.setEl(this.findAll(".droppy-child"), "droppyChild");
    this.createDraggy();
    return this.enterGame();
  };

  CategoriseView.prototype.createDraggy = function() {
    this.draggy = new DraggyView({
      el: this.findOne(".draggy"),
      lock: "x"
    });
    this.draggy.el.classList.add("no-delay");
    this.listenTo(this.draggy, "drag", this.onDrag);
    this.listenTo(this.draggy, "drop", this.onDrop);
    this.listenTo(this, "resize", this.onResize);
    return this.updateDroppyHeight();
  };

  CategoriseView.prototype.onDrag = function(draggy, isInitialDrag) {
    var droppy, i, j, len, ref;
    this.index = draggy.y < 0 ? 0 : 1;
    ref = this.getEl("droppies");
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      droppy = ref[i];
      droppy.classList.add("no-delay");
      droppy.classList.toggle("active", i === this.index);
    }
    return this.transform(draggy.el, {
      y: draggy.y,
      scale: 1.05,
      transition: isInitialDrag ? "all 300ms" : "none"
    });
  };

  CategoriseView.prototype.onDrop = function(draggy, isReset) {
    var y;
    if (isReset) {
      this.transform(draggy.el, {
        y: draggy.y,
        transition: "all 300ms"
      });
    } else {
      if (!(this.currentDroppy = this.getEl("droppies")[this.index])) {
        return;
      }
      this.draggy.el.classList.add("draggy-drop");
      this.moveDroppies();
      y = (this.currentDroppy.offsetHeight - this.draggy.offset.height) / 2;
      if (draggy.y < 0) {
        y = -y - draggy.offset.height / 2;
      } else {
        y = y + draggy.offset.height / 2;
      }
      draggy.reset({
        x: 0,
        y: y
      });
    }
    return this.setState("touched");
  };

  CategoriseView.prototype.moveDroppies = function() {
    var el, i, j, len, results, toTransform, y;
    y = this.draggy.offset.height / 2;
    toTransform = slice.call(this.getEl("droppies"));
    if (Device.breakpoint(["xs", "sm", "md"])) {
      toTransform.push(this.findOne(".slide-title"));
    }
    results = [];
    for (i = j = 0, len = toTransform.length; j < len; i = ++j) {
      el = toTransform[i];
      results.push(this.transform(el, {
        y: i === 1 ? -y : y,
        transition: "all 300ms"
      }));
    }
    return results;
  };

  CategoriseView.prototype.updateDroppyHeight = function() {
    var el, fontSize, height, i, j, k, len, len1, ref, ref1, ref2;
    this.draggy.getOffset();
    if (!((ref = this.currentState) != null ? ref.refresh : void 0)) {
      this.el.classList.remove("active");
    }
    ref1 = this.getEl("droppies");
    for (i = j = 0, len = ref1.length; j < len; i = ++j) {
      el = ref1[i];
      el.firstChild.style.height = "";
    }
    fontSize = parseInt(window.getComputedStyle(this.getEl("droppies")[0]).fontSize);
    height = _.reduce(this.getEl("droppies"), function(m, el) {
      if (m > el.offsetHeight) {
        return m;
      } else {
        return el.offsetHeight;
      }
    }, this.draggy.el.firstChild.offsetHeight);
    ref2 = this.getEl("droppies");
    for (i = k = 0, len1 = ref2.length; k < len1; i = ++k) {
      el = ref2[i];
      el.firstChild.style.height = (height / fontSize) + "em";
    }
    this.draggy.options.minY = -height;
    this.draggy.options.maxY = height;
    return this.fitText((function(_this) {
      return function() {
        return window.setTimeout((function() {
          return _this.el.classList.add("active");
        }), 300);
      };
    })(this));
  };

  CategoriseView.prototype.answerDetails = function() {
    var answer, details, id, question, questions, ref;
    questions = ((ref = this.options.metadata) != null ? ref.questions : void 0) || [];
    if (!(questions.length > 0 && (this.currentDroppy != null))) {
      return [];
    }
    question = questions[0];
    id = this.currentDroppy.dataset.answerId;
    answer = _.findWhere(question.answers, {
      id: id
    });
    details = {
      question: question.question,
      answer: answer
    };
    return [details];
  };

  CategoriseView.prototype.isCorrect = function() {
    var ref;
    return ((ref = this.currentDroppy) != null ? ref.dataset.correct : void 0) != null;
  };

  CategoriseView.prototype.onRefresh = function() {
    var el, i, j, len, ref;
    if (this.draggy) {
      this.draggy.el.classList.remove("no-delay");
      ref = this.getEl("droppies");
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        el = ref[i];
        el.classList.remove("no-delay");
      }
    }
    return CategoriseView.__super__.onRefresh.apply(this, arguments);
  };

  CategoriseView.prototype.onResize = function() {
    this.updateDroppyHeight();
    return this.onDrop(this.draggy);
  };

  CategoriseView.prototype.endGame = function() {
    CategoriseView.__super__.endGame.apply(this, arguments);
    return this.submit();
  };

  return CategoriseView;

})(GameView);

module.exports = CategoriseView;
});

;require.register("engine/chat/model.yaml", function(exports, require, module) {
module.exports = {"title":"chat","display":"Chat","category":"Multiple Choice","links":{"academy":"https://academy.edapp.com/how-to-chat/"},"features":{"stars":true,"social":true},"model":{"title":{"type":"html"},"message":{"content":{"type":"html"},"sender":{"type":"html"},"responder":{"type":"html","default":"You"}},"answers":{"correct":{"display":"Correct Answer","type":"html"},"incorrect":{"display":"Incorrect Answers","type":[{"type":"html"}],"min":1,"max":2}},"answer":{"text":{"type":"html","default":"","display":"Answer Text"},"correct":{"type":"html","default":"That's correct!","display":"Correct Reinforcement"},"incorrect":{"type":"html","default":"Not quite...","display":"Incorrect Reinforcement"},"takeaway":{"type":"html","default":"","display":"Core Message"}},"game":{"timer":{"limit":{"type":"number","default":-1,"display":"Time Limit (seconds)"},"out-of-time-prompt":{"type":"html","display":"Out of time prompt"}}},"prompt":{"type":"html","default":"Select the correct answer"},"doneText":{"type":"html","default":"Continue","display":"Done text"}},"examples":[{"subtype":"one-of-three","message":{"sender":"The customer asks","responder":"What's your answer?","content":"Which product is the cheapest?"},"answers":{"correct":"Product X is cheapest","incorrect":["Product Y is cheapest","Product Z is cheapest"]},"answer":{"text":"It's important to help the customer understand that Product X is in fact the cheapest product.\n"}}]}
});

;require.register("engine/chat/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (allAnswers, continueBtnText, doneText, game, hasNarration, hasPrompt, i18n, message, prompt, submitUp, title, undefined) {
if ( game && game.timer && game.timer.limit > 0 && !game.timer.isDisabled)
{
buf.push("<div class=\"full-screen\"><div class=\"game-stepper text-lg text-bold\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div></div>");
}
buf.push("<div class=\"content-fill\"><div class=\"block-v-md content-ver text-md content-fit\">");
if ( title)
{
buf.push("<h2 class=\"fade-in\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h2>");
}
buf.push("<div class=\"row\">");
if ( message.content)
{
buf.push("<div class=\"col-lg-10 col-sm-12\">");
if ( message.sender)
{
buf.push("<h4 class=\"fade-in block-v-sm\">" + (null == (jade_interp = message.sender) ? "" : jade_interp) + "</h4>");
}
buf.push("<div class=\"message message--question chat-msg quote quote-dk pull-left\"><div class=\"quote-content\"><div class=\"chat-msg-elli\"><span class=\"bullet delay-1\">&bullet;</span><span class=\"bullet delay-2\">&bullet;</span><span class=\"bullet delay-3\">&bullet;</span></div><div class=\"chat-msg-text\">" + (null == (jade_interp = message.content) ? "" : jade_interp) + "</div></div></div></div>");
}
if ( message.responder)
{
buf.push("<div class=\"col-sm-12 block-v-sm text-right chat-responder delay-4\"><h4>" + (null == (jade_interp = message.responder) ? "" : jade_interp) + "</h4></div>");
}
buf.push("<div class=\"col-md-10 col-md-offset-2 col-sm-12\">");
// iterate allAnswers
;(function(){
  var $$obj = allAnswers;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var answer = $$obj[$index];

buf.push("<div" + (jade.attr("data-id", answer.id, true, false)) + (jade.cls(['message','message--answer','chat-msg','quote','quote-lt','pull-right','text-right','selectable',([
              "delay-" + (answer.delay) + "",
              answer.isCorrect ? "correct" : "incorrect"
            ].join(" "))], [null,null,null,null,null,null,null,null,true])) + "><div class=\"quote-content\">" + (null == (jade_interp = answer.text) ? "" : jade_interp) + "</div></div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var answer = $$obj[$index];

buf.push("<div" + (jade.attr("data-id", answer.id, true, false)) + (jade.cls(['message','message--answer','chat-msg','quote','quote-lt','pull-right','text-right','selectable',([
              "delay-" + (answer.delay) + "",
              answer.isCorrect ? "correct" : "incorrect"
            ].join(" "))], [null,null,null,null,null,null,null,null,true])) + "><div class=\"quote-content\">" + (null == (jade_interp = answer.text) ? "" : jade_interp) + "</div></div>");
    }

  }
}).call(this);

buf.push("</div></div></div></div><div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"allAnswers" in locals_for_with?locals_for_with.allAnswers:typeof allAnswers!=="undefined"?allAnswers:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"game" in locals_for_with?locals_for_with.game:typeof game!=="undefined"?game:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"message" in locals_for_with?locals_for_with.message:typeof message!=="undefined"?message:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/chat/view.coffee", function(exports, require, module) {
var ChatView, GameView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

GameView = require("views/base/game");

ChatView = (function(superClass) {
  extend(ChatView, superClass);

  function ChatView() {
    return ChatView.__super__.constructor.apply(this, arguments);
  }

  ChatView.prototype.template = require("./template");

  ChatView.prototype.events = function() {
    return {
      "iostap .selectable": "selectAnswer",
      "iostap .btn-done": "endGame"
    };
  };

  ChatView.prototype.serialize = function() {
    var answers, d, ref, ref1, ref2;
    d = ChatView.__super__.serialize.apply(this, arguments);
    answers = ((ref = d.metadata) != null ? (ref1 = ref.questions) != null ? (ref2 = ref1[0]) != null ? ref2.answers : void 0 : void 0 : void 0) || [];
    d.allAnswers = _.shuffle(answers).map(function(a, i) {
      return {
        id: a.id,
        text: typogr.typogrify(a.content.toString() || ""),
        isCorrect: a.correct,
        delay: 6 + i * 2
      };
    });
    return d;
  };

  ChatView.prototype.onRefresh = function() {
    ChatView.__super__.onRefresh.apply(this, arguments);
    return this.resetChat(true);
  };

  ChatView.prototype.resetChat = function(isRefresh) {
    var delay, el, j, len, ref, ref1;
    this.setState("prompt");
    this.setState(false, "show-msg");
    delay = isRefresh ? 0 : !this.options.data.message.content ? 300 : 1000;
    if (((ref = this.options.data.game) != null ? ref.timer.limit : void 0) > 0) {
      ref1 = this.getEl("answers");
      for (j = 0, len = ref1.length; j < len; j++) {
        el = ref1[j];
        el.classList.add("no-delay");
      }
    }
    if (isRefresh) {
      this.getEl("chatElli").classList.add("hide");
    }
    window.clearTimeout(this.timeout);
    return this.timeout = window.setTimeout(((function(_this) {
      return function() {
        _this.setState(true, "show-msg");
        return _this.getEl("chatElli").classList.remove("hide");
      };
    })(this)), delay);
  };

  ChatView.prototype.show = function() {
    ChatView.__super__.show.apply(this, arguments);
    this.setEl(this.findAll(".selectable"), "answers");
    this.setEl(this.findOne(".chat-msg-elli"), "chatElli");
    this.resetChat();
    return this.enterGame();
  };

  ChatView.prototype.hide = function() {
    this.setState(false, "show-msg");
    return ChatView.__super__.hide.apply(this, arguments);
  };

  ChatView.prototype.endGame = function() {
    ChatView.__super__.endGame.apply(this, arguments);
    return this.submit();
  };

  ChatView.prototype.selectAnswer = function(e) {
    var el, j, len, ref, target, width;
    if (this.currentState.state === "complete") {
      return;
    }
    ref = this.getEl("answers");
    for (j = 0, len = ref.length; j < len; j++) {
      el = ref[j];
      el.classList.remove("active");
      this.transform(el, {
        scale: 1
      });
    }
    target = e.currentTarget;
    width = target.offsetWidth;
    target.classList.add("active", "no-delay");
    this.transform(target, {
      scale: 1 + 16 / width
    });
    this.setEl(target, "selected");
    return this.setState("touched");
  };

  ChatView.prototype.answerDetails = function() {
    var details, id, question, questions, ref, ref1;
    questions = ((ref = this.options.metadata) != null ? ref.questions : void 0) || [];
    if (!(questions.length > 0)) {
      return [];
    }
    question = questions[0];
    id = (ref1 = this.getEl("selected")) != null ? ref1.dataset.id : void 0;
    details = {
      answer: _.find(question.answers, {
        id: id
      }),
      question: question.question
    };
    return [details];
  };

  ChatView.prototype.isCorrect = function() {
    var ref, ref1;
    return (ref = (ref1 = this.getEl("selected")) != null ? ref1.classList.contains("correct") : void 0) != null ? ref : false;
  };

  ChatView.prototype.screenshot = function() {
    this.setState(true, "show-msg");
    return ChatView.__super__.screenshot.apply(this, arguments);
  };

  return ChatView;

})(GameView);

module.exports = ChatView;
});

;require.register("engine/circle-the-answer/model.yaml", function(exports, require, module) {
module.exports = {"title":"circle-the-answer","display":"Circle the Answer","category":"Multiple Choice","features":{"stars":true,"social":true},"model":{"title":{"types":["text","image","video","audio"],"default":""},"answers":{"correct":{"display":"Correct Answer","type":"html"},"incorrect":{"display":"Incorrect Answers","type":[{"type":"html"}],"min":1,"max":3}},"answer":{"text":{"type":"html","default":"","display":"Answer Text"},"correct":{"type":"html","default":"That's correct!","display":"Correct Reinforcement"},"incorrect":{"type":"html","default":"Not quite...","display":"Incorrect Reinforcement"},"takeaway":{"type":"html","default":"","display":"Core Message"}},"game":{"timer":{"limit":{"type":"number","default":-1,"display":"Time Limit (seconds)"},"out-of-time-prompt":{"type":"html","display":"Out of time prompt"}}},"prompt":{"type":"html","default":"Circle the correct answer"},"doneText":{"type":"html","default":"Continue","display":"Done text"}},"examples":[{"subtype":"circle-the-answer","title":"Ed makes learning fun with a massive range of engaging templates","titleType":"text","answers":{"correct":"That’s right!","incorrect":["Yes, I suppose so...","I'm not sure"]}}]}
});

;require.register("engine/circle-the-answer/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (allAnswers, config, continueBtnText, doneText, game, hasNarration, hasPrompt, i18n, playinline, prompt, submitUp, undefined) {
jade_mixins["video-stream"] = jade_interp = function(videoUrl, playsinline, controls, klass, poster){
var block = (this && this.block), attributes = (this && this.attributes) || {};
playinline = playinline || true
controls = controls || true
klass = klass || 'video vjs-fluid'
var cloudinaryVideoFolderUrl = config.CLOUDINARY_CDN_URL+config.CLOUDINARY_VIDEO_FOLDER
var streamUrl = ''
if ( videoUrl && videoUrl.indexOf(cloudinaryVideoFolderUrl) > -1)
{
streamUrl = videoUrl.replace(cloudinaryVideoFolderUrl, cloudinaryVideoFolderUrl+'sp_full_hd/')
streamUrl = streamUrl.replace('.mp4', '.m3u8')
}
buf.push("<video" + (jade.attr("webkit-playsinline", playsinline, true, false)) + (jade.attr("controls", controls, true, false)) + " preload=\"auto\"" + (jade.attr("dir", config.direction, true, false)) + (jade.attr("poster", poster, true, false)) + (jade.cls(['video-js',klass], [null,true])) + "><source" + (jade.attr("src", videoUrl, true, false)) + "/>");
if ( streamUrl)
{
buf.push("<source" + (jade.attr("src", streamUrl, true, false)) + "/>");
}
buf.push("</video>");
};
jade_mixins["image"] = jade_interp = function(imageUrl, klass){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<img" + (jade.attr("src", imageUrl, true, false)) + (jade.cls([klass], [true])) + "/>");
};
jade_mixins["multi-content"] = jade_interp = function(prop, obj){
var block = (this && this.block), attributes = (this && this.attributes) || {};
obj = obj || locals;
switch (obj[prop + "Type"]){
case "image":
buf.push("<div" + (jade.attr("data-content", obj.image, true, false)) + " class=\"multi-content-wrapper multi-content-wrapper-image block-md block-lt\"><div class=\"block-sm multi-content-media\">");
jade_mixins["image"](obj[prop], 'multi-content multi-content-image');
buf.push("</div></div>");
  break;
case "video":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-video block-md block-lt\"><div class=\"block-sm multi-content-media\">");
jade_mixins["video-stream"](obj[prop], true, true,"multi-content multi-content-video block-dk");
buf.push("</div></div>");
  break;
case "audio":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-audio block-md block-lt\"><div class=\"block-sm multi-content-media\"><audio" + (jade.attr("src", obj[prop], true, false)) + " playsinline=\"playsinline\" preload=\"auto\" controls=\"controls\"" + (jade.attr("dir", config.direction, true, false)) + " class=\"multi-content multi-content-audio block-dk\"></audio></div></div>");
  break;
case "iframe":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-iframe block-md block-lt\"><div class=\"block-sm multi-content-iframe\">");
var iframe = obj[prop].match(/<iframe[^<]*<\/iframe>/)
if ( iframe)
{
buf.push(null == (jade_interp = iframe[0].replace(/ (width|height)=["'\d\w]+/g, "")) ? "" : jade_interp);
}
buf.push("</div></div>");
  break;
default:
buf.push("<span class=\"multi-content multi-content-text\">" + (null == (jade_interp = obj[prop]) ? "" : jade_interp) + "</span>");
  break;
}
};
if ( game && game.timer && game.timer.limit > 0 && !game.timer.isDisabled)
{
buf.push("<div class=\"full-screen\"><div class=\"game-stepper text-lg text-bold\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div></div>");
}
buf.push("<div class=\"full-screen circle-canvas-container\"><canvas class=\"circle-canvas\"></canvas></div><div class=\"block-v-lg content-fill content-fit circle-boxes\"><div class=\"row content-lg-fill content-sm-ver content-md-ver\"><div class=\"col-lg-6 col-sm-12 content-lg-ver block-v-md\"><h1 class=\"fade-in text-lg-right text-md-center text-sm-center\">");
jade_mixins["multi-content"]("title");
buf.push("</h1></div><div class=\"col-lg-6 col-sm-12 content-lg-ver block-v-md text-center\">");
// iterate allAnswers
;(function(){
  var $$obj = allAnswers;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var answer = $$obj[i];

buf.push("<div" + (jade.attr("data-correct", answer.isCorrect, true, false)) + (jade.attr("data-answer-id", answer.id, true, false)) + (jade.cls(['circle-box','slide-up','text-md',([
            "delay-" + (answer.delay) + "",
            answer.isCorrect ? "correct" : "incorrect"
          ].join(" "))], [null,null,null,true])) + "><div class=\"block-lg circle-box-text\">" + (null == (jade_interp = answer.text) ? "" : jade_interp) + "</div></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var answer = $$obj[i];

buf.push("<div" + (jade.attr("data-correct", answer.isCorrect, true, false)) + (jade.attr("data-answer-id", answer.id, true, false)) + (jade.cls(['circle-box','slide-up','text-md',([
            "delay-" + (answer.delay) + "",
            answer.isCorrect ? "correct" : "incorrect"
          ].join(" "))], [null,null,null,true])) + "><div class=\"block-lg circle-box-text\">" + (null == (jade_interp = answer.text) ? "" : jade_interp) + "</div></div>");
    }

  }
}).call(this);

buf.push("</div></div></div><div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"allAnswers" in locals_for_with?locals_for_with.allAnswers:typeof allAnswers!=="undefined"?allAnswers:undefined,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"game" in locals_for_with?locals_for_with.game:typeof game!=="undefined"?game:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"playinline" in locals_for_with?locals_for_with.playinline:typeof playinline!=="undefined"?playinline:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/circle-the-answer/view.coffee", function(exports, require, module) {
var CircleTheAnswerView, DraggyView, GameView, SmoothLine, animate, dpi, easie,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

GameView = require("views/base/game");

DraggyView = require("views/components/draggy").DraggyView;

SmoothLine = require("lib/draw/smooth-line");

easie = require("lib/easie");

animate = require("lib/animate");

dpi = require("lib/device").dpi;

CircleTheAnswerView = (function(superClass) {
  extend(CircleTheAnswerView, superClass);

  function CircleTheAnswerView() {
    return CircleTheAnswerView.__super__.constructor.apply(this, arguments);
  }

  CircleTheAnswerView.prototype.template = require("./template");

  CircleTheAnswerView.prototype.events = function() {
    return {
      "iostap .btn-done": "endGame"
    };
  };

  CircleTheAnswerView.prototype.serialize = function() {
    var allAnswers, answers, d, ref, ref1, ref2;
    d = CircleTheAnswerView.__super__.serialize.apply(this, arguments);
    allAnswers = ((ref = d.metadata) != null ? (ref1 = ref.questions) != null ? (ref2 = ref1[0]) != null ? ref2.answers : void 0 : void 0 : void 0) || [];
    answers = allAnswers.map(function(a, i) {
      return {
        id: a.id,
        text: typogr.typogrify(a.content.toString() || ""),
        isCorrect: a.correct,
        delay: 4 + i * 2
      };
    });
    d.allAnswers = _.shuffle(answers);
    return d;
  };

  CircleTheAnswerView.prototype.show = function() {
    var base, base1, el, j, len, ref;
    CircleTheAnswerView.__super__.show.apply(this, arguments);
    this.setEl(this.findAll(".circle-box"), "boxes");
    this.draggy = new DraggyView({
      el: this.findOne("canvas"),
      isParent: true
    });
    this.context = (typeof (base = this.draggy.el).getContext === "function" ? base.getContext("2d") : void 0) || {};
    this.listenTo(this.draggy, "drag", this.onDrag);
    this.listenTo(this.draggy, "drop", this.onDrop);
    this.listenTo(this, "resize", this.onResize);
    this.onResize();
    if (typeof (base1 = this.context).clearRect === "function") {
      base1.clearRect(0, 0, this.draggy.el.width, this.draggy.el.height);
    }
    ref = this.getEl("boxes");
    for (j = 0, len = ref.length; j < len; j++) {
      el = ref[j];
      el.classList.remove("active", "complete");
    }
    return this.enterGame();
  };

  CircleTheAnswerView.prototype.onResize = function() {
    var el, ref;
    if (el = (ref = this.draggy) != null ? ref.el : void 0) {
      el.width = this.el.firstChild.offsetWidth * dpi;
      return el.height = this.el.firstChild.offsetHeight * dpi;
    }
  };

  CircleTheAnswerView.prototype.onDrag = function(draggy, isInitial) {
    var box, j, left, len, ref, ref1, ref2, ref3, ref4, top;
    window.clearTimeout(this.timeout);
    ref = this.getBounds(this.el.firstChild), left = ref.left, top = ref.top;
    if (isInitial) {
      if ((ref1 = this.line) != null) {
        if ((ref2 = ref1.animation) != null) {
          ref2.cancel();
        }
      }
      if ((ref3 = this.animation) != null) {
        ref3.cancel();
      }
      this.context.lineCap = "round";
      this.context.globalAlpha = 1;
      this.line = new SmoothLine([], window.getComputedStyle(this.el).color, 4 * dpi);
      this.activeBox = null;
      ref4 = this.getEl("boxes");
      for (j = 0, len = ref4.length; j < len; j++) {
        box = ref4[j];
        box.classList.remove("active");
      }
    }
    return this.addPoint(draggy);
  };

  CircleTheAnswerView.prototype.onDrop = function() {
    this.findAnswer(this.line.getPoints());
    if (this.activeBox) {
      return this.setState("touched");
    } else {
      return this.setState("prompt");
    }
  };

  CircleTheAnswerView.prototype.addPoint = function(arg) {
    var x, y;
    x = arg.x, y = arg.y;
    this.line.add({
      x: x * dpi,
      y: y * dpi
    });
    return this.drawLines();
  };

  CircleTheAnswerView.prototype.drawLines = function() {
    this.draggy.el.offsetHeight;
    this.context.clearRect(0, 0, this.draggy.el.width, this.draggy.el.height);
    this.context.beginPath();
    return this.line.draw(this.context);
  };

  CircleTheAnswerView.prototype.getClosestBox = function(centerX, centerY) {
    var offset;
    offset = {
      x: -this.draggy.offset.left,
      y: -this.draggy.offset.top
    };
    return _.sortBy(this.getEl("boxes"), (function(_this) {
      return function(box) {
        var bounds, x, y;
        bounds = _this.getBounds(box, offset);
        x = (bounds.left + bounds.width / 2) - centerX / dpi;
        y = (bounds.top + bounds.height / 2) - centerY / dpi;
        return Math.sqrt(x * x + y * y);
      };
    })(this))[0];
  };

  CircleTheAnswerView.prototype.getDistance = function(p1, p2) {
    var distX, distY;
    distX = p1.x - p2.x;
    distY = p1.y - p2.y;
    return Math.sqrt(Math.pow(distX, 2) + Math.pow(distY, 2));
  };

  CircleTheAnswerView.prototype.findAnswer = function(points) {
    var bounds, boxX, boxY, buffer, centerX, centerY, el, isACircle, isWithin, j, len, maxX, maxY, minX, minY, offset, radius, ref, ref1, type, x, y;
    minX = minY = 2e308;
    maxX = maxY = -2e308;
    for (j = 0, len = points.length; j < len; j++) {
      ref = points[j], x = ref.x, y = ref.y;
      if (x < minX) {
        minX = x;
      }
      if (x > maxX) {
        maxX = x;
      }
      if (y < minY) {
        minY = y;
      }
      if (y > maxY) {
        maxY = y;
      }
    }
    buffer = 80;
    centerX = _.average(_.pluck(points, "x"));
    centerY = _.average(_.pluck(points, "y"));
    radius = ((maxX - minX) / 2 + (maxY - minY) / 2) / 2;
    el = this.getClosestBox(centerX, centerY);
    offset = {
      x: -this.draggy.offset.left,
      y: -this.draggy.offset.top
    };
    bounds = this.getBounds(el, offset);
    boxX = bounds.left + bounds.width / 2;
    boxY = bounds.top + bounds.height / 2;
    isACircle = this.getDistance(points[0], _.last(points)) < 250;
    isWithin = boxX * dpi > minX - buffer && boxX * dpi < maxX + buffer && boxY * dpi > minY - buffer && boxY * dpi < maxY + buffer;
    this.activeBox = isACircle && isWithin ? el : void 0;
    if ((ref1 = this.activeBox) != null) {
      ref1.classList.add("active");
    }
    type = !isACircle ? "line" : isWithin ? "on" : "off";
    return this.animateAnswer(type, centerX, centerY, radius);
  };

  CircleTheAnswerView.prototype.animateAnswer = function(type, x, y, radius) {
    var draw, duration, wrap;
    switch (type) {
      case "line":
        this.line.erase(this.context, (function(_this) {
          return function() {
            return _this.context.clearRect(0, 0, _this.draggy.el.width, _this.draggy.el.height);
          };
        })(this));
        break;
      case "on":
        duration = 1000;
        this.context.fillStyle = window.getComputedStyle(this.el).color;
        draw = (function(_this) {
          return function(dist) {
            var scale;
            scale = easie.elasticInOut(dist + 1, 0, 1.25, 2, 1.25, 1.25);
            _this.context.arc(x, y, radius * scale, 0, 2 * Math.PI);
            return _this.context.fill();
          };
        })(this);
        break;
      case "off":
        duration = 1000;
        draw = (function(_this) {
          return function(dist) {
            var scale;
            scale = easie.elasticIn(1 - dist, 0.8, 0.2, 1, 0.5);
            _this.context.arc(x, y, radius * scale, 0, 2 * Math.PI);
            return _this.context.stroke();
          };
        })(this);
    }
    if (draw) {
      wrap = (function(_this) {
        return function(d) {
          _this.context.clearRect(0, 0, _this.draggy.el.width, _this.draggy.el.height);
          _this.context.beginPath();
          _this.context.globalAlpha = 1 - d;
          return draw(d);
        };
      })(this);
      return this.animation = animate(wrap, duration);
    }
  };

  CircleTheAnswerView.prototype.isCorrect = function() {
    var ref;
    return ((ref = this.activeBox) != null ? ref.dataset.correct : void 0) != null;
  };

  CircleTheAnswerView.prototype.isMatch = function(left, right) {
    var ll, lr, rl, rr;
    lr = this.options.data.pairs[+left.dataset.index].right;
    rr = this.options.data.pairs[+right.dataset.index].right;
    ll = this.options.data.pairs[+left.dataset.index].left;
    rl = this.options.data.pairs[+right.dataset.index].left;
    return lr === rr || ll === rl;
  };

  CircleTheAnswerView.prototype.endGame = function() {
    CircleTheAnswerView.__super__.endGame.apply(this, arguments);
    return this.submit();
  };

  CircleTheAnswerView.prototype.answerDetails = function() {
    var details, id, question, questions, ref;
    questions = ((ref = this.options.metadata) != null ? ref.questions : void 0) || [];
    if (!(questions.length > 0)) {
      return [];
    }
    question = questions[0];
    id = this.$(this.activeBox).data("answer-id");
    details = {
      answer: _.find(question.answers, {
        id: id
      }),
      question: question.question
    };
    return [details];
  };

  return CircleTheAnswerView;

})(GameView);

module.exports = CircleTheAnswerView;
});

;require.register("engine/comparison/model.yaml", function(exports, require, module) {
module.exports = {"title":"comparison","display":"Comparison","category":"Content","description":"Juxtapose two items in a slider","features":{"narration":true,"social":true},"model":{"title":{"type":"html","default":"Ask a question"},"before":{"content":{"types":["text","image"]},"label":{"type":"text"}},"after":{"content":{"types":["text","image"]},"label":{"type":"text"}},"startPosition":{"type":"select","enum":["Before - Start with the first section visible","Middle - Show the content equally divided","After - The second section is shown first"],"default":"Middle - Show the content equally divided","display":"Start Position"},"prompt":{"type":"html","default":"Drag to compare the content"},"doneText":{"type":"html","default":"Continue","display":"Done text"}},"examples":[{"subtype":"compare-two","title":"Product X vs. Product Y","before":{"content":"img/examples/product-phone.png","contentType":"image","label":"**Product X**\n\nBrilliant. In every way.\n"},"after":{"content":"img/examples/product-laptop.png","contentType":"image","label":"**Product Y**\n\nMore power. More performance.\n"},"startPosition":"Middle - Show the content equally divided"},{"subtype":"reveal-further-information","title":"Product X","before":{"content":"## Brilliant in every way\n","contentType":"text"},"after":{"content":"Our brilliant new sleek design allows the user to have unparalleled  comfort when using the device\n","contentType":"text"},"startPosition":"Before - Start with the first section visible","prompt":"Drag to reveal the content"}]}
});

;require.register("engine/comparison/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (after, before, config, continueBtnText, doneText, hasNarration, hasPrompt, i18n, playinline, prompt, submitUp, title, undefined) {
jade_mixins["video-stream"] = jade_interp = function(videoUrl, playsinline, controls, klass, poster){
var block = (this && this.block), attributes = (this && this.attributes) || {};
playinline = playinline || true
controls = controls || true
klass = klass || 'video vjs-fluid'
var cloudinaryVideoFolderUrl = config.CLOUDINARY_CDN_URL+config.CLOUDINARY_VIDEO_FOLDER
var streamUrl = ''
if ( videoUrl && videoUrl.indexOf(cloudinaryVideoFolderUrl) > -1)
{
streamUrl = videoUrl.replace(cloudinaryVideoFolderUrl, cloudinaryVideoFolderUrl+'sp_full_hd/')
streamUrl = streamUrl.replace('.mp4', '.m3u8')
}
buf.push("<video" + (jade.attr("webkit-playsinline", playsinline, true, false)) + (jade.attr("controls", controls, true, false)) + " preload=\"auto\"" + (jade.attr("dir", config.direction, true, false)) + (jade.attr("poster", poster, true, false)) + (jade.cls(['video-js',klass], [null,true])) + "><source" + (jade.attr("src", videoUrl, true, false)) + "/>");
if ( streamUrl)
{
buf.push("<source" + (jade.attr("src", streamUrl, true, false)) + "/>");
}
buf.push("</video>");
};
jade_mixins["image"] = jade_interp = function(imageUrl, klass){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<img" + (jade.attr("src", imageUrl, true, false)) + (jade.cls([klass], [true])) + "/>");
};
jade_mixins["multi-content"] = jade_interp = function(prop, obj){
var block = (this && this.block), attributes = (this && this.attributes) || {};
obj = obj || locals;
switch (obj[prop + "Type"]){
case "image":
buf.push("<div" + (jade.attr("data-content", obj.image, true, false)) + " class=\"multi-content-wrapper multi-content-wrapper-image block-md block-lt\"><div class=\"block-sm multi-content-media\">");
jade_mixins["image"](obj[prop], 'multi-content multi-content-image');
buf.push("</div></div>");
  break;
case "video":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-video block-md block-lt\"><div class=\"block-sm multi-content-media\">");
jade_mixins["video-stream"](obj[prop], true, true,"multi-content multi-content-video block-dk");
buf.push("</div></div>");
  break;
case "audio":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-audio block-md block-lt\"><div class=\"block-sm multi-content-media\"><audio" + (jade.attr("src", obj[prop], true, false)) + " playsinline=\"playsinline\" preload=\"auto\" controls=\"controls\"" + (jade.attr("dir", config.direction, true, false)) + " class=\"multi-content multi-content-audio block-dk\"></audio></div></div>");
  break;
case "iframe":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-iframe block-md block-lt\"><div class=\"block-sm multi-content-iframe\">");
var iframe = obj[prop].match(/<iframe[^<]*<\/iframe>/)
if ( iframe)
{
buf.push(null == (jade_interp = iframe[0].replace(/ (width|height)=["'\d\w]+/g, "")) ? "" : jade_interp);
}
buf.push("</div></div>");
  break;
default:
buf.push("<span class=\"multi-content multi-content-text\">" + (null == (jade_interp = obj[prop]) ? "" : jade_interp) + "</span>");
  break;
}
};
buf.push("<div class=\"content-fit content-fill\"><div class=\"content-sm-ver content-md-fill text-center block-v-lg\"><div class=\"row content-md-fill\">");
if ( title)
{
buf.push("<div class=\"col-sm-12 col-md-6 content-md-ver\"><div class=\"block-v-md slider-title\"><h1 class=\"slide-down\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1></div></div>");
}
buf.push("<div" + (jade.cls(['col-sm-12','content-md-ver','block-v-md',title ? "col-md-6" : "col-md-8 col-md-offset-2"], [null,null,null,true])) + "><div class=\"fade-in delay-3 slider-wrapper\"><div class=\"slider\"><div class=\"slider-knob\"></div><div class=\"slider-items\">");
// iterate [ before, after ]
;(function(){
  var $$obj = [ before, after ];
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var item = $$obj[i];

buf.push("<div" + (jade.cls(['slider-item','content-fill',"slider-item-" + (i) + ""], [null,null,true])) + "><div class=\"slider-content content-fill\">");
jade_mixins["multi-content"]("content", item);
buf.push("</div></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var item = $$obj[i];

buf.push("<div" + (jade.cls(['slider-item','content-fill',"slider-item-" + (i) + ""], [null,null,true])) + "><div class=\"slider-content content-fill\">");
jade_mixins["multi-content"]("content", item);
buf.push("</div></div>");
    }

  }
}).call(this);

buf.push("</div></div></div><div class=\"slider-labels text-md\"><div class=\"slider-label slider-label-before\">" + (null == (jade_interp = before.label) ? "" : jade_interp) + "</div><div class=\"slider-label slider-label-after\">" + (null == (jade_interp = after.label) ? "" : jade_interp) + "</div></div></div></div></div></div><div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"after" in locals_for_with?locals_for_with.after:typeof after!=="undefined"?after:undefined,"before" in locals_for_with?locals_for_with.before:typeof before!=="undefined"?before:undefined,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"playinline" in locals_for_with?locals_for_with.playinline:typeof playinline!=="undefined"?playinline:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/comparison/view.coffee", function(exports, require, module) {
var ComparisonView, Device, DraggyView, Preloader, SlideView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SlideView = require("views/slide");

DraggyView = require("views/components/draggy").DraggyView;

Preloader = require("lib/preload");

Device = require("lib/device");

ComparisonView = (function(superClass) {
  extend(ComparisonView, superClass);

  function ComparisonView() {
    return ComparisonView.__super__.constructor.apply(this, arguments);
  }

  ComparisonView.prototype.template = require("./template");

  ComparisonView.prototype.events = {
    "iostap .btn-done": "submit",
    "fittextend": "onFitTextEnd"
  };

  ComparisonView.prototype.show = function() {
    this.createDraggy();
    this.slideToStart();
    return this.trigger("resize");
  };

  ComparisonView.prototype.getStartPosition = function() {
    var ref;
    return ((ref = this.options.data.startPosition) != null ? typeof ref.split === "function" ? ref.split(" ")[0].toLowerCase() : void 0 : void 0) || "middle";
  };

  ComparisonView.prototype.slideToStart = function() {
    var offset;
    offset = (function() {
      switch (this.getStartPosition()) {
        case "before":
          return 1;
        case "after":
          return 0;
        default:
          return 0.5;
      }
    }).call(this);
    return window.setTimeout((function(_this) {
      return function() {
        var ref;
        return (ref = _this.draggy) != null ? ref.reset({
          x: _this.draggy.offset.width * offset
        }) : void 0;
      };
    })(this), 1);
  };

  ComparisonView.prototype.beforeShow = function() {
    var images, ref;
    images = this.findAll("img");
    this.setEl(this.findOne(".slider-wrapper"), "slider-wrapper");
    this.setEl(this.findOne(".slider"), "slider");
    this.setEl(this.findOne(".slider-knob"), "knob");
    this.setEl(this.findAll(".slider-item"), "items");
    this.setEl(this.findOne(".slider-title"), "title");
    this.setEl(this.findOne(".slider-labels"), "labels");
    if ((ref = this.draggy) != null) {
      ref.undelegateEvents();
    }
    this.draggy = null;
    delete this.draggy;
    if (images.length > 0) {
      Preloader.load(_.pluck(images, "src"), (function(_this) {
        return function() {
          return _this.sizeContent();
        };
      })(this));
    } else {
      this.sizeContent();
    }
    if (this.options.name === 0) {
      return window.setTimeout((function(_this) {
        return function() {
          _this.fitText();
          return _this.show();
        };
      })(this), 400);
    }
  };

  ComparisonView.prototype.refresh = function(params) {
    var position;
    position = !_.isEqual(params.data.before, this.options.data.before) ? 0.75 : !_.isEqual(params.data.after, this.options.data.after) ? 0.25 : void 0;
    ComparisonView.__super__.refresh.apply(this, arguments);
    this.beforeShow();
    if (position) {
      this.createDraggy();
      this.draggy.reset({
        x: this.draggy.offset.width * position
      });
      return this.onDrag(this.draggy, false, 1, true);
    } else {
      return this.show();
    }
  };

  ComparisonView.prototype.onRefresh = function() {};

  ComparisonView.prototype.onFitTextEnd = function() {
    return this.sizeContent(true);
  };

  ComparisonView.prototype.createDraggy = function() {
    var width;
    if (this.draggy) {
      this.draggy.undelegateEvents();
    }
    width = this.getEl("slider").offsetWidth;
    this.draggy = new DraggyView({
      el: this.getEl("slider"),
      minX: 0,
      maxX: width,
      lock: "y",
      isParent: true
    });
    this.listenTo(this.draggy, "drag", this.onDrag);
    return this.listenTo(this.draggy, "drop", this.onDrop);
  };

  ComparisonView.prototype.onDrag = function(draggy, shouldTransit, scale, isInitialDrag) {
    var el, i, j, len, ref, results, s, side, sliderLabels, transition, x;
    if (scale == null) {
      scale = 1.1;
    }
    if (isInitialDrag == null) {
      isInitialDrag = false;
    }
    transition = shouldTransit ? "all 300ms" : "";
    this.transform(this.getEl("knob"), {
      x: Math.round(draggy.x),
      scale: scale,
      transition: transition
    });
    x = Math.round(Math.max(Math.min(draggy.x, draggy.offset.width), 0));
    if (!this.draggy || draggy.x === draggy.offset.width / 2) {
      this.setState(false, "side");
    } else {
      side = x > draggy.offset.width / 2 ? "before" : "after";
      this.setState(side, "side");
      this.transform(this.getEl("slider-wrapper"), {
        y: 0,
        transition: "500ms"
      });
      this.transform(this.getEl("title"), {
        y: 0,
        transition: "500ms"
      });
    }
    if (!isInitialDrag) {
      this.setState("touched");
    } else {
      sliderLabels = this.getEl("labels");
      sliderLabels.classList.add("initialized");
    }
    ref = this.getEl("items");
    results = [];
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      el = ref[i];
      s = i === 0 ? draggy.offset.width + .5 : -.5;
      this.transform(el, {
        x: x - s,
        transition: transition
      });
      results.push(this.transform(el.firstChild, {
        x: s - x,
        transition: transition
      }));
    }
    return results;
  };

  ComparisonView.prototype.onDrop = function(draggy, isReset) {
    if (isReset) {
      return this.onDrag(draggy, true, 1, true);
    } else {
      return this.onDrag(draggy, true, 1, false);
    }
  };

  ComparisonView.prototype.sizeContent = function() {
    var els, fs, height, labels, size, start, yOffset;
    this.setState(false, "sized");
    els = this.findAll(".multi-content-wrapper, .multi-content-text");
    labels = this.findOne(".slider-labels");
    this.getEl("slider").style.height = "";
    this.getEl("slider").style.width = "";
    fs = parseFloat(window.getComputedStyle(this.getEl("slider")).fontSize);
    height = _.reduce(labels.children, function(m, el) {
      return Math.max(m, el.offsetHeight);
    }, 0);
    labels.style.height = (height / fs) + "em";
    size = _.reduce(els, function(m, el) {
      return {
        h: Math.max(m.h, el.offsetHeight),
        w: Math.max(m.w, el.offsetWidth)
      };
    }, {
      h: 80,
      w: 0
    });
    this.getEl("slider").style.height = (size.h / fs) + "em";
    this.getEl("slider").style.width = (size.w / fs) + "em";
    this.setState(true, "sized");
    yOffset = (height + fs * 1.2) / 2;
    this.transform(this.getEl("slider-wrapper"), {
      y: yOffset
    });
    if (!Device.breakpoint(["md", "lg"])) {
      this.transform(this.getEl("title"), {
        y: yOffset
      });
    }
    if (this.draggy) {
      this.draggy.options.maxX = size.w;
      this.draggy.getOffset();
      return this.onDrag(this.draggy, false, 1, true);
    } else {
      start = (function() {
        switch (this.getStartPosition()) {
          case "before":
            return 0;
          case "after":
            return 1;
          default:
            return 0.5;
        }
      }).call(this);
      return this.onDrag({
        x: size.w * start,
        offset: {
          width: size.w
        }
      }, false, 1, true);
    }
  };

  return ComparisonView;

})(SlideView);

module.exports = ComparisonView;
});

;require.register("engine/connect/model.yaml", function(exports, require, module) {
module.exports = {"title":"connect","display":"Connect","category":"Relationships","features":{"stars":true,"social":true},"model":{"title":{"types":["text","image","video","audio"],"default":""},"pairs":{"min":2,"max":4,"type":[{"left":{"types":["text","image"]},"right":{"types":["text","image"]}}]},"answer":{"text":{"type":"html","default":"","display":"Answer Text"},"correct":{"type":"html","default":"That's correct!","display":"Correct Reinforcement"},"incorrect":{"type":"html","default":"Not quite...","display":"Incorrect Reinforcement"},"takeaway":{"type":"html","default":"","display":"Core Message"}},"game":{"timer":{"limit":{"type":"number","default":-1,"display":"Time Limit (seconds)"},"out-of-time-prompt":{"type":"html","display":"Out of time prompt"}}},"prompt":{"type":"html","default":"Draw a line between each pair"},"doneText":{"type":"html","default":"Continue","display":"Done text"}},"examples":[{"subtype":"connect-three","title":"Match the products with their attributes","titleType":"text","pairs":[{"left":"Product X","right":"The first product"},{"left":"Product Y","right":"The second one"},{"left":"Product Z","right":"The last product"}]}]}
});

;require.register("engine/connect/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (config, continueBtnText, doneText, game, hasNarration, hasPrompt, i18n, leftItems, playinline, prompt, rightItems, submitUp, undefined) {
jade_mixins["video-stream"] = jade_interp = function(videoUrl, playsinline, controls, klass, poster){
var block = (this && this.block), attributes = (this && this.attributes) || {};
playinline = playinline || true
controls = controls || true
klass = klass || 'video vjs-fluid'
var cloudinaryVideoFolderUrl = config.CLOUDINARY_CDN_URL+config.CLOUDINARY_VIDEO_FOLDER
var streamUrl = ''
if ( videoUrl && videoUrl.indexOf(cloudinaryVideoFolderUrl) > -1)
{
streamUrl = videoUrl.replace(cloudinaryVideoFolderUrl, cloudinaryVideoFolderUrl+'sp_full_hd/')
streamUrl = streamUrl.replace('.mp4', '.m3u8')
}
buf.push("<video" + (jade.attr("webkit-playsinline", playsinline, true, false)) + (jade.attr("controls", controls, true, false)) + " preload=\"auto\"" + (jade.attr("dir", config.direction, true, false)) + (jade.attr("poster", poster, true, false)) + (jade.cls(['video-js',klass], [null,true])) + "><source" + (jade.attr("src", videoUrl, true, false)) + "/>");
if ( streamUrl)
{
buf.push("<source" + (jade.attr("src", streamUrl, true, false)) + "/>");
}
buf.push("</video>");
};
jade_mixins["image"] = jade_interp = function(imageUrl, klass){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<img" + (jade.attr("src", imageUrl, true, false)) + (jade.cls([klass], [true])) + "/>");
};
jade_mixins["multi-content"] = jade_interp = function(prop, obj){
var block = (this && this.block), attributes = (this && this.attributes) || {};
obj = obj || locals;
switch (obj[prop + "Type"]){
case "image":
buf.push("<div" + (jade.attr("data-content", obj.image, true, false)) + " class=\"multi-content-wrapper multi-content-wrapper-image block-md block-lt\"><div class=\"block-sm multi-content-media\">");
jade_mixins["image"](obj[prop], 'multi-content multi-content-image');
buf.push("</div></div>");
  break;
case "video":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-video block-md block-lt\"><div class=\"block-sm multi-content-media\">");
jade_mixins["video-stream"](obj[prop], true, true,"multi-content multi-content-video block-dk");
buf.push("</div></div>");
  break;
case "audio":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-audio block-md block-lt\"><div class=\"block-sm multi-content-media\"><audio" + (jade.attr("src", obj[prop], true, false)) + " playsinline=\"playsinline\" preload=\"auto\" controls=\"controls\"" + (jade.attr("dir", config.direction, true, false)) + " class=\"multi-content multi-content-audio block-dk\"></audio></div></div>");
  break;
case "iframe":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-iframe block-md block-lt\"><div class=\"block-sm multi-content-iframe\">");
var iframe = obj[prop].match(/<iframe[^<]*<\/iframe>/)
if ( iframe)
{
buf.push(null == (jade_interp = iframe[0].replace(/ (width|height)=["'\d\w]+/g, "")) ? "" : jade_interp);
}
buf.push("</div></div>");
  break;
default:
buf.push("<span class=\"multi-content multi-content-text\">" + (null == (jade_interp = obj[prop]) ? "" : jade_interp) + "</span>");
  break;
}
};
if ( game && game.timer && game.timer.limit > 0 && !game.timer.isDisabled)
{
buf.push("<div class=\"full-screen\"><div class=\"game-stepper text-lg text-bold\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div></div>");
}
buf.push("<div class=\"full-screen connect-canvas-container\"><canvas class=\"connect-canvas\"></canvas></div><div class=\"content-fill\"><div class=\"content-fit connect-boxes content-md-fill content-sm-ver block-v-lg\"><div class=\"content-md-ver text-center\"><h1 class=\"fade-in\">");
jade_mixins["multi-content"]("title");
buf.push("</h1>");
// iterate leftItems
;(function(){
  var $$obj = leftItems;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var left = $$obj[i];

buf.push("<div class=\"row\"><div" + (jade.cls(['block-v-sm','col-sm-6','col-lg-5','col-lg-offset-1','slide-right',"delay-" + (i + 4) + ""], [null,null,null,null,null,true])) + "><div" + (jade.attr("data-index", left.index, true, false)) + " data-type=\"left\"" + (jade.attr("data-question-id", left.id, true, false)) + " class=\"connect-box block-md block-dk\">");
jade_mixins["multi-content"]("content", left);
buf.push("</div></div><div" + (jade.cls(['block-v-sm','col-sm-6','col-lg-5','slide-left',"delay-" + (i + 4) + ""], [null,null,null,null,true])) + "><div" + (jade.attr("data-index", rightItems[left.index].index, true, false)) + " data-type=\"right\"" + (jade.attr("data-answer-ids", rightItems[left.index].ids, true, false)) + " class=\"connect-box block-md block-dk\">");
jade_mixins["multi-content"]("content", rightItems[left.index]);
buf.push("</div></div></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var left = $$obj[i];

buf.push("<div class=\"row\"><div" + (jade.cls(['block-v-sm','col-sm-6','col-lg-5','col-lg-offset-1','slide-right',"delay-" + (i + 4) + ""], [null,null,null,null,null,true])) + "><div" + (jade.attr("data-index", left.index, true, false)) + " data-type=\"left\"" + (jade.attr("data-question-id", left.id, true, false)) + " class=\"connect-box block-md block-dk\">");
jade_mixins["multi-content"]("content", left);
buf.push("</div></div><div" + (jade.cls(['block-v-sm','col-sm-6','col-lg-5','slide-left',"delay-" + (i + 4) + ""], [null,null,null,null,true])) + "><div" + (jade.attr("data-index", rightItems[left.index].index, true, false)) + " data-type=\"right\"" + (jade.attr("data-answer-ids", rightItems[left.index].ids, true, false)) + " class=\"connect-box block-md block-dk\">");
jade_mixins["multi-content"]("content", rightItems[left.index]);
buf.push("</div></div></div>");
    }

  }
}).call(this);

buf.push("</div></div></div><div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"game" in locals_for_with?locals_for_with.game:typeof game!=="undefined"?game:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"leftItems" in locals_for_with?locals_for_with.leftItems:typeof leftItems!=="undefined"?leftItems:undefined,"playinline" in locals_for_with?locals_for_with.playinline:typeof playinline!=="undefined"?playinline:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"rightItems" in locals_for_with?locals_for_with.rightItems:typeof rightItems!=="undefined"?rightItems:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/connect/view.coffee", function(exports, require, module) {
var ConnectView, DraggyView, GameView, Preloader, SmoothLine, dpi,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

GameView = require("views/base/game");

DraggyView = require("views/components/draggy").DraggyView;

SmoothLine = require("lib/draw/smooth-line");

Preloader = require("lib/preload");

dpi = require("lib/device").dpi;

ConnectView = (function(superClass) {
  extend(ConnectView, superClass);

  function ConnectView() {
    return ConnectView.__super__.constructor.apply(this, arguments);
  }

  ConnectView.prototype.template = require("./template");

  ConnectView.prototype.fitTextOnResize = false;

  ConnectView.prototype.fitTextOnRender = false;

  ConnectView.prototype.events = function() {
    return {
      "iostap .btn-done": "endGame"
    };
  };

  ConnectView.prototype.serialize = function() {
    var answerIdsByContentDict, data;
    data = ConnectView.__super__.serialize.call(this);
    data.pairs = _.chain(this.options.metadata.questions).map(function(arg) {
      var answers, question;
      question = arg.question, answers = arg.answers;
      question.id = question.id || question.questionId;
      answers = _.each(answers, function(answer) {
        return answer.id = answer.id || answer.answerId;
      });
      return {
        left: question,
        right: _.find(answers, 'correct')
      };
    }).filter(function(arg) {
      var left, right;
      left = arg.left, right = arg.right;
      return left && right;
    }).value();
    answerIdsByContentDict = _.chain(this.options.metadata.questions).map(function(arg) {
      var answers;
      answers = arg.answers;
      return answers;
    }).flatten().groupBy(function(i) {
      return i.content;
    }).mapObject(function(answers) {
      return _.pluck(answers, 'id');
    }).value();
    data.leftItems = _.chain(data.pairs).pluck('left').map(function(arg, index) {
      var content, id, type;
      content = arg.content, type = arg.type, id = arg.id;
      return {
        content: content,
        contentType: type,
        index: index,
        id: id
      };
    }).shuffle().value();
    data.rightItems = _.chain(data.pairs).pluck('right').map(function(arg, index) {
      var content, type;
      content = arg.content, type = arg.type;
      return {
        content: content,
        contentType: type,
        index: index,
        ids: answerIdsByContentDict[content]
      };
    }).shuffle().value();
    return data;
  };

  ConnectView.prototype.show = function() {
    var base, base1, el, j, len, ref;
    ConnectView.__super__.show.apply(this, arguments);
    this.setEl(this.findAll(".connect-box"), "boxes");
    this.draggy = new DraggyView({
      el: this.findOne("canvas"),
      isParent: true
    });
    this.context = (typeof (base = this.draggy.el).getContext === "function" ? base.getContext("2d") : void 0) || {};
    this.listenTo(this.draggy, "drag", this.onDrag);
    this.listenTo(this.draggy, "drop", this.onDrop);
    this.listenTo(this, "resize", this.onResize);
    this.onResize();
    this.pairs = [];
    if (typeof (base1 = this.context).clearRect === "function") {
      base1.clearRect(0, 0, this.draggy.el.width, this.draggy.el.height);
    }
    ref = this.getEl("boxes");
    for (j = 0, len = ref.length; j < len; j++) {
      el = ref[j];
      el.classList.remove("active", "complete");
    }
    return this.enterGame();
  };

  ConnectView.prototype.onRefresh = function() {
    var el, j, len, ref, results;
    ConnectView.__super__.onRefresh.apply(this, arguments);
    ref = this.getEl("boxes") || [];
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      el = ref[j];
      el.style.height = "";
      results.push(el.offsetHeight);
    }
    return results;
  };

  ConnectView.prototype.onResize = function(done) {
    var el, images, j, len, ref, ref1, ref2;
    if ((ref = this.findOne(".content-fit")) != null) {
      ref.style.fontSize = "";
    }
    ref1 = this.getEl("boxes");
    for (j = 0, len = ref1.length; j < len; j++) {
      el = ref1[j];
      el.style.height = "";
    }
    if (!((ref2 = this.currentState) != null ? ref2.refresh : void 0)) {
      this.el.classList.remove("active");
    }
    images = this.findAll("img");
    return Preloader.load(_.pluck(images, "src"), (function(_this) {
      return function(errors) {
        var fontSize, height, k, len1, ref3, ref4;
        if (errors == null) {
          errors = [];
        }
        fontSize = parseInt(window.getComputedStyle(_this.el).fontSize);
        height = _.reduce(_this.getEl("boxes"), function(m, el) {
          if (el.offsetHeight > m) {
            return el.offsetHeight;
          } else {
            return m;
          }
        }, 0);
        ref3 = _this.getEl("boxes");
        for (k = 0, len1 = ref3.length; k < len1; k++) {
          el = ref3[k];
          el.style.height = height / fontSize + "em";
          el.classList.remove("active");
        }
        if (el = (ref4 = _this.draggy) != null ? ref4.el : void 0) {
          el.width = _this.el.firstChild.offsetWidth * dpi;
          el.height = _this.el.firstChild.offsetHeight * dpi;
        }
        return _this.fitText(function() {
          return window.setTimeout((function() {
            return _this.el.classList.add("active");
          }), 300);
        });
      };
    })(this));
  };

  ConnectView.prototype.onDrag = function(draggy, isInitial) {
    var bounds, el, i, isWithin, j, k, left, len, len1, ref, ref1, ref2, ref3, ref4, top;
    window.clearTimeout(this.timeout);
    ref = this.getBounds(this.el.firstChild), left = ref.left, top = ref.top;
    if (isInitial) {
      if ((ref1 = this.line) != null) {
        if ((ref2 = ref1.animation) != null) {
          ref2.cancel();
        }
      }
      this.context.lineCap = "round";
      this.context.globalAlpha = 1;
      this.line = new SmoothLine([], window.getComputedStyle(this.el).color, 4 * dpi);
      this.activeBox = null;
      ref3 = this.getEl("boxes");
      for (i = j = 0, len = ref3.length; j < len; i = ++j) {
        el = ref3[i];
        bounds = this.getBounds(el, {
          x: -left,
          y: -top
        });
        isWithin = draggy.isWithin(bounds, 0);
        el.classList.toggle("active", isWithin);
        if (isWithin) {
          el.classList.remove("complete");
          this.activeBox = el;
          this.removeActivePairs(el);
        }
      }
    } else if (this.activeBox) {
      ref4 = this.getEl("boxes");
      for (k = 0, len1 = ref4.length; k < len1; k++) {
        el = ref4[k];
        if (el !== this.activeBox && el.dataset.type !== this.activeBox.dataset.type) {
          bounds = this.getBounds(el, {
            x: -left,
            y: -top
          });
          isWithin = draggy.isWithin(bounds, 0);
          el.classList.toggle("active", isWithin);
        }
      }
    }
    return this.addPoint(draggy);
  };

  ConnectView.prototype.onDrop = function() {
    var active, b, el, j, k, len, len1;
    active = (function() {
      var j, len, ref, results;
      ref = this.getEl("boxes");
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        b = ref[j];
        if (b.classList.contains("active")) {
          results.push(b);
        }
      }
      return results;
    }).call(this);
    if (active.length === 2) {
      for (j = 0, len = active.length; j < len; j++) {
        el = active[j];
        el.classList.add("complete");
        this.removeActivePairs(el);
      }
      this.pairs.push({
        active: active,
        line: new SmoothLine(this.line.getPoints(), "rgba(0,0,0,.25)", 8 * dpi)
      });
    }
    for (k = 0, len1 = active.length; k < len1; k++) {
      el = active[k];
      el.classList.remove("active");
    }
    this.line.erase(this.context, (function(_this) {
      return function() {
        var l, len2, line, ref, results;
        _this.context.clearRect(0, 0, _this.draggy.el.width, _this.draggy.el.height);
        _this.context.globalAlpha = 1;
        ref = _this.pairs;
        results = [];
        for (l = 0, len2 = ref.length; l < len2; l++) {
          line = ref[l].line;
          results.push(line.draw(_this.context));
        }
        return results;
      };
    })(this));
    if (this.pairs.length === this.options.data.pairs.length) {
      return this.setState("touched");
    } else {
      return this.setState("prompt");
    }
  };

  ConnectView.prototype.removeActivePairs = function(el) {
    var active, j, len, pair, ref, results;
    ref = this.pairs;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      pair = ref[j];
      if (_.include(pair.active, el)) {
        this.pairs = _.without(this.pairs, pair);
        results.push((function() {
          var k, len1, ref1, results1;
          ref1 = pair.active;
          results1 = [];
          for (k = 0, len1 = ref1.length; k < len1; k++) {
            active = ref1[k];
            if (active !== el) {
              results1.push(active.classList.remove("complete"));
            }
          }
          return results1;
        })());
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  ConnectView.prototype.addPoint = function(arg) {
    var x, y;
    x = arg.x, y = arg.y;
    this.line.add({
      x: x * dpi,
      y: y * dpi
    });
    return this.drawLines();
  };

  ConnectView.prototype.drawLines = function() {
    var j, len, line, ref;
    this.draggy.el.offsetHeight;
    this.context.clearRect(0, 0, this.draggy.el.width, this.draggy.el.height);
    ref = this.pairs;
    for (j = 0, len = ref.length; j < len; j++) {
      line = ref[j].line;
      line.draw(this.context);
    }
    return this.line.draw(this.context);
  };

  ConnectView.prototype.showAnswer = function() {
    var isIncorrect, j, left, len, ref, ref1, results, right;
    ref = this.pairs;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      ref1 = ref[j].active, left = ref1[0], right = ref1[1];
      isIncorrect = !this.isMatch(left, right);
      left.classList.toggle("incorrect", isIncorrect);
      results.push(right.classList.toggle("incorrect", isIncorrect));
    }
    return results;
  };

  ConnectView.prototype.isCorrect = function() {
    var correct;
    correct = _.filter(this.pairs, (function(_this) {
      return function(arg) {
        var left, ref, right;
        ref = arg.active, left = ref[0], right = ref[1];
        return _this.isMatch(left, right);
      };
    })(this));
    return correct.length === this.options.data.pairs.length;
  };

  ConnectView.prototype.getQuestionAnswerFromInput = function(questions) {
    return function(els) {
      var answer, answerIds, answers, question, questionId, questionsById, ref, ref1;
      questionsById = _.indexBy(questions, function(arg) {
        var question;
        question = arg.question;
        return question.id;
      });
      questionId = (ref = _.find(els, (function(e) {
        return e.dataset.questionId;
      })).dataset) != null ? ref.questionId : void 0;
      answerIds = JSON.parse(_.find(els, (function(e) {
        return e.dataset.answerIds;
      })).dataset.answerIds);
      ref1 = questionsById[questionId], question = ref1.question, answers = ref1.answers;
      answer = _.find(answers, function(arg) {
        var id;
        id = arg.id;
        return indexOf.call(answerIds, id) >= 0;
      });
      return {
        question: question,
        answer: answer
      };
    };
  };

  ConnectView.prototype.isMatch = function(left, right) {
    var answer, ref;
    answer = this.getQuestionAnswerFromInput((ref = this.options.metadata) != null ? ref.questions : void 0)([left, right]).answer;
    return answer != null ? answer.correct : void 0;
  };

  ConnectView.prototype.answerDetails = function() {
    var getQuestionAnswerFromInput, questions, ref;
    questions = ((ref = this.options.metadata) != null ? ref.questions : void 0) || [];
    if (!(questions.length > 0)) {
      return [];
    }
    getQuestionAnswerFromInput = this.getQuestionAnswerFromInput(questions);
    return _.chain(this.pairs).map((function(_this) {
      return function(arg) {
        var active;
        active = arg.active;
        return getQuestionAnswerFromInput(active);
      };
    })(this)).filter(function(arg) {
      var answer, question;
      question = arg.question, answer = arg.answer;
      return question && answer;
    }).value();
  };

  ConnectView.prototype.endGame = function() {
    ConnectView.__super__.endGame.apply(this, arguments);
    return this.submit();
  };

  return ConnectView;

})(GameView);

module.exports = ConnectView;
});

;require.register("engine/construct-sentence/model.yaml", function(exports, require, module) {
module.exports = {"title":"construct-sentence","display":"Sentence Construction","category":"Concepts","features":{"stars":true,"social":true},"model":{"title":{"type":"html","default":"Select the missing words in this sentence"},"decoys":{"min":0,"max":3,"type":[{"type":"html","default":""}]},"answer":{"text":{"type":"html","default":"","display":"Answer Text"},"correct":{"type":"html","default":"That's correct!","display":"Correct Reinforcement"},"incorrect":{"type":"html","default":"Not quite...","display":"Incorrect Reinforcement"},"takeaway":{"type":"html","default":"","display":"Core Message"}},"game":{"timer":{"limit":{"type":"number","default":-1,"display":"Time Limit (seconds)"},"out-of-time-prompt":{"type":"html","display":"Out of time prompt"}}},"prompt":{"type":"html","default":"Drag the words into order"},"doneText":{"type":"html","default":"Continue","display":"Done text"}},"examples":[{"subtype":"construct-sentence","title":"Fill in the important information about Product X","decoys":["Y"],"answer":{"text":"Reinforce concepts by constructing the sentence in order."}}]}
});

;require.register("engine/construct-sentence/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (continueBtnText, doneText, game, hasNarration, hasPrompt, i18n, prompt, submitUp, undefined, words) {
if ( game && game.timer && game.timer.limit > 0 && !game.timer.isDisabled)
{
buf.push("<div class=\"full-screen\"><div class=\"game-stepper text-lg text-bold\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div></div>");
}
buf.push("<div class=\"content-fill\"><div class=\"content-fit text-center block-v-md content-ver\"><div class=\"row fade-in\"><div class=\"col-lg-10 col-lg-offset-1 col-sm-12\"><div class=\"block-v-md block-box-sizing\"><div class=\"block-dk content-fill block-sm\"><div class=\"droppy-container content-fill\"><div class=\"droppy-placeholder block-sm\"><div class=\"block-dk content-fill\"></div></div></div></div></div><div class=\"block-v-md block-box-sizing\"><div class=\"draggy-container block-dk content-fill block-sm\">");
// iterate words 
;(function(){
  var $$obj = words ;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var component = $$obj[i];

buf.push("<div" + (jade.attr("data-word", component.word, true, false)) + (jade.attr("data-index", component.index, true, false)) + " class=\"draggy block-sm block-inline\"><div" + (jade.cls(['btn','btn-sm','btn-solid','slide-up',"delay-" + (i) + ""], [null,null,null,null,true])) + ">" + (null == (jade_interp = component.word) ? "" : jade_interp) + "</div></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var component = $$obj[i];

buf.push("<div" + (jade.attr("data-word", component.word, true, false)) + (jade.attr("data-index", component.index, true, false)) + " class=\"draggy block-sm block-inline\"><div" + (jade.cls(['btn','btn-sm','btn-solid','slide-up',"delay-" + (i) + ""], [null,null,null,null,true])) + ">" + (null == (jade_interp = component.word) ? "" : jade_interp) + "</div></div>");
    }

  }
}).call(this);

buf.push("</div></div></div></div></div></div><div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"game" in locals_for_with?locals_for_with.game:typeof game!=="undefined"?game:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined,"words" in locals_for_with?locals_for_with.words:typeof words!=="undefined"?words:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/construct-sentence/view.coffee", function(exports, require, module) {
var ConstructSentenceView, DraggyView, GameView, convert,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

GameView = require("views/base/game");

DraggyView = require("views/components/draggy").DraggyView;

convert = require("lib/convert");

ConstructSentenceView = (function(superClass) {
  extend(ConstructSentenceView, superClass);

  function ConstructSentenceView() {
    return ConstructSentenceView.__super__.constructor.apply(this, arguments);
  }

  ConstructSentenceView.prototype.template = require("./template");

  ConstructSentenceView.prototype.fitTextOnRender = false;

  ConstructSentenceView.prototype.fitTextOnResize = false;

  ConstructSentenceView.prototype.events = {
    "iostap .btn-done": "endGame"
  };

  ConstructSentenceView.prototype.initialize = function() {
    ConstructSentenceView.__super__.initialize.apply(this, arguments);
    return this.orderedDraggy != null ? this.orderedDraggy : this.orderedDraggy = [];
  };

  ConstructSentenceView.prototype.serialize = function() {
    var data, decoys, index, ref, title, word;
    data = ConstructSentenceView.__super__.serialize.call(this);
    title = data.title, decoys = data.decoys;
    title = convert.toText(title);
    this.words = title.trim().split(" ");
    if (decoys == null) {
      decoys = [];
    }
    data.words = (function() {
      var j, len, ref, results;
      ref = this.words;
      results = [];
      for (index = j = 0, len = ref.length; j < len; index = ++j) {
        word = ref[index];
        results.push({
          word: word,
          index: index
        });
      }
      return results;
    }).call(this);
    data.words = (ref = data.words).concat.apply(ref, (function() {
      var j, len, results;
      results = [];
      for (j = 0, len = decoys.length; j < len; j++) {
        word = decoys[j];
        results.push({
          word: word,
          index: -1
        });
      }
      return results;
    })());
    data.words = _.shuffle(data.words);
    return data;
  };

  ConstructSentenceView.prototype.beforeShow = function() {
    return this.sizeDroppyContainer();
  };

  ConstructSentenceView.prototype.show = function() {
    ConstructSentenceView.__super__.show.call(this);
    this.el.classList.remove("active");
    return this.fitText((function(_this) {
      return function() {
        var draggy, draggyEl, el, i;
        draggyEl = _this.findOne(".draggy-container");
        _this.draggies = (function() {
          var j, len, ref, results;
          ref = this.findAll(".draggy");
          results = [];
          for (i = j = 0, len = ref.length; j < len; i = ++j) {
            el = ref[i];
            draggy = new DraggyView({
              el: el
            });
            this.listenTo(draggy, "drag", this.onDrag);
            this.listenTo(draggy, "drop", this.onDrop);
            results.push(draggy);
          }
          return results;
        }).call(_this);
        _this.resetDraggies();
        _this.listenTo(_this, "resize", _this.onResize);
        _this.enterGame();
        return window.setTimeout((function() {
          return _this.el.classList.add("active");
        }), 300);
      };
    })(this));
  };

  ConstructSentenceView.prototype.onRefresh = function() {
    this.beforeShow();
    return ConstructSentenceView.__super__.onRefresh.call(this);
  };

  ConstructSentenceView.prototype.onDrag = function(draggy, isInitialDrag) {
    var child, isWithin;
    if (isInitialDrag) {
      this.droppy.bounds = this.droppy.el.getBoundingClientRect();
      draggy.el.className = draggy.el.className.replace(/delay-\d/, "");
      child = draggy.el.firstChild;
      this.droppy.placeholder.style.width = child.offsetWidth + "px";
      this.droppy.placeholder.style.height = child.offsetHeight + "px";
    }
    if (isWithin = draggy.isWithin(this.droppy.bounds, 60)) {
      draggy.isPositioned = true;
      this.droppy.el.classList.add("active");
      this.droppy.placeholder.classList.add("active");
    } else {
      draggy.isPositioned = false;
      this.droppy.el.classList.remove("active");
      this.droppy.placeholder.classList.remove("active");
    }
    return this.transform(draggy.el, {
      x: draggy.x,
      y: draggy.y,
      transition: isInitialDrag ? "all 300ms" : "none"
    });
  };

  ConstructSentenceView.prototype.onDrop = function(draggy, isReset) {
    if (!isReset) {
      this.droppy.placeholder.classList.remove("active");
      this.setState("touched");
      if (draggy.isPositioned) {
        this.orderedDraggy = this.draggiesInOrder();
        this.rearrangeDraggies(this.orderedDraggy);
      } else {
        draggy.reset({
          x: 0,
          y: 0
        });
      }
    }
    return this.transform(draggy.el, {
      x: draggy.x,
      y: draggy.y,
      transition: "all 300ms"
    });
  };

  ConstructSentenceView.prototype.rearrangeDraggies = function(order, activeDraggy) {
    var draggy, i, j, len, offsetX, offsetY, ref, results, width, x, y;
    width = this.droppy.bounds.width;
    offsetX = 0;
    offsetY = 0;
    results = [];
    for (i = j = 0, len = order.length; j < len; i = ++j) {
      draggy = order[i];
      x = -draggy.offset.left + offsetX + this.droppy.bounds.left;
      y = -draggy.offset.top + offsetY + this.droppy.bounds.top;
      if (this.options.config().direction === "rtl") {
        x = -draggy.offset.right - offsetX + this.droppy.bounds.right;
      }
      if ((draggy.x !== x || draggy.y !== y) && draggy !== activeDraggy) {
        draggy.setPosition({
          x: x,
          y: y
        });
        this.transform(draggy.el, {
          x: x,
          y: y
        });
      }
      if (draggy === activeDraggy) {
        x = offsetX;
        y = offsetY;
        if (this.options.config().direction === "rtl") {
          x = width - x - this.droppy.placeholder.offsetWidth;
        }
        this.transform(this.droppy.placeholder, {
          x: x,
          y: y
        });
      }
      offsetX += draggy.offset.width;
      if (offsetX >= width - (((ref = order[i + 1]) != null ? ref.offset.width : void 0) || 0)) {
        offsetX = 0;
        results.push(offsetY += draggy.offset.height);
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  ConstructSentenceView.prototype.draggiesInOrder = function() {
    var height, ref, top, width;
    ref = this.droppy.bounds, width = ref.width, height = ref.height, top = ref.top;
    return _.chain(this.draggies).where({
      isPositioned: true
    }).groupBy(function(d) {
      return Math.floor(Math.max(d.y + d.offset.top, top) / d.offset.height);
    }).map((function(_this) {
      return function(group, key) {
        return group.sort(function(a, b) {
          var d;
          d = _this.options.config().direction === "rtl" ? -1 : 1;
          return (a.offset.left + (a.x + a.offset.width / 2)) * d - (b.offset.left + (b.x + b.offset.width / 2)) * d;
        });
      };
    })(this)).flatten().value();
  };

  ConstructSentenceView.prototype.showAnswer = function() {
    var clone, d, decoys, j, kindOrder, len, ref, results;
    decoys = _.filter(this.draggies, function(d) {
      return +(d != null ? d.el.dataset.index : void 0) < 0;
    });
    clone = _.clone(this.words);
    kindOrder = (ref = _.chain(this.draggiesInOrder()).union(this.draggies)).without.apply(ref, decoys).uniq().map(function(d, i) {
      var index;
      index = clone.indexOf(d.el.dataset.word);
      clone[index] = void 0;
      return {
        draggy: d,
        index: index
      };
    }).sortBy("index").pluck("draggy").value();
    this.rearrangeDraggies(kindOrder);
    results = [];
    for (j = 0, len = decoys.length; j < len; j++) {
      d = decoys[j];
      results.push(d.reset({
        x: 0,
        y: 0
      }));
    }
    return results;
  };

  ConstructSentenceView.prototype.onResize = function() {
    return window.setTimeout((function(_this) {
      return function() {
        _this.sizeDroppyContainer();
        return _this.resetDraggies();
      };
    })(this), 300);
  };

  ConstructSentenceView.prototype.sizeDroppyContainer = function() {
    var draggyEl, droppyEl;
    draggyEl = this.findOne(".draggy-container");
    droppyEl = this.findOne(".droppy-container");
    droppyEl.style.height = (this.el.parentElement.offsetHeight / 2) + "px";
    return this.droppy = {
      el: droppyEl,
      placeholder: this.findOne(".droppy-placeholder")
    };
  };

  ConstructSentenceView.prototype.resetDraggies = function() {
    var d, j, len, ref;
    if (this.draggies && this.droppy) {
      this.droppy.bounds = this.droppy.el.getBoundingClientRect();
      ref = this.draggies;
      for (j = 0, len = ref.length; j < len; j++) {
        d = ref[j];
        d.getOffset();
      }
      return this.rearrangeDraggies(this.orderedDraggy);
    }
  };

  ConstructSentenceView.prototype.isCorrect = function() {
    var correct, inOrder, isCorrect;
    correct = _.filter(this.draggies, function(d) {
      return +(d != null ? d.el.dataset.index : void 0) >= 0;
    });
    inOrder = this.draggiesInOrder();
    isCorrect = false;
    if (inOrder.length === correct.length) {
      isCorrect = this.words.every((function(_this) {
        return function(word, i) {
          return word === inOrder[i].el.dataset.word;
        };
      })(this));
    }
    return isCorrect;
  };

  ConstructSentenceView.prototype.answerDetails = function() {
    var answer, details, isCorrect, questions, wordsInOrder;
    questions = this.options.metadata.questions || [];
    if (!(questions.length > 0)) {
      return [];
    }
    wordsInOrder = _.map(this.draggiesInOrder(), function(draggy) {
      return draggy.$el.text();
    });
    isCorrect = this.isCorrect();
    answer = _.find(questions[0].answers, function(a) {
      return a.correct === isCorrect;
    });
    answer.content = wordsInOrder.join(" ");
    details = {
      question: questions[0].question,
      answer: answer
    };
    return [details];
  };

  ConstructSentenceView.prototype.endGame = function() {
    ConstructSentenceView.__super__.endGame.call(this);
    return this.submit();
  };

  return ConstructSentenceView;

})(GameView);

module.exports = ConstructSentenceView;
});

;require.register("engine/construct/components/letters.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (undefined, word) {
buf.push("<div class=\"block-md block-dk\">");
// iterate word
;(function(){
  var $$obj = word;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var letter = $$obj[$index];

buf.push("<div" + (jade.attr("data-letter", letter.toLowerCase(), true, false)) + " class=\"letter btn btn-solid\">" + (null == (jade_interp = letter) ? "" : jade_interp) + "</div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var letter = $$obj[$index];

buf.push("<div" + (jade.attr("data-letter", letter.toLowerCase(), true, false)) + " class=\"letter btn btn-solid\">" + (null == (jade_interp = letter) ? "" : jade_interp) + "</div>");
    }

  }
}).call(this);

buf.push("</div>");}.call(this,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined,"word" in locals_for_with?locals_for_with.word:typeof word!=="undefined"?word:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/construct/model.yaml", function(exports, require, module) {
module.exports = {"title":"construct","display":"Word Construction","category":"Concepts","features":{"stars":true,"social":true},"model":{"title":{"type":"html","default":""},"words":{"min":1,"max":8,"type":[{"type":"html"}]},"answer":{"text":{"type":"html","default":"","display":"Answer Text"},"correct":{"type":"html","default":"That's correct!","display":"Correct Reinforcement"},"incorrect":{"type":"html","default":"Not quite...","display":"Incorrect Reinforcement"},"takeaway":{"type":"html","default":"","display":"Core Message"}},"game":{"timer":{"limit":{"type":"number","default":-1,"display":"Time Limit (seconds)"},"out-of-time-prompt":{"type":"html","display":"Out of time prompt"}}},"prompt":{"type":"html","default":"Fill in the missing words"},"doneText":{"type":"html","default":"Continue","display":"Done text"}},"examples":[{"subtype":"construct-two-words","title":"Fill in the missing words in this sentence.","subtitle":"","prompt":"Fill in the missing words","words":["missing","this"]}]}
});

;require.register("engine/construct/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (components, continueBtnText, doneText, game, hasNarration, hasPrompt, i18n, prompt, submitUp, titleClass, undefined) {
if ( game && game.timer && game.timer.limit > 0 && !game.timer.isDisabled)
{
buf.push("<div class=\"full-screen\"><div class=\"game-stepper text-lg text-bold\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div></div>");
}
buf.push("<div class=\"content-fill\"><div class=\"content-md-fill content-sm-ver text-center content-fit\"><div class=\"row content-md-ver\"><div class=\"col-sm-12 col-md-10 col-md-offset-1 col-lg-12 col-lg-offset-0\"><h1" + (jade.cls(['statement','fade-in',titleClass], [null,null,true])) + ">");
// iterate components
;(function(){
  var $$obj = components;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var component = $$obj[i];

if ( component.hidden)
{
buf.push("<span" + (jade.attr("data-word", component.word.replace(/[\s\.\,]/g, ""), true, false)) + " data-guess=\"\" class=\"word-hidden\">");
// iterate component.word
;(function(){
  var $$obj = component.word;
  if ('number' == typeof $$obj.length) {

    for (var j = 0, $$l = $$obj.length; j < $$l; j++) {
      var letter = $$obj[j];

if ( letter.match(/[\s\.\,]/g))
{
buf.push(jade.escape(null == (jade_interp = letter) ? "" : jade_interp));
}
else
{
buf.push("<span" + (jade.attr("data-letter", letter.toLowerCase(), true, false)) + " class=\"blank hidden-letter\"><span class=\"letter-inner\">" + (jade.escape(null == (jade_interp = letter) ? "" : jade_interp)) + "</span></span>");
}
    }

  } else {
    var $$l = 0;
    for (var j in $$obj) {
      $$l++;      var letter = $$obj[j];

if ( letter.match(/[\s\.\,]/g))
{
buf.push(jade.escape(null == (jade_interp = letter) ? "" : jade_interp));
}
else
{
buf.push("<span" + (jade.attr("data-letter", letter.toLowerCase(), true, false)) + " class=\"blank hidden-letter\"><span class=\"letter-inner\">" + (jade.escape(null == (jade_interp = letter) ? "" : jade_interp)) + "</span></span>");
}
    }

  }
}).call(this);

buf.push("</span>");
}
else
{
buf.push("<span" + (jade.cls(['word',component.klass], [null,true])) + ">" + (null == (jade_interp = component.word) ? "" : jade_interp) + "</span>");
}
buf.push(jade.escape(null == (jade_interp = " ") ? "" : jade_interp));
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var component = $$obj[i];

if ( component.hidden)
{
buf.push("<span" + (jade.attr("data-word", component.word.replace(/[\s\.\,]/g, ""), true, false)) + " data-guess=\"\" class=\"word-hidden\">");
// iterate component.word
;(function(){
  var $$obj = component.word;
  if ('number' == typeof $$obj.length) {

    for (var j = 0, $$l = $$obj.length; j < $$l; j++) {
      var letter = $$obj[j];

if ( letter.match(/[\s\.\,]/g))
{
buf.push(jade.escape(null == (jade_interp = letter) ? "" : jade_interp));
}
else
{
buf.push("<span" + (jade.attr("data-letter", letter.toLowerCase(), true, false)) + " class=\"blank hidden-letter\"><span class=\"letter-inner\">" + (jade.escape(null == (jade_interp = letter) ? "" : jade_interp)) + "</span></span>");
}
    }

  } else {
    var $$l = 0;
    for (var j in $$obj) {
      $$l++;      var letter = $$obj[j];

if ( letter.match(/[\s\.\,]/g))
{
buf.push(jade.escape(null == (jade_interp = letter) ? "" : jade_interp));
}
else
{
buf.push("<span" + (jade.attr("data-letter", letter.toLowerCase(), true, false)) + " class=\"blank hidden-letter\"><span class=\"letter-inner\">" + (jade.escape(null == (jade_interp = letter) ? "" : jade_interp)) + "</span></span>");
}
    }

  }
}).call(this);

buf.push("</span>");
}
else
{
buf.push("<span" + (jade.cls(['word',component.klass], [null,true])) + ">" + (null == (jade_interp = component.word) ? "" : jade_interp) + "</span>");
}
buf.push(jade.escape(null == (jade_interp = " ") ? "" : jade_interp));
    }

  }
}).call(this);

buf.push("</h1></div></div></div><div class=\"word-letters block-xl\"></div></div><div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"components" in locals_for_with?locals_for_with.components:typeof components!=="undefined"?components:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"game" in locals_for_with?locals_for_with.game:typeof game!=="undefined"?game:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"titleClass" in locals_for_with?locals_for_with.titleClass:typeof titleClass!=="undefined"?titleClass:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/construct/view.coffee", function(exports, require, module) {
var ConstructView, GameView, convert, theAlphabet, theNumerals,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

GameView = require("views/base/game");

convert = require("lib/convert");

theAlphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".split("");

theNumerals = "0123456789".split("");

ConstructView = (function(superClass) {
  extend(ConstructView, superClass);

  function ConstructView() {
    return ConstructView.__super__.constructor.apply(this, arguments);
  }

  ConstructView.prototype.template = require("./template");

  ConstructView.prototype.templates = {
    letters: require("./components/letters")
  };

  ConstructView.prototype.events = function() {
    return {
      "iostap .letter": "onTapLetter",
      "iostap .word-hidden": "activateWord",
      "iostap .word-letters": "selectContainer",
      "iostap .btn-done": "endGame",
      "iostap": "deactivateWord"
    };
  };

  ConstructView.prototype.show = function() {
    ConstructView.__super__.show.apply(this, arguments);
    this.setEl(this.findOne(".word-letters"), "letters");
    this.setEl(this.findOne(".statement"), "statement");
    this.setEl(this.findAll(".word-hidden"), "words");
    this.enterGame();
    this.listenTo(this, "resize", this.onResize);
    return this.listenTo(this, "keypress", this.onKeyPress);
  };

  ConstructView.prototype.onResize = function() {
    var el, hyphen, j, k, l, len, len1, len2, next, offsetTop, ref, ref1, ref2, results, width, word;
    ref = this.findAll(".hyphen");
    for (j = 0, len = ref.length; j < len; j++) {
      el = ref[j];
      el.parentNode.removeChild(el);
    }
    hyphen = function() {
      el = document.createElement("span");
      el.classList.add("hyphen");
      el.innerHTML = "-";
      return el;
    };
    width = this.getEl("statement").offsetWidth;
    ref1 = this.getEl("words");
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      word = ref1[k];
      word.classList.remove("break");
    }
    ref2 = this.getEl("words");
    results = [];
    for (l = 0, len2 = ref2.length; l < len2; l++) {
      word = ref2[l];
      if (!(word.offsetWidth > width)) {
        continue;
      }
      word.classList.add("break");
      offsetTop = word.children[0].offsetTop;
      results.push((function() {
        var len3, m, ref3, results1;
        ref3 = word.children;
        results1 = [];
        for (m = 0, len3 = ref3.length; m < len3; m++) {
          next = ref3[m];
          if (next.offsetTop > offsetTop) {
            next.insertAdjacentElement("beforeBegin", hyphen());
          }
          results1.push(offsetTop = next.offsetTop);
        }
        return results1;
      })());
    }
    return results;
  };

  ConstructView.prototype.serialize = function() {
    var component, data, escapedWord, filteredWords, i, index, length, rx, title, word, words;
    data = ConstructView.__super__.serialize.apply(this, arguments);
    title = data.title, words = data.words;
    title = convert.toText(title || "");
    filteredWords = _.filter(words, function(item) {
      return item !== "";
    });
    words = (function() {
      var j, len, results;
      results = [];
      for (i = j = 0, len = filteredWords.length; j < len; i = ++j) {
        word = filteredWords[i];
        escapedWord = word.replace(/\W/g, (function(w) {
          return "\\" + w;
        }));
        word = convert.toText(word);
        rx = new RegExp("([^A-Z]|^)" + escapedWord + "([^A-Z]|$)", "i");
        if (title.match(rx) != null) {
          title = title.replace(rx, " {{" + i + "}} ");
          results.push(word);
        } else {
          results.push(void 0);
        }
      }
      return results;
    })();
    length = title.length;
    data.titleClass = length > 120 ? "text-lg" : "";
    data.components = (function() {
      var j, len, ref, ref1, results;
      ref = title.trim().split(" ");
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        component = ref[j];
        index = +((ref1 = component.match(/\{\{(\d+)\}\}/)) != null ? ref1[1] : void 0);
        results.push({
          klass: "delay-" + (_.random(3)) + " scale-" + (_.sample(["down", "up"])),
          word: component.replace(/\{\{(\d+)\}\}/, words[index] || ""),
          hidden: words[index] != null
        });
      }
      return results;
    })();
    return data;
  };

  ConstructView.prototype.selectContainer = function(e) {
    return e.stopImmediatePropagation();
  };

  ConstructView.prototype.deactivateWord = function(e) {
    var activeEl, el, j, len, ref;
    if (activeEl = this.getEl("active")) {
      ref = [activeEl, activeEl.querySelector(".active")];
      for (j = 0, len = ref.length; j < len; j++) {
        el = ref[j];
        if (el != null) {
          el.classList.remove("active");
        }
      }
      this.elements.active = null;
      this.getEl("letters").classList.remove("active");
      window.clearTimeout(this.timeout);
      return this.timeout = window.setTimeout((function(_this) {
        return function() {
          return _this.transform(_this.getEl("statement"), {
            y: 0
          });
        };
      })(this), 150);
    }
  };

  ConstructView.prototype.activateWord = function(e, el) {
    var extra, letters, mixed, word;
    if (e != null) {
      e.stopImmediatePropagation();
    }
    if (el == null) {
      el = e.currentTarget;
    }
    if (el === this.getEl("active")) {
      return;
    }
    this.deactivateWord();
    this.setEl(el, "active");
    el.classList.add("active");
    this.activateNextLetter(el.dataset.guess.length);
    word = el.dataset.word.slice(el.dataset.guess.length);
    if (word.match(/^\d+$/)) {
      extra = theNumerals;
    } else if (word.match(/\w/)) {
      extra = theAlphabet;
    } else {
      extra = word;
    }
    letters = word.split("");
    extra = _.sample(extra, _.random(1, 3));
    mixed = _.shuffle(letters.concat(extra));
    window.clearTimeout(this.timeout);
    return this.timeout = window.setTimeout((function(_this) {
      return function() {
        var offset;
        _this.getEl("letters").innerHTML = _this.templates.letters({
          word: mixed
        });
        offset = _this.getEl("letters").firstChild.offsetHeight / 2;
        _this.transform(_this.getEl("statement"), {
          y: -offset
        });
        return _this.getEl("letters").classList.add("active");
      };
    })(this), 300);
  };

  ConstructView.prototype.onKeyPress = function(e) {
    var el, j, len, ref, results;
    ref = this.getEl("letters").querySelectorAll(".letter");
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      el = ref[j];
      if (!el.classList.contains("disabled") && el.dataset.letter.toLowerCase() === e.key.toLowerCase()) {
        this.selectLetter(e.key, el);
        break;
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  ConstructView.prototype.onTapLetter = function(e) {
    var el;
    e.stopImmediatePropagation();
    el = e.currentTarget;
    return this.selectLetter(el.dataset.letter, el);
  };

  ConstructView.prototype.selectLetter = function(letter, el) {
    var blanks, index, isCorrect, next;
    index = this.getEl("active").dataset.guess.length;
    blanks = this.getEl("active").querySelectorAll(".blank");
    next = blanks.item(index);
    isCorrect = el.dataset.letter === next.dataset.letter;
    if (isCorrect) {
      this.getEl("active").dataset.guess += next.dataset.letter;
    }
    if (el.dataset.letter.toLowerCase() === next.dataset.letter.toLowerCase()) {
      next.classList.add("visible");
      el.classList.add("disabled");
      this.activateNextLetter(index + 1);
    } else {
      el.classList.add("incorrect");
      window.setTimeout((function() {
        return el.classList.remove("incorrect");
      }), 300);
    }
    if (this.getEl("active").dataset.guess.length === blanks.length) {
      this.getEl("active").classList.add("disabled");
      index = _.indexOf(this.getEl("words"), this.getEl("active")) + 1;
      this.activateNextWord(index);
    }
    return this.setState("touched");
  };

  ConstructView.prototype.activateNextWord = function(index) {
    var el, hasLetters, words;
    words = this.getEl("words");
    el = words.item(index);
    hasLetters = function(el) {
      return el.querySelectorAll(".visible").length < el.dataset.word.length;
    };
    if (el && hasLetters(el)) {
      return this.activateWord(null, el);
    } else {
      this.deactivateWord();
      el = _.filter(words, hasLetters)[0];
      if (el != null) {
        return this.activateWord(null, el);
      }
    }
  };

  ConstructView.prototype.activateNextLetter = function(index) {
    var blanks, el, i, j, len, next, results;
    if (index == null) {
      index = 0;
    }
    blanks = this.getEl("active").querySelectorAll(".blank");
    next = blanks.item(index);
    results = [];
    for (i = j = 0, len = blanks.length; j < len; i = ++j) {
      el = blanks[i];
      results.push(el.classList.toggle("active", index === i));
    }
    return results;
  };

  ConstructView.prototype.isCorrect = function() {
    var total, visible;
    total = this.findAll(".blank").length;
    visible = this.findAll(".blank.visible").length;
    return total === visible;
  };

  ConstructView.prototype.answerDetails = function() {
    var answer, details, isCorrect, j, len, q, questionDetails, questions, words;
    questions = this.options.metadata.questions || [];
    if (!(questions.length > 0)) {
      return [];
    }
    details = [];
    words = this.$(".word-hidden");
    isCorrect = this.isCorrect();
    for (j = 0, len = questions.length; j < len; j++) {
      q = questions[j];
      answer = _.find(q.answers, function(a) {
        return a.correct === isCorrect;
      });
      answer.content = this.$(words[questions.indexOf(q)]).data("guess");
      questionDetails = {
        question: q.question,
        answer: answer
      };
      details.push(questionDetails);
    }
    return details;
  };

  ConstructView.prototype.endGame = function() {
    ConstructView.__super__.endGame.apply(this, arguments);
    return this.submit();
  };

  return ConstructView;

})(GameView);

module.exports = ConstructView;
});

;require.register("engine/dial-distribution/model.yaml", function(exports, require, module) {
module.exports = {"title":"dial-distribution","display":"Dial - Distribution","category":"Numbers","features":{"stars":true,"social":true},"model":{"title":{"type":"html","default":"Ask a question"},"dial":{"correct":{"type":"number"},"incorrect":{"min":1,"max":8,"type":[{"type":"number"}]},"prefix":{"type":"html","default":""},"suffix":{"type":"html","default":""}},"distribution":{"enum":["Equal","Linear","Logarithmic"],"default":"Linear","type":"text","help":"Use distribution to determine how the numbers are positioned on the dial. “Equal” spreads the options out evenly regardless of their number value, whereas “Linear” and “Logarithmic” compute the distribution based on those scales. Linear works best for equidistant numbers, where Logarithmic is best for numbers which differ by an order of magnitude.\n"},"overlap":{"type":"boolean","default":true,"display":"Overlap Extremes","help":"Display the minimum and maximum values at the same position on the dial.\n"},"answer":{"text":{"type":"html","default":"","display":"Answer Text"},"correct":{"type":"html","default":"That's correct!","display":"Correct Reinforcement"},"incorrect":{"type":"html","default":"Not quite...","display":"Incorrect Reinforcement"},"takeaway":{"type":"html","default":"","display":"Core Message"}},"game":{"timer":{"limit":{"type":"number","default":-1,"display":"Time Limit (seconds)"},"out-of-time-prompt":{"type":"html","display":"Out of time prompt"}}},"prompt":{"type":"html","default":"Drag to set the correct value"},"doneText":{"type":"html","default":"Continue","display":"Done text"}},"examples":[{"subtype":"dial-distribution","title":"How much growth has Product X seen in the last sales cycle?","dial":{"correct":37,"incorrect":[0,19,7,53,100],"prefix":"","suffix":"%"},"answer":{"text":"Product X saw a massive **37% increase in growth** during the last sales cycle\n"}}]}
});

;require.register("engine/dial-distribution/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (continueBtnText, dial, doneText, game, hasNarration, hasPrompt, i18n, overlap, prompt, submitUp, title, undefined, values) {
if ( game && game.timer && game.timer.limit > 0 && !game.timer.isDisabled)
{
buf.push("<div class=\"full-screen\"><div class=\"game-stepper text-lg text-bold\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div></div>");
}
buf.push("<div class=\"content-fit block-v-xl content-fill\"><div class=\"row content-lg-fill content-sm-ver content-md-ver\"><div class=\"col-lg-6 col-sm-12 content-lg-ver block-v-lg block-v-lg\"><h1 class=\"text-lg-right text-center fade-in\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1></div><div class=\"col-lg-6 col-sm-12 content-lg-ver text-center block-v-lg\"><div" + (jade.cls(['dial','scale-up',overlap ? "dial-overlap" : "dial-discreet"], [null,null,true])) + "><div class=\"dial-ring\"></div><div class=\"dial-knob dial-knob-input\"><div class=\"dial-knob-value dial-knob-input-value text-lg\">" + (null == (jade_interp = i18n("dial.touch-to-rotate")) ? "" : jade_interp) + "</div></div><div class=\"dial-knob dial-knob-answer\"><div class=\"dial-knob-value dial-knob-answer-value text-lg\">" + (null == (jade_interp = dial.prefix) ? "" : jade_interp) + (null == (jade_interp = dial.correct) ? "" : jade_interp) + (null == (jade_interp = dial.suffix) ? "" : jade_interp) + "</div></div><div class=\"dial-notches\">");
// iterate values
;(function(){
  var $$obj = values;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var label = $$obj[$index];

buf.push("<div class=\"dial-notch\"></div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var label = $$obj[$index];

buf.push("<div class=\"dial-notch\"></div>");
    }

  }
}).call(this);

buf.push("</div><div class=\"dial-labels\">");
// iterate values
;(function(){
  var $$obj = values;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var label = $$obj[$index];

buf.push("<div class=\"dial-label\"><div class=\"dial-label-text\">" + (null == (jade_interp = dial.prefix) ? "" : jade_interp) + (null == (jade_interp = dial.decimals ? label.content.toFixed(dial.decimals) : label.content) ? "" : jade_interp) + (null == (jade_interp = dial.suffix) ? "" : jade_interp) + "</div></div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var label = $$obj[$index];

buf.push("<div class=\"dial-label\"><div class=\"dial-label-text\">" + (null == (jade_interp = dial.prefix) ? "" : jade_interp) + (null == (jade_interp = dial.decimals ? label.content.toFixed(dial.decimals) : label.content) ? "" : jade_interp) + (null == (jade_interp = dial.suffix) ? "" : jade_interp) + "</div></div>");
    }

  }
}).call(this);

buf.push("</div></div></div></div></div><div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"dial" in locals_for_with?locals_for_with.dial:typeof dial!=="undefined"?dial:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"game" in locals_for_with?locals_for_with.game:typeof game!=="undefined"?game:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"overlap" in locals_for_with?locals_for_with.overlap:typeof overlap!=="undefined"?overlap:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined,"values" in locals_for_with?locals_for_with.values:typeof values!=="undefined"?values:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/dial-distribution/view.coffee", function(exports, require, module) {
var DialDistributionView, DraggyView, GameView, Prefix,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

GameView = require("views/base/game");

Prefix = require("lib/prefix");

DraggyView = require("views/components/draggy").DraggyView;

DialDistributionView = (function(superClass) {
  extend(DialDistributionView, superClass);

  function DialDistributionView() {
    return DialDistributionView.__super__.constructor.apply(this, arguments);
  }

  DialDistributionView.prototype.template = require("./template");

  DialDistributionView.prototype.events = {
    "iostap .btn-done": "endGame"
  };

  DialDistributionView.prototype.serialize = function() {
    var d;
    d = DialDistributionView.__super__.serialize.apply(this, arguments);
    d.values = _.chain(d.metadata.questions[0].answers).filter(function(a) {
      return _.isNumber(a.content);
    }).map(function(a) {
      a.content = parseFloat(a.content) || 0;
      return a;
    }).sort(function(a, b) {
      return a.content - b.content;
    }).value();
    return d;
  };

  DialDistributionView.prototype.beforeShow = function() {
    this.distribution = this.getDistribution();
    this.setEl(this.findOne(".dial"), "dial");
    this.setEl(this.findOne(".dial-knob-input"), "knob-input");
    this.setEl(this.findOne(".dial-knob-input-value"), "knob-input-value");
    this.setEl(this.findOne(".dial-knob-answer"), "knob-answer");
    this.setEl(this.findOne(".dial-knob-answer-value"), "knob-answer-value");
    this.setEl(this.findOne(".dial-knob-value"), "knob-value");
    this.setEl(this.findAll(".dial-notch"), "notches");
    this.setEl(this.findAll(".dial-label"), "labels");
    this.rotateElements(this.getEl("notches"));
    return this.rotateElements(this.getEl("labels"));
  };

  DialDistributionView.prototype.onRefresh = function() {
    this.beforeShow();
    return DialDistributionView.__super__.onRefresh.apply(this, arguments);
  };

  DialDistributionView.prototype.show = function() {
    var el;
    DialDistributionView.__super__.show.apply(this, arguments);
    el = this.findOne(".content-fit");
    this.draggy = new DraggyView({
      el: this.getEl("dial"),
      radius: this.getEl("dial").offsetWidth / 2,
      isParent: true
    });
    this.listenTo(this.draggy, "drag", this.onDrag);
    this.listenTo(this.draggy, "drop", this.onDrop);
    return this.enterGame();
  };

  DialDistributionView.prototype.rotateElements = function(elements) {
    var dir, el, i, j, len, results;
    dir = this.options.config().direction === "rtl" ? -1 : 1;
    results = [];
    for (i = j = 0, len = elements.length; j < len; i = ++j) {
      el = elements[i];
      results.push(this.transform(el, {
        rotate: this.distribution[i] * 360 * dir
      }));
    }
    return results;
  };

  DialDistributionView.prototype.getDistribution = function() {
    var base, d, dist, distribution, factor, i, j, len, max, min, overlap, ref, results, v, values;
    ref = this.serialize(), values = ref.values, distribution = ref.distribution, overlap = ref.overlap;
    min = values[0].content;
    max = values[values.length - 1].content;
    dist = Math.abs(max - min);
    base = Math.log(dist) * Math.log(dist);
    factor = overlap ? 1 : 1 - 1 / values.length;
    results = [];
    for (i = j = 0, len = values.length; j < len; i = ++j) {
      v = values[i];
      switch (distribution) {
        case "Equal":
          results.push(factor * i / (values.length - 1));
          break;
        case "Linear":
          results.push(factor * (v.content - min) / dist);
          break;
        case "Logarithmic":
          d = Math.abs(v.content - min);
          if (d === 0) {
            results.push(0);
          } else {
            results.push(factor * (Math.log(d) * Math.log(dist)) / base);
          }
          break;
        default:
          results.push(void 0);
      }
    }
    return results;
  };

  DialDistributionView.prototype.onDrag = function(draggy, isInitialDrag) {
    this.currentAnswer = this.getSelectedAnswer(draggy);
    this.currentValue = this.currentAnswer.content;
    this.labelEl(this.getEl("knob-value"), this.currentValue);
    this.transform(this.getEl("knob-input"), {
      rotate: draggy.t + "rad",
      transition: isInitialDrag ? "all 300ms" : "none"
    });
    return this.transform(this.getEl("knob-input-value"), {
      x: "-50%",
      rotate: (-draggy.t) + "rad",
      transition: isInitialDrag ? "all 300ms" : "none"
    });
  };

  DialDistributionView.prototype.onDrop = function(draggy, isReset) {
    if (!isReset) {
      return draggy.reset({
        t: this.roundPos(draggy)
      });
    } else {
      this.currentAnswer = this.getSelectedAnswer(draggy);
      this.currentValue = this.currentAnswer.content;
      this.labelEl(this.getEl("knob-value"), this.currentValue);
      this.transform(this.getEl("knob-input"), {
        rotate: draggy.t + "rad",
        transition: "all 300ms"
      });
      this.transform(this.getEl("knob-input-value"), {
        x: "-50%",
        rotate: (-draggy.t) + "rad",
        transition: "all 300ms"
      });
      if (this.currentValue != null) {
        return this.setState("touched");
      }
    }
  };

  DialDistributionView.prototype.getSelectedAnswer = function(draggy) {
    var index, percent, values;
    values = this.serialize().values;
    percent = this.roundPercent(draggy);
    index = this.distribution.indexOf(percent);
    if (index === -1) {
      index = 0;
    }
    if (this.options.config().direction === "rtl") {
      return values[values.length - 1 - index];
    } else {
      return values[index];
    }
  };

  DialDistributionView.prototype.roundPos = function(draggy) {
    return (Math.PI * 2) * this.roundPercent(draggy);
  };

  DialDistributionView.prototype.roundPercent = function(draggy) {
    var length, percent, values;
    values = this.serialize().values;
    length = values.length;
    percent = _.limit(draggy.t / (Math.PI * 2), 0, 1);
    return _.nearest([1].concat(this.distribution), percent);
  };

  DialDistributionView.prototype.labelEl = function(el, value) {
    var prefix, ref, suffix;
    ref = this.options.data.dial, prefix = ref.prefix, suffix = ref.suffix;
    value = this.currentValue;
    return el.innerHTML = "" + prefix + value + suffix;
  };

  DialDistributionView.prototype.showAnswer = function() {
    this.animateAnswerKnob();
    return this.draggy.lock();
  };

  DialDistributionView.prototype.isCorrect = function() {
    return (this.currentValue != null) && this.currentValue === this.options.data.dial.correct;
  };

  DialDistributionView.prototype.animateAnswerKnob = function() {
    var correctIndex, dial, percent, ref, values;
    ref = this.serialize(), dial = ref.dial, values = ref.values;
    correctIndex = _.findIndex(values, function(v) {
      return v.correct;
    });
    percent = this.distribution[correctIndex];
    this.transform(this.getEl("knob-answer"), {
      rotate: this.draggy.t + "rad",
      transition: "none"
    });
    this.transform(this.getEl("knob-answer-value"), {
      x: "-50%",
      rotate: "-" + this.draggy.t + "rad",
      transition: "none"
    });
    this.getEl("knob-answer").offsetWidth;
    this.transform(this.getEl("knob-answer"), {
      rotate: (percent * Math.PI * 2) + "rad",
      transition: this.draggy.locked ? "none" : "all 600ms"
    });
    return this.transform(this.getEl("knob-answer-value"), {
      x: "-50%",
      rotate: "-" + (percent * Math.PI * 2) + "rad",
      transition: this.draggy.locked ? "none" : "all 600ms"
    });
  };

  DialDistributionView.prototype.answerDetails = function() {
    var question, ref, ref1;
    question = (ref = this.options.metadata) != null ? (ref1 = ref.questions) != null ? ref1[0] : void 0 : void 0;
    if (question && this.currentAnswer) {
      return [
        {
          question: question.question,
          answer: this.currentAnswer
        }
      ];
    } else {
      return [];
    }
  };

  DialDistributionView.prototype.endGame = function() {
    DialDistributionView.__super__.endGame.apply(this, arguments);
    return this.submit();
  };

  return DialDistributionView;

})(GameView);

module.exports = DialDistributionView;
});

;require.register("engine/dial/model.yaml", function(exports, require, module) {
module.exports = {"title":"dial","display":"Dial","category":"Numbers","features":{"stars":true,"social":true},"model":{"title":{"type":"html","default":"Ask a question"},"dial":{"min":{"type":"number","default":0,"display":"Min. Value"},"max":{"type":"number","default":10,"display":"Max. Value"},"prefix":{"type":"html","default":""},"suffix":{"type":"html","default":""},"increment":{"type":"number","default":1,"min":1},"labels":{"type":"int","min":0,"max":10,"default":4},"decimals":{"type":"int","min":0,"max":8,"default":0}},"answer":{"text":{"type":"html","default":"","display":"Answer Text"},"value":{"type":"number","default":5,"display":"Correct Value"},"correct":{"type":"html","default":"That's correct!","display":"Correct Reinforcement"},"incorrect":{"type":"html","default":"Not quite...","display":"Incorrect Reinforcement"},"takeaway":{"type":"html","default":"","display":"Core Message"}},"game":{"timer":{"limit":{"type":"number","default":-1,"display":"Time Limit (seconds)"},"out-of-time-prompt":{"type":"html","display":"Out of time prompt"}}},"prompt":{"type":"html","default":"Drag to set the correct value"},"doneText":{"type":"html","default":"Continue","display":"Done text"}},"examples":[{"subtype":"dial","title":"How many states have over 10% market share?","dial":{"min":0,"max":20,"labels":4,"prefix":"","suffix":""},"answer":{"value":10,"takeaway":"There are 10 states with over 10% market share","text":"We're a true market leader with 10 states.\n"}}]}
});

;require.register("engine/dial/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (Array, answer, continueBtnText, dial, doneText, game, hasNarration, hasPrompt, i18n, labelValues, notches, prompt, submitUp, title, undefined) {
if ( game && game.timer && game.timer.limit > 0 && !game.timer.isDisabled)
{
buf.push("<div class=\"full-screen\"><div class=\"game-stepper text-lg text-bold\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div></div>");
}
buf.push("<div class=\"content-fit block-v-xl content-fill\"><div class=\"row content-lg-fill content-sm-ver content-md-ver\"><div class=\"col-lg-6 col-sm-12 content-lg-ver block-v-lg block-v-lg\"><h1 class=\"text-lg-right text-center fade-in\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1></div><div class=\"col-lg-6 col-sm-12 content-lg-ver text-center block-v-lg\"><div class=\"dial scale-up\"><div class=\"dial-ring\"></div><div class=\"dial-knob dial-knob-input\"><div class=\"dial-knob-value dial-knob-input-value text-lg\">" + (null == (jade_interp = i18n("dial.touch-to-rotate")) ? "" : jade_interp) + "</div></div><div class=\"dial-knob dial-knob-answer\"><div class=\"dial-knob-value dial-knob-answer-value text-lg\">" + (null == (jade_interp = dial.prefix) ? "" : jade_interp) + (null == (jade_interp = answer.value) ? "" : jade_interp) + (null == (jade_interp = dial.suffix) ? "" : jade_interp) + "</div></div><div class=\"dial-notches\">");
// iterate new Array(notches)
;(function(){
  var $$obj = new Array(notches);
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var notch = $$obj[i];

buf.push("<div class=\"dial-notch\"></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var notch = $$obj[i];

buf.push("<div class=\"dial-notch\"></div>");
    }

  }
}).call(this);

buf.push("</div>");
if ( dial.labels)
{
buf.push("<div class=\"dial-labels\">");
// iterate labelValues
;(function(){
  var $$obj = labelValues;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var label = $$obj[$index];

buf.push("<div class=\"dial-label\"><div class=\"dial-label-text\">" + (null == (jade_interp = dial.prefix) ? "" : jade_interp) + (null == (jade_interp = dial.decimals ? label.toFixed(dial.decimals) : label) ? "" : jade_interp) + (null == (jade_interp = dial.suffix) ? "" : jade_interp) + "</div></div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var label = $$obj[$index];

buf.push("<div class=\"dial-label\"><div class=\"dial-label-text\">" + (null == (jade_interp = dial.prefix) ? "" : jade_interp) + (null == (jade_interp = dial.decimals ? label.toFixed(dial.decimals) : label) ? "" : jade_interp) + (null == (jade_interp = dial.suffix) ? "" : jade_interp) + "</div></div>");
    }

  }
}).call(this);

buf.push("</div>");
}
buf.push("</div></div></div></div><div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"Array" in locals_for_with?locals_for_with.Array:typeof Array!=="undefined"?Array:undefined,"answer" in locals_for_with?locals_for_with.answer:typeof answer!=="undefined"?answer:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"dial" in locals_for_with?locals_for_with.dial:typeof dial!=="undefined"?dial:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"game" in locals_for_with?locals_for_with.game:typeof game!=="undefined"?game:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"labelValues" in locals_for_with?locals_for_with.labelValues:typeof labelValues!=="undefined"?labelValues:undefined,"notches" in locals_for_with?locals_for_with.notches:typeof notches!=="undefined"?notches:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/dial/view.coffee", function(exports, require, module) {
var DialView, DraggyView, GameView, Prefix,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

GameView = require("views/base/game");

Prefix = require("lib/prefix");

DraggyView = require("views/components/draggy").DraggyView;

DialView = (function(superClass) {
  extend(DialView, superClass);

  function DialView() {
    return DialView.__super__.constructor.apply(this, arguments);
  }

  DialView.prototype.template = require("./template");

  DialView.prototype.events = {
    "iostap .btn-done": "endGame"
  };

  DialView.prototype.serialize = function() {
    var d, increment, j, max, min, ref, results;
    d = DialView.__super__.serialize.apply(this, arguments);
    increment = parseFloat(d.dial.increment, 10) || 1;
    min = parseFloat(d.dial.min, 10);
    max = parseFloat(d.dial.max, 10);
    if (_.isNaN(min)) {
      min = 0;
    }
    if (_.isNaN(max)) {
      max = 10;
    }
    if (min > max) {
      min = max;
    }
    d.notches = Math.round((max - min) / increment);
    d.labels = _.nearest(_.factors(d.notches).map(function(m) {
      return m;
    }), d.dial.labels);
    d.labelValues = (function() {
      results = [];
      for (var j = 0, ref = d.labels; 0 <= ref ? j < ref : j > ref; 0 <= ref ? j++ : j--){ results.push(j); }
      return results;
    }).apply(this).map(function(i) {
      var value;
      value = new Big(Math.round(i * d.notches / d.labels));
      value = value.mul(increment).add(min);
      return value;
    });
    return d;
  };

  DialView.prototype.beforeShow = function() {
    this.setEl(this.findOne(".dial"), "dial");
    this.setEl(this.findOne(".dial-knob-input"), "knob-input");
    this.setEl(this.findOne(".dial-knob-input-value"), "knob-input-value");
    this.setEl(this.findOne(".dial-knob-answer"), "knob-answer");
    this.setEl(this.findOne(".dial-knob-answer-value"), "knob-answer-value");
    this.setEl(this.findOne(".dial-knob-value"), "knob-value");
    this.setEl(this.findAll(".dial-notch"), "notches");
    this.setEl(this.findAll(".dial-label"), "labels");
    this.rotateElements(this.getEl("notches"));
    return this.rotateElements(this.getEl("labels"));
  };

  DialView.prototype.onRefresh = function() {
    this.beforeShow();
    return DialView.__super__.onRefresh.apply(this, arguments);
  };

  DialView.prototype.show = function() {
    var el;
    DialView.__super__.show.apply(this, arguments);
    el = this.findOne(".content-fit");
    this.draggy = new DraggyView({
      el: this.getEl("dial"),
      radius: this.getEl("dial").offsetWidth / 2,
      isParent: true
    });
    this.listenTo(this.draggy, "drag", this.onDrag);
    this.listenTo(this.draggy, "drop", this.onDrop);
    return this.enterGame();
  };

  DialView.prototype.rotateElements = function(elements) {
    var dir, el, i, j, len, results;
    dir = this.options.config().direction === "rtl" ? -1 : 1;
    results = [];
    for (i = j = 0, len = elements.length; j < len; i = ++j) {
      el = elements[i];
      results.push(this.transform(el, {
        rotate: i / elements.length * 360 * dir
      }));
    }
    return results;
  };

  DialView.prototype.onDrag = function(draggy, isInitialDrag) {
    this.currentValue = this.roundValue(draggy);
    this.labelEl(this.getEl("knob-value"), this.currentValue);
    this.transform(this.getEl("knob-input"), {
      rotate: draggy.t + "rad",
      transition: isInitialDrag ? "all 300ms" : "none"
    });
    return this.transform(this.getEl("knob-input-value"), {
      x: "-50%",
      rotate: (-draggy.t) + "rad",
      transition: isInitialDrag ? "all 300ms" : "none"
    });
  };

  DialView.prototype.onDrop = function(draggy, isReset) {
    if (!isReset) {
      return draggy.reset({
        t: this.roundPos(draggy)
      });
    } else {
      this.currentValue = this.roundValue(draggy);
      this.labelEl(this.getEl("knob-value"), this.currentValue);
      this.transform(this.getEl("knob-input"), {
        rotate: draggy.t + "rad",
        transition: "all 300ms"
      });
      this.transform(this.getEl("knob-input-value"), {
        x: "-50%",
        rotate: (-draggy.t) + "rad",
        transition: "all 300ms"
      });
      if (this.currentValue != null) {
        return this.setState("touched");
      }
    }
  };

  DialView.prototype.roundValue = function(draggy) {
    var increment, max, min, ref, value;
    ref = this.options.data.dial, increment = ref.increment, min = ref.min, max = ref.max;
    value = Big(max - min).mul(this.roundPercent(draggy)).div(increment).round().mul(increment).plus(min);
    if (this.options.config().direction === "rtl") {
      return Big(max - value);
    } else {
      return value;
    }
  };

  DialView.prototype.roundPos = function(draggy) {
    return (Math.PI * 2) * this.roundPercent(draggy);
  };

  DialView.prototype.roundPercent = function(draggy) {
    var increment, max, min, percent, ref, steps;
    ref = this.options.data.dial, increment = ref.increment, min = ref.min, max = ref.max;
    max = Big(max).sub(min).div(increment).round().mul(increment).plus(min);
    percent = _.limit(draggy.t / (Math.PI * 2), 0, 1);
    steps = Big(max).sub(min).div(increment).valueOf();
    return Big(steps).mul(percent).round().div(steps);
  };

  DialView.prototype.labelEl = function(el, value) {
    var decimals, prefix, ref, suffix;
    ref = this.options.data.dial, prefix = ref.prefix, suffix = ref.suffix, decimals = ref.decimals;
    decimals = parseFloat(decimals, 10) || 0;
    if (decimals > 0) {
      value = parseFloat(value, 10).toFixed(decimals);
    }
    return el.innerHTML = "" + prefix + value + suffix;
  };

  DialView.prototype.showAnswer = function() {
    this.animateAnswerKnob();
    return this.draggy.lock();
  };

  DialView.prototype.isCorrect = function() {
    return (this.currentValue != null) && this.currentValue.eq(this.options.data.answer.value);
  };

  DialView.prototype.animateAnswerKnob = function() {
    var answer, dial, increment, max, min, percent, ref;
    ref = this.options.data, answer = ref.answer, dial = ref.dial;
    increment = dial.increment, min = dial.min, max = dial.max;
    max = Big(max).sub(min).div(increment).round().mul(increment).plus(min);
    percent = (answer.value - min) / (max - min);
    if (this.options.config().direction === "rtl") {
      percent = 1 - percent;
    }
    this.transform(this.getEl("knob-answer"), {
      rotate: this.draggy.t + "rad",
      transition: "none"
    });
    this.transform(this.getEl("knob-answer-value"), {
      x: "-50%",
      rotate: "-" + this.draggy.t + "rad",
      transition: "none"
    });
    this.getEl("knob-answer").offsetWidth;
    this.transform(this.getEl("knob-answer"), {
      rotate: (percent * Math.PI * 2) + "rad",
      transition: this.draggy.locked ? "none" : "all 600ms"
    });
    return this.transform(this.getEl("knob-answer-value"), {
      x: "-50%",
      rotate: "-" + (percent * Math.PI * 2) + "rad",
      transition: this.draggy.locked ? "none" : "all 600ms"
    });
  };

  DialView.prototype.endGame = function() {
    DialView.__super__.endGame.apply(this, arguments);
    return this.submit();
  };

  DialView.prototype.answerDetails = function() {
    var answer, correct, details, question, questions, ref, value;
    questions = ((ref = this.options.metadata) != null ? ref.questions : void 0) || [];
    if (!(questions.length > 0)) {
      return [];
    }
    question = questions[0];
    correct = this.isCorrect();
    value = parseInt(this.currentValue);
    answer = _.find(question.answers, function(a) {
      return a.correct === correct;
    });
    details = {
      question: question.question,
      answer: answer
    };
    details.answer.content = value;
    return [details];
  };

  return DialView;

})(GameView);

module.exports = DialView;
});

;require.register("engine/drag-to-match/model.yaml", function(exports, require, module) {
module.exports = {"title":"drag-to-match","display":"Drag to Match","category":"Relationships","features":{"stars":true,"social":true},"model":{"title":{"type":"html","default":""},"reject":{"type":"boolean","default":false,"display":"Reject Answers","help":"Images will go back to where they came from when placed incorrectly\n"},"list":{"min":2,"max":4,"type":[{"image":{"display":"Left","types":["text","image"]},"name":{"display":"Right","types":["text","image"],"default":"Image 1"}}]},"answer":{"text":{"type":"html","default":"","display":"Answer Text"},"incorrect":{"type":"html","default":"Not quite...","display":"Incorrect Reinforcement"},"correct":{"type":"html","default":"That's correct!","display":"Correct Reinforcement"},"takeaway":{"type":"html","default":"","display":"Core Message"}},"game":{"timer":{"limit":{"type":"number","default":-1,"display":"Time Limit (seconds)"},"out-of-time-prompt":{"type":"html","display":"Out of time prompt"}}},"prompt":{"type":"html","default":"Drag the images to their labels"},"doneText":{"type":"html","default":"Continue","display":"Done text"}},"examples":[{"subtype":"classify-three","title":"Match the product with its name","answer":{"takeaway":"Product X, Y and Z are best-sellers\n","text":"The first is Product X, then Product Y and thirdly Product Z.\n"},"list":[{"image":"img/examples/product-phone.png","imageType":"image","name":"Product X"},{"image":"img/examples/product-laptop.png","imageType":"image","name":"Product Y"},{"image":"img/examples/product-tablet.png","imageType":"image","name":"Product Z"}]},{"subtype":"classify-three-into-two","title":"Match the product with its features","reject":true,"answer":{"takeaway":"Product X, Y and Z have a range of features\n","text":"Product X and Z have touch screens, Product Y has a multi-touch trackpad\n"},"list":[{"image":"img/examples/product-phone.png","imageType":"image","name":"Touch Screen"},{"image":"img/examples/product-laptop.png","imageType":"image","name":"Multi-Touch Trackpad"},{"image":"img/examples/product-tablet.png","imageType":"image","name":"Touch Screen"}]}]}
});

;require.register("engine/drag-to-match/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (config, continueBtnText, doneText, game, hasNarration, hasPrompt, i18n, isLong, list, names, playinline, prompt, submitUp, title, undefined) {
jade_mixins["video-stream"] = jade_interp = function(videoUrl, playsinline, controls, klass, poster){
var block = (this && this.block), attributes = (this && this.attributes) || {};
playinline = playinline || true
controls = controls || true
klass = klass || 'video vjs-fluid'
var cloudinaryVideoFolderUrl = config.CLOUDINARY_CDN_URL+config.CLOUDINARY_VIDEO_FOLDER
var streamUrl = ''
if ( videoUrl && videoUrl.indexOf(cloudinaryVideoFolderUrl) > -1)
{
streamUrl = videoUrl.replace(cloudinaryVideoFolderUrl, cloudinaryVideoFolderUrl+'sp_full_hd/')
streamUrl = streamUrl.replace('.mp4', '.m3u8')
}
buf.push("<video" + (jade.attr("webkit-playsinline", playsinline, true, false)) + (jade.attr("controls", controls, true, false)) + " preload=\"auto\"" + (jade.attr("dir", config.direction, true, false)) + (jade.attr("poster", poster, true, false)) + (jade.cls(['video-js',klass], [null,true])) + "><source" + (jade.attr("src", videoUrl, true, false)) + "/>");
if ( streamUrl)
{
buf.push("<source" + (jade.attr("src", streamUrl, true, false)) + "/>");
}
buf.push("</video>");
};
jade_mixins["image"] = jade_interp = function(imageUrl, klass){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<img" + (jade.attr("src", imageUrl, true, false)) + (jade.cls([klass], [true])) + "/>");
};
jade_mixins["multi-content"] = jade_interp = function(prop, obj){
var block = (this && this.block), attributes = (this && this.attributes) || {};
obj = obj || locals;
switch (obj[prop + "Type"]){
case "image":
buf.push("<div" + (jade.attr("data-content", obj.image, true, false)) + " class=\"multi-content-wrapper multi-content-wrapper-image block-md block-lt\"><div class=\"block-sm multi-content-media\">");
jade_mixins["image"](obj[prop], 'multi-content multi-content-image');
buf.push("</div></div>");
  break;
case "video":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-video block-md block-lt\"><div class=\"block-sm multi-content-media\">");
jade_mixins["video-stream"](obj[prop], true, true,"multi-content multi-content-video block-dk");
buf.push("</div></div>");
  break;
case "audio":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-audio block-md block-lt\"><div class=\"block-sm multi-content-media\"><audio" + (jade.attr("src", obj[prop], true, false)) + " playsinline=\"playsinline\" preload=\"auto\" controls=\"controls\"" + (jade.attr("dir", config.direction, true, false)) + " class=\"multi-content multi-content-audio block-dk\"></audio></div></div>");
  break;
case "iframe":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-iframe block-md block-lt\"><div class=\"block-sm multi-content-iframe\">");
var iframe = obj[prop].match(/<iframe[^<]*<\/iframe>/)
if ( iframe)
{
buf.push(null == (jade_interp = iframe[0].replace(/ (width|height)=["'\d\w]+/g, "")) ? "" : jade_interp);
}
buf.push("</div></div>");
  break;
default:
buf.push("<span class=\"multi-content multi-content-text\">" + (null == (jade_interp = obj[prop]) ? "" : jade_interp) + "</span>");
  break;
}
};
if ( game && game.timer && game.timer.limit > 0 && !game.timer.isDisabled)
{
buf.push("<div class=\"full-screen\"><div class=\"game-stepper text-lg text-bold\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div></div>");
}
buf.push("<div class=\"content-fill\"><div class=\"block-v-lg content-fill text-center\"><div" + (jade.cls(['drag-to-match-outer','content-fill',isLong ? "long-text" : "short-text"], [null,null,true])) + "><div class=\"title-wrapper\"><h1 class=\"drag-to-match-title block-v-sm tight\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1></div><div class=\"drag-to-match-inner row block-v-md block-box-sizing\"><div class=\"col-sm-6 draggy-container slide-up content-fill\"><div" + (jade.cls(['draggies','clearfix','content-fill',list.length > 1 ? "text-right" : ""], [null,null,null,true])) + ">");
// iterate list
;(function(){
  var $$obj = list;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var item = $$obj[$index];

buf.push("<div" + (jade.attr("style", "height: " + (100/list.length) + "%", true, false)) + " class=\"drag-to-match-item block-v-sm block-box-sizing block-inline\"><div class=\"content-fill block-dk block-sm\"><div" + (jade.attr("data-id", item.id, true, false)) + (jade.attr("data-name", item.name, true, false)) + " class=\"draggy\">");
jade_mixins["multi-content"]("image", item);
buf.push("</div></div></div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var item = $$obj[$index];

buf.push("<div" + (jade.attr("style", "height: " + (100/list.length) + "%", true, false)) + " class=\"drag-to-match-item block-v-sm block-box-sizing block-inline\"><div class=\"content-fill block-dk block-sm\"><div" + (jade.attr("data-id", item.id, true, false)) + (jade.attr("data-name", item.name, true, false)) + " class=\"draggy\">");
jade_mixins["multi-content"]("image", item);
buf.push("</div></div></div>");
    }

  }
}).call(this);

buf.push("</div></div><div class=\"col-sm-6 droppy-container slide-up content-fill\"><div" + (jade.cls(['droppies','clearfix','content-fill',names.length > 1 ? "text-left" : ""], [null,null,null,true])) + ">");
// iterate names
;(function(){
  var $$obj = names;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var item = $$obj[$index];

buf.push("<div" + (jade.attr("style", "height: " + (100/names.length) + "%", true, false)) + " class=\"drag-to-match-item block-v-sm block-box-sizing block-inline\"><div" + (jade.attr("data-name", item.name, true, false)) + " class=\"content-fill droppy block-sm block-dk\"><div class=\"droppy-zone\"></div>");
jade_mixins["multi-content"]("name", item);
buf.push("</div></div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var item = $$obj[$index];

buf.push("<div" + (jade.attr("style", "height: " + (100/names.length) + "%", true, false)) + " class=\"drag-to-match-item block-v-sm block-box-sizing block-inline\"><div" + (jade.attr("data-name", item.name, true, false)) + " class=\"content-fill droppy block-sm block-dk\"><div class=\"droppy-zone\"></div>");
jade_mixins["multi-content"]("name", item);
buf.push("</div></div>");
    }

  }
}).call(this);

buf.push("</div></div></div></div></div></div><div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"game" in locals_for_with?locals_for_with.game:typeof game!=="undefined"?game:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"isLong" in locals_for_with?locals_for_with.isLong:typeof isLong!=="undefined"?isLong:undefined,"list" in locals_for_with?locals_for_with.list:typeof list!=="undefined"?list:undefined,"names" in locals_for_with?locals_for_with.names:typeof names!=="undefined"?names:undefined,"playinline" in locals_for_with?locals_for_with.playinline:typeof playinline!=="undefined"?playinline:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/drag-to-match/view.coffee", function(exports, require, module) {
var DragToMatchView, DraggyView, GameView, Prefix, SlideView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

GameView = require("views/base/game");

SlideView = require("views/slide");

Prefix = require("lib/prefix");

DraggyView = require("views/components/draggy").DraggyView;

DragToMatchView = (function(superClass) {
  extend(DragToMatchView, superClass);

  function DragToMatchView() {
    return DragToMatchView.__super__.constructor.apply(this, arguments);
  }

  DragToMatchView.prototype.template = require("./template");

  DragToMatchView.prototype.events = {
    "iostap .btn-done": "endGame"
  };

  DragToMatchView.prototype.serialize = function() {
    var data, i, isLong, item, j, len, ref;
    data = DragToMatchView.__super__.serialize.apply(this, arguments);
    data.list = (function() {
      var j, len, ref, results;
      ref = data.list;
      results = [];
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        item = ref[i];
        if (item.image && item.name) {
          results.push(_.extend({
            id: i
          }, item));
        }
      }
      return results;
    })();
    data.list = _.shuffle(data.list);
    data.names = _.chain(data.list).shuffle().filter(function(arg, i, arr) {
      var name;
      name = arg.name;
      return _.pluck(arr, "name").indexOf(name) === i;
    }).value();
    isLong = false;
    ref = data.list;
    for (j = 0, len = ref.length; j < len; j++) {
      item = ref[j];
      if (item.nameType === "text" || item.nameType === "" || !item.nameType) {
        isLong = isLong || (item.name || "").length > 32;
      }
      if (item.imageType === "text" || item.imageType === "") {
        isLong = isLong || (item.image || "").length > 32;
      }
      if (isLong) {
        continue;
      }
    }
    data.isLong = isLong;
    return data;
  };

  DragToMatchView.prototype.onRefresh = function() {
    this.beforeShow();
    return DragToMatchView.__super__.onRefresh.apply(this, arguments);
  };

  DragToMatchView.prototype.beforeShow = function() {
    return this.setHeight();
  };

  DragToMatchView.prototype.show = function() {
    var draggy, el;
    DragToMatchView.__super__.show.apply(this, arguments);
    this.listenTo(this, "resize", this.onResize);
    this.droppies = this.getElements(".droppy");
    this.draggies = (function() {
      var j, len, ref, results;
      ref = this.findAll(".draggy");
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        el = ref[j];
        draggy = new DraggyView({
          el: el
        });
        draggy.id = el.dataset.id;
        this.listenTo(draggy, "drag", this.onDrag);
        this.listenTo(draggy, "drop", this.onDrop);
        results.push(draggy);
      }
      return results;
    }).call(this);
    return this.enterGame();
  };

  DragToMatchView.prototype.setHeight = function() {
    var inner, outer, title;
    outer = this.findOne(".drag-to-match-outer");
    title = this.findOne(".title-wrapper");
    inner = this.findOne(".drag-to-match-inner");
    return inner.style.height = outer.offsetHeight - title.offsetHeight + "px";
  };

  DragToMatchView.prototype.onDrag = function(draggy, isInitialDrag) {
    var activeIndex, contains, droppy, i, j, len, ref;
    if (isInitialDrag) {
      this.droppies = this.getElements(".droppy", this.droppies);
    }
    activeIndex = draggy.closest(_.pluck(this.droppies, "bounds"));
    ref = this.droppies;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      droppy = ref[i];
      droppy.el.classList.toggle("active", i === activeIndex);
      droppy.isActive = i === activeIndex;
    }
    if (isInitialDrag) {
      draggy.el.classList.remove("fade");
      droppy = this.droppies[activeIndex];
      contains = _.without(droppy != null ? droppy.contains : void 0, draggy.id);
      if (contains.length) {
        this.getDraggyFromId(_.last(contains)).el.classList.remove("fade");
      } else if (droppy) {
        droppy.el.classList.remove("contains");
      }
    }
    return this.transform(draggy.el, {
      x: draggy.x,
      y: draggy.y,
      scale: 1.25,
      transition: isInitialDrag ? "all 300ms" : "none"
    });
  };

  DragToMatchView.prototype.onDrop = function(draggy) {
    var bounds, droppy, height, left, ref, top, width, x, y;
    ref = draggy.offset, left = ref.left, top = ref.top, width = ref.width, height = ref.height;
    droppy = ((function() {
      var j, len, ref1, results;
      ref1 = this.droppies;
      results = [];
      for (j = 0, len = ref1.length; j < len; j++) {
        droppy = ref1[j];
        if (droppy.isActive) {
          results.push(droppy);
        }
      }
      return results;
    }).call(this))[0];
    x = y = 0;
    if (droppy) {
      bounds = droppy.bounds;
      x = Math.round(bounds.left + bounds.width / 2 - left - width / 2);
      y = Math.round(bounds.top + bounds.height / 2 - top - height / 2);
    } else {
      draggy.isPositioned = false;
    }
    if (this.options.data.reject && (droppy != null ? droppy.el.dataset.name : void 0) !== draggy.el.dataset.name) {
      if (droppy != null) {
        droppy.isActive = false;
      }
      x = y = 0;
      if (droppy) {
        droppy.el.classList.add("incorrect");
        window.setTimeout((function() {
          return droppy.el.classList.remove("incorrect");
        }), 400);
      }
    }
    if (draggy.x !== x || draggy.y !== y) {
      draggy.reset({
        x: x,
        y: y
      });
    } else {
      this.transform(draggy.el, {
        x: draggy.x,
        y: draggy.y,
        transition: "all 300ms"
      });
      this.checkAnswer(draggy);
    }
    return this.setState(this.isTouched() ? "touched" : "prompt");
  };

  DragToMatchView.prototype.onResize = function(e) {
    var bounds, draggy, droppy, height, id, j, left, len, ref, results, top, width, x, y;
    this.setHeight();
    ref = this.droppies || [];
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      droppy = ref[j];
      results.push((function() {
        var k, len1, ref1, ref2, results1;
        ref1 = droppy.contains || [];
        results1 = [];
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          id = ref1[k];
          draggy = this.getDraggyFromId(id);
          this.transition(draggy.el, "none");
          draggy.getOffset();
          bounds = droppy.el.getBoundingClientRect();
          ref2 = draggy.offset, left = ref2.left, top = ref2.top, width = ref2.width, height = ref2.height;
          x = Math.round(bounds.left + bounds.width / 2 - left - width / 2);
          y = Math.round(bounds.top + bounds.height / 2 - top - height / 2);
          draggy.setPosition({
            x: x,
            y: y
          });
          results1.push(this.transform(draggy.el, {
            x: x,
            y: y
          }));
        }
        return results1;
      }).call(this));
    }
    return results;
  };

  DragToMatchView.prototype.getDraggyFromId = function(id) {
    return _.findWhere(this.draggies, {
      id: id
    });
  };

  DragToMatchView.prototype.getElements = function(selector, original) {
    var contains, el, i, j, k, len, len1, ref, ref1, results, results1;
    if (original) {
      results = [];
      for (j = 0, len = original.length; j < len; j++) {
        ref = original[j], el = ref.el, contains = ref.contains;
        results.push({
          el: el,
          contains: contains,
          bounds: el.getBoundingClientRect()
        });
      }
      return results;
    } else {
      ref1 = this.findAll(selector);
      results1 = [];
      for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {
        el = ref1[i];
        results1.push({
          el: el,
          bounds: el.getBoundingClientRect(),
          contains: []
        });
      }
      return results1;
    }
  };

  DragToMatchView.prototype.resetDraggy = function(draggy) {
    draggy.reset();
    draggy.el.classList.remove("is-positioned");
    return draggy.isPositioned = false;
  };

  DragToMatchView.prototype.checkAnswer = function(draggy) {
    var d, doesContain, droppy, i, id, j, k, len, len1, ref, ref1, results;
    ref = this.droppies;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      droppy = ref[j];
      droppy.el.classList.remove("active");
      doesContain = _.include(droppy.contains, draggy.id);
      if (droppy.isActive) {
        draggy.el.classList.add("is-positioned");
        draggy.isPositioned = true;
        if (droppy.contains.length > 0 && !doesContain && this.isOnlyUnique()) {
          droppy.isActive = false;
          this.resetDraggy(this.getDraggyFromId(droppy.contains[0]));
        }
        droppy.contains = _.uniq(droppy.contains.concat(draggy.id));
      } else if (doesContain) {
        droppy.contains = _.without(droppy.contains, draggy.id);
      }
      ref1 = droppy.contains;
      for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {
        id = ref1[i];
        d = this.getDraggyFromId(id);
        d.el.classList.toggle("fade", i !== droppy.contains.length - 1);
      }
      results.push(droppy.el.classList.toggle("contains", droppy.contains.length > 0));
    }
    return results;
  };

  DragToMatchView.prototype.isTouched = function() {
    var draggy, touchedDraggies;
    touchedDraggies = (function() {
      var j, len, ref, results;
      ref = this.draggies;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        draggy = ref[j];
        if (draggy.isPositioned) {
          results.push(draggy);
        }
      }
      return results;
    }).call(this);
    return touchedDraggies.length === this.options.data.list.length;
  };

  DragToMatchView.prototype.isCorrect = function() {
    var correctDraggies, droppy;
    correctDraggies = (function() {
      var j, len, ref, results;
      ref = this.droppies;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        droppy = ref[j];
        if (_.filter(droppy.contains, (function(_this) {
          return function(id) {
            return droppy.el.dataset.name === _this.getDraggyFromId(id).el.dataset.name;
          };
        })(this)).length === droppy.contains.length) {
          results.push(droppy);
        }
      }
      return results;
    }).call(this);
    return correctDraggies.length === this.droppies.length;
  };

  DragToMatchView.prototype.showAnswer = function() {
    var draggy, droppy, droppyCorrect, id, isCorrect, j, k, len, len1, ref, ref1, results;
    ref = this.droppies;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      droppy = ref[j];
      droppyCorrect = true;
      ref1 = droppy.contains;
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        id = ref1[k];
        draggy = this.getDraggyFromId(id);
        isCorrect = droppy.el.dataset.name === draggy.el.dataset.name;
        draggy.el.classList.toggle("incorrect", !isCorrect);
        if (!isCorrect) {
          droppyCorrect = false;
        }
      }
      results.push(droppy.el.classList.toggle("correct", droppyCorrect));
    }
    return results;
  };

  DragToMatchView.prototype.isOnlyUnique = function() {
    return _.chain(this.options.data.list).pluck("name").uniq().value().length === this.options.data.list.length;
  };

  DragToMatchView.prototype.answerDetails = function() {
    var details, draggiesByContentDict, j, len, q, questions, ref, selectedDraggy, selectedDroppy;
    questions = ((ref = this.options.metadata) != null ? ref.questions : void 0) || [];
    if (!(questions.length > 0)) {
      return [];
    }
    details = [];
    draggiesByContentDict = _.indexBy(this.draggies, function(d) {
      if (d.el.children[0].dataset.content != null) {
        return d.el.children[0].dataset.content;
      } else {
        return d.el.innerText.toLowerCase();
      }
    });
    for (j = 0, len = questions.length; j < len; j++) {
      q = questions[j];
      if (selectedDraggy = draggiesByContentDict[q.question.content.toLowerCase()]) {
        selectedDroppy = _.find(this.droppies, function(droppy) {
          var ref1;
          return ref1 = selectedDraggy.el.dataset.id, indexOf.call(droppy.contains, ref1) >= 0;
        });
        details.push({
          question: q.question,
          answer: _.find(q.answers, function(a) {
            return a.content === selectedDroppy.el.dataset.name;
          })
        });
      }
    }
    return details;
  };

  DragToMatchView.prototype.endGame = function() {
    DragToMatchView.__super__.endGame.apply(this, arguments);
    return this.submit();
  };

  return DragToMatchView;

})(GameView);

module.exports = DragToMatchView;
});

;require.register("engine/exit/model.yaml", function(exports, require, module) {
module.exports = {"title":"exit","display":"Exit Lesson","category":"Exit","model":{"title":{"type":"html","default":"That's it!"},"content":{"type":"html","default":"Nice work. You’ve reached the end of this lesson."},"buttonText":{"type":"html","default":"Exit Lesson","display":"Button CTA"}}}
});

;require.register("engine/exit/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (buttonText, config, content, title) {
buf.push("<div class=\"content-scroll content-fit content-ver text-center block-v-md\"><div class=\"content-scroll-inner\"><div class=\"block-v-md\"><h1 class=\"slide-up\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"slide-up delay-1 text-md\">" + (null == (jade_interp = content) ? "" : jade_interp) + "</div></div>");
if ( config.contextRequiresExitButton)
{
buf.push("<div class=\"block-v-md\"><div class=\"btn btn-solid slide-up\">" + (null == (jade_interp = buttonText) ? "" : jade_interp) + "</div></div>");
}
buf.push("</div></div>");}.call(this,"buttonText" in locals_for_with?locals_for_with.buttonText:typeof buttonText!=="undefined"?buttonText:undefined,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined,"content" in locals_for_with?locals_for_with.content:typeof content!=="undefined"?content:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/exit/view.coffee", function(exports, require, module) {
var ExitView, Lesson, SlideView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SlideView = require("views/slide");

Lesson = Application.actions().Lesson;

ExitView = (function(superClass) {
  extend(ExitView, superClass);

  function ExitView() {
    return ExitView.__super__.constructor.apply(this, arguments);
  }

  ExitView.prototype.template = require("./template");

  ExitView.prototype.events = function() {
    return {
      "iostap .btn": "exit"
    };
  };

  ExitView.prototype.show = function() {
    return Lesson.complete();
  };

  ExitView.prototype.beforeShow = function() {
    return this.trigger("ui", {
      flexibleHeight: true
    });
  };

  ExitView.prototype.beforeHide = function() {
    return this.trigger("ui", {
      flexibleHeight: false
    });
  };

  return ExitView;

})(SlideView);

module.exports = ExitView;
});

;require.register("engine/expandable-list/model.yaml", function(exports, require, module) {
module.exports = {"title":"expandable-list","display":"Expandable List","category":"Content","features":{"narration":true,"social":true},"description":"Display a list of bullet points","model":{"title":{"type":"html","default":""},"list":{"type":[{"title":{"type":"html"},"content":{"type":"html"}}],"min":1,"max":6},"focus":{"type":"boolean","default":true,"help":"Only reveal one item at a time.\n"},"prompt":{"type":"html","default":"Select an item to see more"},"doneText":{"type":"html","default":"Continue","display":"Done text"}},"examples":[{"subtype":"three","title":"Learn more about our product range","list":[{"title":"Product X","content":"Our brilliant new sleek design allows the user to have unparalleled comfort when using the device.\n"},{"title":"Product Y","content":"Crystal clear display performs better than any of our competitors.\n"},{"title":"Product Z","content":"The newest feature offers a new level of feedback for the user.\n"}]}]}
});

;require.register("engine/expandable-list/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (continueBtnText, doneText, hasNarration, hasPrompt, i18n, list, prompt, submitUp, title, undefined) {
buf.push("<div class=\"content-scroll content-fill\"><div class=\"content-scroll-inner block-v-md\"><div class=\"block-v-md\"><div class=\"text-xxl text-center slide-up\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</div></div><div class=\"row block-v-md\"><div class=\"col-sm-12 col-md-10 col-md-offset-1\"><div class=\"accordion\">");
// iterate list
;(function(){
  var $$obj = list;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var item = $$obj[i];

var klass = "middle";
if (i === 0) klass = "first";
if (i === list.length - 1 ) klass = "last";
buf.push("<div" + (jade.cls(['item',"item-" + (klass) + ""], [null,true])) + "><div class=\"item-button btn btn-solid\"><div class=\"accordion-text text-start\">" + (null == (jade_interp = item.title) ? "" : jade_interp) + "</div></div><div class=\"item-content block-dk block-md\"><div class=\"text-md\">" + (null == (jade_interp = item.content) ? "" : jade_interp) + "</div></div></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var item = $$obj[i];

var klass = "middle";
if (i === 0) klass = "first";
if (i === list.length - 1 ) klass = "last";
buf.push("<div" + (jade.cls(['item',"item-" + (klass) + ""], [null,true])) + "><div class=\"item-button btn btn-solid\"><div class=\"accordion-text text-start\">" + (null == (jade_interp = item.title) ? "" : jade_interp) + "</div></div><div class=\"item-content block-dk block-md\"><div class=\"text-md\">" + (null == (jade_interp = item.content) ? "" : jade_interp) + "</div></div></div>");
    }

  }
}).call(this);

buf.push("</div></div></div></div></div><div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"list" in locals_for_with?locals_for_with.list:typeof list!=="undefined"?list:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/expandable-list/view.coffee", function(exports, require, module) {
var ExpandableListView, ScrollableView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ScrollableView = require("../scrollable/view");

ExpandableListView = (function(superClass) {
  extend(ExpandableListView, superClass);

  function ExpandableListView() {
    return ExpandableListView.__super__.constructor.apply(this, arguments);
  }

  ExpandableListView.prototype.template = require("./template");

  ExpandableListView.prototype.events = {
    "iostap .item-button": "toggleItem",
    "iostap .btn-done": "submit"
  };

  ExpandableListView.prototype.serialize = function() {
    var data;
    data = ExpandableListView.__super__.serialize.apply(this, arguments);
    data.list = _.filter(data.list, function(el) {
      return el.title && el.content;
    });
    data.hasPrompt = true;
    return data;
  };

  ExpandableListView.prototype.beforeShow = function() {
    this.setEl(this.findAll(".item"), "items");
    this.setEl(this.findOne(".content-scroll-inner"), "container");
    this.setEl(this.findOne(".accordion"), "accordion");
    this.$(".item-button .md-list").removeClass("md-list");
    this.transformItems(false);
    return this.trigger("ui", {
      flexibleHeight: true
    });
  };

  ExpandableListView.prototype.beforeHide = function() {
    return this.trigger("ui", {
      flexibleHeight: false
    });
  };

  ExpandableListView.prototype.show = function() {
    this.touchedItems = [];
    this.setState("prompt");
    return this.listenTo(this, "resize", this.onResize);
  };

  ExpandableListView.prototype.onResize = function() {
    return this.beforeShow();
  };

  ExpandableListView.prototype.onRefresh = function() {};

  ExpandableListView.prototype.toggleItem = function(e, element) {
    var button, currentItem, j, len, other, ref, transition;
    button = (e != null ? e.currentTarget : void 0) || element;
    currentItem = button.parentNode;
    transition = e != null;
    this.touchedItems = _.uniq(this.touchedItems.concat(currentItem));
    if (this.touchedItems.length === this.getEl("items").length) {
      this.setState("touched");
    }
    ref = this.getEl("items");
    for (j = 0, len = ref.length; j < len; j++) {
      other = ref[j];
      this.transition(other, transition ? "all 300ms" : "");
      if (this.options.data.focus && other !== currentItem) {
        other.classList.remove("active");
      }
    }
    currentItem.offsetHeight;
    currentItem.classList.toggle("active");
    return this.transformItems(transition);
  };

  ExpandableListView.prototype.transformItems = function(transition) {
    var accordion, button, height, i, item, j, len, ref, yOffset;
    accordion = this.getEl("accordion");
    if (!((accordion != null) && this.getEl("items").length)) {
      return;
    }
    window.clearTimeout(this.timeout);
    yOffset = 0;
    height = 0;
    ref = this.getEl("items");
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      item = ref[i];
      button = item.firstChild;
      height += button.offsetHeight;
      this.transform(item, {
        y: yOffset
      });
      if (item.classList.contains("active")) {
        height += item.lastChild.offsetHeight;
        yOffset += item.lastChild.offsetHeight;
      }
    }
    if (height > accordion.offsetHeight || !transition) {
      return this.transformContainer(height, transition);
    } else {
      return this.timeout = window.setTimeout((function(_this) {
        return function() {
          return _this.transformContainer(height, transition);
        };
      })(this), 300);
    }
  };

  ExpandableListView.prototype.transformContainer = function(height, transition) {
    var accordion, container, diff, newY;
    container = this.getEl("container");
    accordion = this.getEl("accordion");
    accordion.style.height = height + "px";
    diff = this.el.offsetHeight - container.offsetHeight;
    newY = Math.max(diff / 2, 0);
    return this.transform(container, {
      y: newY,
      transition: transition ? "all 300ms" : ""
    });
  };

  ExpandableListView.prototype.refresh = function(params) {
    var changed, i, item, j, len, ref;
    ref = params.data.list;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      item = ref[i];
      if (!_.isEqual(this.options.data.list[i], item)) {
        changed = i;
      }
    }
    ExpandableListView.__super__.refresh.apply(this, arguments);
    this.beforeShow();
    this.show();
    if ((changed != null) && changed < this.getEl("items").length) {
      return this.toggleItem(null, this.getEl("items")[changed].firstChild);
    }
  };

  return ExpandableListView;

})(ScrollableView);

module.exports = ExpandableListView;
});

;require.register("engine/find-a-word/model.yaml", function(exports, require, module) {
module.exports = {"title":"find-a-word","display":"Find-a-word","category":"Game","visible":true,"features":{"narration":false,"stars":true},"model":{"title":{"type":"text"},"words":{"min":3,"max":12,"type":[{"type":"text"}]},"answer":{"text":{"type":"text","default":"","display":"Answer Text"},"correct":{"type":"text","default":"That's correct!","display":"Correct Reinforcement"},"incorrect":{"type":"text","default":"Not quite...","display":"Incorrect Reinforcement"},"takeaway":{"type":"text","default":"","display":"Core Message"}},"game":{"timer":{"limit":{"type":"number","default":30000,"display":"Time Limit (seconds)","min":1},"out-of-time-prompt":{"type":"html","display":"Out of time prompt"},"isDisabled":{"type":"boolean","default":true,"display":"Disable","help":"Disabling the timer lets users find words at their own pace.\n"}}},"prompt":{"type":"text","default":"Find the words in the grid"},"doneText":{"type":"html","default":"Continue","display":"Done text"}},"examples":[{"subtype":"find-a-word","title":"Find all of the products that make up our range","words":["Product X","Product Y","Product Z"]}]}
});

;require.register("engine/find-a-word/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (Array, continueBtnText, dirs, doneText, game, grid, hasNarration, hasPrompt, i18n, prompt, size, submitUp, title, undefined, words) {
if ( game && game.timer && game.timer.limit > 0 && !game.timer.isDisabled)
{
buf.push("<div class=\"full-screen\"><div class=\"game-stepper text-lg text-bold\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div></div>");
}
buf.push("<div class=\"content content-fit clearfix\"><div class=\"text-center block-v-lg\"><h1 class=\"fade-in\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"grid-container block-md block-dk\"><div class=\"grid\">");
size = 1 / grid.length * 100;
dirs = ["up", "down", "left", "right"]
// iterate grid
;(function(){
  var $$obj = grid;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var row = $$obj[$index];

buf.push("<div" + (jade.attr("style", "height: " + (size) + "%;", true, false)) + " class=\"grid-row clearfix\">");
// iterate row
;(function(){
  var $$obj = row;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var col = $$obj[$index];

buf.push("<div" + (jade.attr("data-letter", col, true, false)) + (jade.attr("style", "width: " + (size) + "%;", true, false)) + (jade.cls(['grid-col','text-uppercase',"delay-" + (_.random(3)) + " slide-" + (_.sample(dirs)) + ""], [null,null,true])) + ">" + (jade.escape(null == (jade_interp = col) ? "" : jade_interp)) + "</div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var col = $$obj[$index];

buf.push("<div" + (jade.attr("data-letter", col, true, false)) + (jade.attr("style", "width: " + (size) + "%;", true, false)) + (jade.cls(['grid-col','text-uppercase',"delay-" + (_.random(3)) + " slide-" + (_.sample(dirs)) + ""], [null,null,true])) + ">" + (jade.escape(null == (jade_interp = col) ? "" : jade_interp)) + "</div>");
    }

  }
}).call(this);

buf.push("</div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var row = $$obj[$index];

buf.push("<div" + (jade.attr("style", "height: " + (size) + "%;", true, false)) + " class=\"grid-row clearfix\">");
// iterate row
;(function(){
  var $$obj = row;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var col = $$obj[$index];

buf.push("<div" + (jade.attr("data-letter", col, true, false)) + (jade.attr("style", "width: " + (size) + "%;", true, false)) + (jade.cls(['grid-col','text-uppercase',"delay-" + (_.random(3)) + " slide-" + (_.sample(dirs)) + ""], [null,null,true])) + ">" + (jade.escape(null == (jade_interp = col) ? "" : jade_interp)) + "</div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var col = $$obj[$index];

buf.push("<div" + (jade.attr("data-letter", col, true, false)) + (jade.attr("style", "width: " + (size) + "%;", true, false)) + (jade.cls(['grid-col','text-uppercase',"delay-" + (_.random(3)) + " slide-" + (_.sample(dirs)) + ""], [null,null,true])) + ">" + (jade.escape(null == (jade_interp = col) ? "" : jade_interp)) + "</div>");
    }

  }
}).call(this);

buf.push("</div>");
    }

  }
}).call(this);

buf.push("<div class=\"grid-highlights\">");
// iterate (new Array(words.length + 1))
;(function(){
  var $$obj = (new Array(words.length + 1));
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var word = $$obj[i];

buf.push("<div" + (jade.attr("style", "width: " + (size) + "%; height: " + (size) + "%;", true, false)) + (jade.cls(['grid-highlight',"grid-highlight-" + (i) + ""], [null,true])) + "></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var word = $$obj[i];

buf.push("<div" + (jade.attr("style", "width: " + (size) + "%; height: " + (size) + "%;", true, false)) + (jade.cls(['grid-highlight',"grid-highlight-" + (i) + ""], [null,true])) + "></div>");
    }

  }
}).call(this);

buf.push("</div></div></div></div></div><div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"Array" in locals_for_with?locals_for_with.Array:typeof Array!=="undefined"?Array:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"dirs" in locals_for_with?locals_for_with.dirs:typeof dirs!=="undefined"?dirs:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"game" in locals_for_with?locals_for_with.game:typeof game!=="undefined"?game:undefined,"grid" in locals_for_with?locals_for_with.grid:typeof grid!=="undefined"?grid:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"size" in locals_for_with?locals_for_with.size:typeof size!=="undefined"?size:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined,"words" in locals_for_with?locals_for_with.words:typeof words!=="undefined"?words:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/find-a-word/view.coffee", function(exports, require, module) {
var DraggyView, FindAWordView, GameView, HALFTURN, Prefix, QUARTURN,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

GameView = require("views/base/game");

DraggyView = require("views/components/draggy").DraggyView;

Prefix = require("lib/prefix");

HALFTURN = Math.PI / 2;

QUARTURN = Math.PI / 4;

FindAWordView = (function(superClass) {
  extend(FindAWordView, superClass);

  function FindAWordView() {
    return FindAWordView.__super__.constructor.apply(this, arguments);
  }

  FindAWordView.prototype.template = require("./template");

  FindAWordView.prototype.fitTextOnResize = false;

  FindAWordView.prototype.fitTextOnRender = false;

  FindAWordView.prototype.orientations = ["verticalUp", "diagonalUp", "horizontal", "diagonal", "vertical", "diagonalBack", "horizontalBack", "diagonalUpBack"];

  FindAWordView.prototype.events = function() {
    return {
      "iostap .btn-done": "endGame"
    };
  };

  FindAWordView.prototype.serialize = function() {
    var data, letters, w, words;
    data = FindAWordView.__super__.serialize.apply(this, arguments);
    words = _.uniq((function() {
      var j, len1, ref, results;
      ref = data.words;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        w = ref[j];
        results.push(w.replace(/\s/g, "").toUpperCase());
      }
      return results;
    })());
    letters = _.uniq(words.join(""));
    if (this.grid == null) {
      this.grid = window.wordfind.newPuzzle(words, {
        letters: letters
      });
    }
    this.solution = window.wordfind.solve(this.grid, words).found;
    data.grid = this.grid;
    return data;
  };

  FindAWordView.prototype.beforeShow = function() {
    var colSizeEm, colSizePx, el, fontSize, gridSizeEm, j, len1, ref, ref1, results, t, x, y;
    this.setEl(this.findAll(".grid-highlight"), "highlight");
    el = this.findOne(".grid");
    el.style.width = "";
    fontSize = parseFloat(window.getComputedStyle(this.el).fontSize);
    gridSizeEm = Math.min(el.offsetWidth / fontSize, 22);
    colSizeEm = gridSizeEm / this.grid.length;
    colSizePx = colSizeEm * fontSize;
    this.size = colSizePx;
    el.style.width = gridSizeEm + "em";
    el.style.height = gridSizeEm + "em";
    el.style.lineHeight = (colSizeEm * 1.1) + "em";
    ref = this.getEl("highlight");
    results = [];
    for (j = 0, len1 = ref.length; j < len1; j++) {
      el = ref[j];
      el.style[Prefix("transformOrigin")] = (colSizeEm / 2) + "em";
      ref1 = el.dataset, x = ref1.x, y = ref1.y, t = ref1.t;
      if ((x != null) && (y != null) && (t != null)) {
        results.push(this.transform(el, {
          x: (x * colSizeEm) + "em",
          y: (y * colSizeEm) + "em",
          rotate: (t * QUARTURN - HALFTURN) + "rad"
        }));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  FindAWordView.prototype.show = function() {
    FindAWordView.__super__.show.apply(this, arguments);
    this.draggy = new DraggyView({
      el: this.findOne(".grid"),
      isParent: true
    });
    this.listenTo(this.draggy, "drag", this.onDrag);
    this.listenTo(this.draggy, "drop", this.onDrop);
    this.listenTo(this, "resize", this.onResize);
    this.onResize();
    return this.enterGame();
  };

  FindAWordView.prototype.refresh = function() {
    delete this.grid;
    FindAWordView.__super__.refresh.apply(this, arguments);
    this.serialize();
    return this.beforeShow();
  };

  FindAWordView.prototype.hide = function() {
    return delete this.grid;
  };

  FindAWordView.prototype.onResize = function(e) {
    var ref;
    if (!((e != null ? e.width : void 0) || ((ref = this.currentState) != null ? ref.refresh : void 0))) {
      this.el.classList.remove("active");
    }
    this.beforeShow();
    return this.fitText((function(_this) {
      return function() {
        var colSizePx;
        colSizePx = Math.round(_this.findOne(".grid").offsetWidth / _this.grid.length);
        _this.size = colSizePx;
        return window.setTimeout((function() {
          return _this.el.classList.add("active");
        }), 300);
      };
    })(this));
  };

  FindAWordView.prototype.onDrag = function(draggy, isInitial) {
    var baseRotation, el, gs, gw, gx, gy, len, max, rotationDiff, t, x, y;
    el = this.getEl("highlight").item(this.solution.length);
    el.classList.add("active");
    if (isInitial) {
      x = draggy.x, y = draggy.y;
      this.line = {
        theta: 0,
        start: {
          x: Math.floor(x / this.size),
          y: Math.floor(y / this.size)
        }
      };
      this.transform(el, {
        x: this.line.start.x * this.size,
        y: this.line.start.y * this.size
      });
      el.offsetWidth;
      return this.setState(true, "dragging");
    } else {
      x = draggy.x, y = draggy.y;
      gs = this.grid.length - 1;
      gx = this.line.start.x;
      gy = this.line.start.y;
      x -= (gx + 0.5) * this.size;
      y -= (gy + 0.5) * this.size;
      t = Math.ceil((draggy.toAngle(x, y) - HALFTURN) / QUARTURN + HALFTURN);
      gw = t % 2 === 0 ? 1 : Math.SQRT2;
      baseRotation = this.line.theta - (this.line.theta % 8);
      rotationDiff = (this.line.theta % 8) - t;
      if (rotationDiff < -5) {
        baseRotation -= 8;
      } else if (rotationDiff === 8) {
        baseRotation += 8;
      }
      max = this.getMaxLength(gx, gy, t);
      len = Math.round((t % 2 === 0 ? Math.max(Math.abs(x), Math.abs(y)) : Math.sqrt(x * x + y * y)) / (gw * this.size));
      this.line.length = Math.max(Math.min(len, max) + 1, 1);
      this.line.theta = (baseRotation || 0) + t;
      this.line.orientation = this.orientations[t % 8];
      this.transform(el, {
        x: this.line.start.x * this.size,
        y: this.line.start.y * this.size,
        rotate: (this.line.theta * QUARTURN - HALFTURN) + "rad"
      });
      el.dataset.x = this.line.start.x;
      el.dataset.y = this.line.start.y;
      el.dataset.t = this.line.theta;
      return el.style.width = ((1 + (this.line.length - 1) * gw) / (gs + 1) * 100) + "%";
    }
  };

  FindAWordView.prototype.onDrop = function(draggy, isReset) {
    var answer, el, j, len1, letter, letters, word;
    el = this.getEl("highlight").item(this.solution.length);
    el.classList.remove("active");
    letters = this.getSelection(this.line);
    word = letters.reduce((function(m, e) {
      return m + e.dataset.letter;
    }), "");
    answer = _.find(this.solution, {
      word: word
    });
    if (answer) {
      this.solution = _.without(this.solution, answer);
      el.classList.add("complete");
      for (j = 0, len1 = letters.length; j < len1; j++) {
        letter = letters[j];
        letter.classList.add("complete");
      }
    } else {
      this.transform(el, {
        x: this.line.start.x * this.size,
        y: this.line.start.y * this.size,
        rotate: (this.line.theta * QUARTURN - HALFTURN) + "rad",
        scale: 1.2
      });
      window.setTimeout((function(_this) {
        return function() {
          el.style.width = "";
          return _this.setState(false, "dragging");
        };
      })(this), 300);
    }
    return this.setState("touched");
  };

  FindAWordView.prototype.getSelection = function(line) {
    var c, i, j, length, orientation, p, r, ref, ref1, ref2, results, x, y;
    (ref = line.start, x = ref.x, y = ref.y), orientation = line.orientation, length = line.length;
    results = [];
    for (i = j = 0, ref1 = length; 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {
      p = window.wordfind.orientations[orientation](x, y, i);
      r = Math.floor(p.y * this.grid.length) / this.grid.length;
      c = p.x % this.grid.length;
      results.push((ref2 = this.draggy.el.children[r]) != null ? ref2.children[c] : void 0);
    }
    return results;
  };

  FindAWordView.prototype.getOrientation = function(theta) {
    return this.orientations[theta % 8];
  };

  FindAWordView.prototype.getMaxLength = function(x, y, theta) {
    var size;
    size = this.grid.length - 1;
    switch (theta % 8) {
      case 1:
        return Math.min(size - x, y);
      case 2:
        return size - x;
      case 3:
        return Math.min(size - x, size - y);
      case 4:
        return size - y;
      case 5:
        return Math.min(x, size - y);
      case 6:
        return x;
      case 7:
        return Math.min(x, y);
      default:
        return y;
    }
  };

  FindAWordView.prototype.isCorrect = function() {
    return this.solution.length === 0;
  };

  FindAWordView.prototype.showAnswer = function() {
    var el, gw, i, j, len1, letters, orientation, overlap, ref, ref1, results, t, x, y;
    ref = this.solution;
    results = [];
    for (i = j = 0, len1 = ref.length; j < len1; i = ++j) {
      ref1 = ref[i], x = ref1.x, y = ref1.y, overlap = ref1.overlap, orientation = ref1.orientation;
      letters = this.getSelection({
        start: {
          x: x,
          y: y
        },
        length: overlap,
        orientation: orientation
      });
      el = this.getEl("highlight").item(i);
      t = this.orientations.indexOf(orientation);
      gw = t % 2 === 0 ? 1 : Math.SQRT2;
      this.transform(el, {
        x: x * this.size,
        y: y * this.size,
        rotate: (t * QUARTURN - HALFTURN) + "rad"
      });
      el.offsetWidth;
      el.classList.add("incorrect");
      results.push(el.style.width = (gw * overlap / this.grid.length * 100) + "%");
    }
    return results;
  };

  FindAWordView.prototype.endGame = function() {
    FindAWordView.__super__.endGame.apply(this, arguments);
    return this.submit();
  };

  return FindAWordView;

})(GameView);

module.exports = FindAWordView;
});

;require.register("engine/free-text-contribution/model.yaml", function(exports, require, module) {
module.exports = {"title":"free-text-contribution","display":"Free Text","category":"Peer Learning","description":"Free text input","model":{"question":{"id":{"type":"uuid","hidden":true},"content":{"type":"html"},"min":{"type":"int","display":"Minimum Response Length"}},"prompt":{"type":"html","default":"Type your response"},"doneText":{"type":"html","default":"Continue","display":"Done text"}},"examples":[{"subtype":"free-text","question":{"id":"#GENUUID#","content":"Write your contribution"}}]}
});

;require.register("engine/free-text-contribution/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;

;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/free-text-contribution/view.coffee", function(exports, require, module) {
var FreeTextContributioView, FreeTextView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FreeTextView = require("../free-text-survey/view");

FreeTextContributioView = (function(superClass) {
  extend(FreeTextContributioView, superClass);

  function FreeTextContributioView() {
    return FreeTextContributioView.__super__.constructor.apply(this, arguments);
  }

  FreeTextContributioView.prototype.userInput = function() {
    return {
      contribution: {
        text: this.value,
        question: {
          content: this.options.data.question.content,
          id: this.options.data.question.id
        }
      }
    };
  };

  return FreeTextContributioView;

})(FreeTextView);

module.exports = FreeTextContributioView;
});

;require.register("engine/free-text-survey/model.yaml", function(exports, require, module) {
module.exports = {"title":"free-text-survey","display":"Free text","category":"Survey","description":"Free text input for user feedback","model":{"question":{"id":{"type":"uuid","hidden":true},"content":{"type":"html"},"min":{"type":"int","display":"Minimum Response Length","help":"If you want a response from every learner, set a minimum response length. This is the number of characters they will need to type before they are able to continue.\n"}},"prompt":{"type":"html","default":"Type your response"},"doneText":{"type":"html","default":"Continue","display":"Done text"}},"examples":[{"subtype":"free-text","question":{"id":"#GENUUID#","content":"How would you improve this lesson?"}}]}
});

;require.register("engine/free-text-survey/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (continueBtnText, doneText, hasNarration, hasPrompt, i18n, prompt, submitUp, title, value) {
buf.push("<div class=\"content-fill\"><div class=\"content-scroll content-ver\"><div class=\"content-scroll-inner\"><div class=\"row block-v-lg clearfix\"><div class=\"col-sm-12 col-lg-10 col-lg-offset-1\"><div class=\"block-v-md slide-title\"><h1 class=\"text-center\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1></div><div class=\"block-v-md\"><div class=\"user-input-container\"><div class=\"user-input text-md block-lg text-prewrap\">" + (jade.escape(null == (jade_interp = value) ? "" : jade_interp)) + "</div><div class=\"btn btn-prompt btn-muted\"><div class=\"icon icon-pencil\"></div></div></div></div></div></div></div></div></div><div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined,"value" in locals_for_with?locals_for_with.value:typeof value!=="undefined"?value:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/free-text-survey/view.coffee", function(exports, require, module) {
var FreeTextView, InputView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

InputView = require("views/input");

FreeTextView = (function(superClass) {
  extend(FreeTextView, superClass);

  function FreeTextView() {
    return FreeTextView.__super__.constructor.apply(this, arguments);
  }

  FreeTextView.prototype.template = require("./template");

  FreeTextView.prototype.events = function() {
    return {
      "iostap .content-fill": "focus",
      "iostap .btn-done": "nextSlide"
    };
  };

  FreeTextView.prototype.show = function() {
    return this.listenTo(this, "resize", this.onResize);
  };

  FreeTextView.prototype.beforeShow = function() {
    var ref;
    this.setEl(this.findOne(".user-input"), "input");
    this.trigger("ui", {
      flexibleHeight: true
    });
    if (this.serialize().min === 0 || ((ref = this.value) != null ? ref.length : void 0) >= this.serialize().min) {
      return this.setState("touched");
    }
  };

  FreeTextView.prototype.beforeHide = function() {
    return this.trigger("ui", {
      flexibleHeight: false
    });
  };

  FreeTextView.prototype.onResize = function() {
    return this.beforeShow();
  };

  FreeTextView.prototype.serialize = function() {
    var data;
    data = FreeTextView.__super__.serialize.apply(this, arguments);
    data.title = this.options.data.question.content;
    data.min = this.options.data.question.min;
    if (!(data.min > 0)) {
      data.min = 0;
    }
    data.value = this.value;
    data.hasPrompt = true;
    return data;
  };

  FreeTextView.prototype.focus = function() {
    var inputEl, min, prompt, ref, title;
    inputEl = this.getEl("input");
    ref = this.serialize(), title = ref.title, min = ref.min, prompt = ref.prompt;
    if (min === 0) {
      this.changeState(true);
    }
    return $("#text-input-view").off("update").trigger("open", {
      title: title,
      min: min,
      prompt: prompt,
      value: this.value
    }).on("update", (function(_this) {
      return function(e, v) {
        return _this.onUpdate(v, inputEl);
      };
    })(this));
  };

  FreeTextView.prototype.userInput = function() {
    return {
      text: this.value,
      question: {
        content: this.options.data.question.content,
        id: this.options.data.question.id
      }
    };
  };

  FreeTextView.prototype.onUpdate = function(value, el) {
    var isComplete;
    this.value = value;
    isComplete = this.value.length >= this.serialize().min;
    el.textContent = this.value;
    return this.changeState(isComplete);
  };

  FreeTextView.prototype.changeState = function(isComplete) {
    var ref;
    this.setState(((ref = this.value) != null ? ref.length : void 0) > 0, "has-input");
    return this.setState(isComplete ? "touched" : "prompt");
  };

  return FreeTextView;

})(InputView);

module.exports = FreeTextView;
});

;require.register("engine/game-elevator/components/container.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (all, correct, image, title, undefined) {
jade_mixins["image"] = jade_interp = function(imageUrl, klass){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<img" + (jade.attr("src", imageUrl, true, false)) + (jade.cls([klass], [true])) + "/>");
};
buf.push("<div class=\"game-image-title text-center text-bold text-lg\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</div><div class=\"game-box-inner content-fill block-v-lg\"><div class=\"row content-fill\"><div class=\"col-md-4 col-sm-4 content-fill\"><div class=\"block-dk content-fill\"><div class=\"block-md game-image-container text-center\">");
jade_mixins["image"](image,'game-image');
buf.push("</div></div></div><div class=\"col-md-8 col-sm-8 content-fill\"><div class=\"block-flex-ver text-md direction-column\">");
// iterate all
;(function(){
  var $$obj = all;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var attribute = $$obj[i];

buf.push("<div" + (jade.attr("data-is-correct", correct.indexOf(attribute) > -1, true, false)) + (jade.attr("data-index", i, true, false)) + " class=\"btn-attribute block-flex-child block-flex-ver\"><h2 class=\"block-h-md btn-text\">" + (null == (jade_interp = attribute) ? "" : jade_interp) + "</h2></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var attribute = $$obj[i];

buf.push("<div" + (jade.attr("data-is-correct", correct.indexOf(attribute) > -1, true, false)) + (jade.attr("data-index", i, true, false)) + " class=\"btn-attribute block-flex-child block-flex-ver\"><h2 class=\"block-h-md btn-text\">" + (null == (jade_interp = attribute) ? "" : jade_interp) + "</h2></div>");
    }

  }
}).call(this);

buf.push("</div></div></div></div>");}.call(this,"all" in locals_for_with?locals_for_with.all:typeof all!=="undefined"?all:undefined,"correct" in locals_for_with?locals_for_with.correct:typeof correct!=="undefined"?correct:undefined,"image" in locals_for_with?locals_for_with.image:typeof image!=="undefined"?image:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/game-elevator/components/description.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (i18n, image, paragraphs, undefined) {
jade_mixins["image"] = jade_interp = function(imageUrl, klass){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<img" + (jade.attr("src", imageUrl, true, false)) + (jade.cls([klass], [true])) + "/>");
};
buf.push("<div class=\"content-fill content-fit block-lg text-center\"><div class=\"game-description\"><div class=\"block-md\">");
jade_mixins["image"](image,'game-image');
buf.push("</div><div class=\"text-md\">");
// iterate paragraphs
;(function(){
  var $$obj = paragraphs;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var p = $$obj[$index];

buf.push("<p>" + (null == (jade_interp = p) ? "" : jade_interp) + "</p>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var p = $$obj[$index];

buf.push("<p>" + (null == (jade_interp = p) ? "" : jade_interp) + "</p>");
    }

  }
}).call(this);

buf.push("</div><div class=\"block-v-md\"><div class=\"btn btn-muted btn-continue\">" + (jade.escape((jade_interp = i18n("buttons.continue")) == null ? '' : jade_interp)) + "</div></div></div></div>");}.call(this,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"image" in locals_for_with?locals_for_with.image:typeof image!=="undefined"?image:undefined,"paragraphs" in locals_for_with?locals_for_with.paragraphs:typeof paragraphs!=="undefined"?paragraphs:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/game-elevator/model.yaml", function(exports, require, module) {
module.exports = {"title":"game-elevator","display":"The Elevator Game","category":"Game","features":{"stars":true},"model":{"title":{"type":"html","default":"How would you describe..?"},"description":{"type":"html","default":"Which of these facts matches the product? Tap on the correct statement when the product is directly aligned to get points.\n"},"images":{"min":3,"max":12,"type":[{"title":{"type":"html"},"image":{"type":"image"},"correct":{"min":1,"max":4,"type":[{"type":"html"}]},"incorrect":{"min":0,"max":4,"default":0,"type":[{"type":"html"}]},"description":{"type":"html"}}],"help":"Add some correct and/or incorrect attributes to for the image. The total number of attributes should be 3 or 4.\n"},"combine":{"type":"boolean","display":"Mix all attributes together","default":true,"help":"Use attributes of other images as incorrect options."},"game":{"timer":{"limit":{"type":"number","default":20000,"min":1,"display":"Time Limit (seconds)"},"isDisabled":{"type":"boolean","default":false,"display":"Disable","help":"If the timer is disabled, the game ends after one round has been played for each item.\n"}},"stars":{"min":{"type":"int","default":1000,"display":"1 Star"},"max":{"type":"int","default":1000,"display":"All Stars"},"help":"Number of points required to earn stars."}},"prompt":{"type":"html","default":"Select the matching attributes"},"doneText":{"display":"Done text","type":"html","default":"Move on"}},"examples":[{"subtype":"elevator","title":"How would you describe..?","description":"Which of these facts matches the product? Tap on the correct statement when the product is directly aligned to get points.\n","images":[{"title":"Product X","image":"img/examples/product-phone.png","correct":["This is the very first, premier product in the range","Industry-leading colour accuracy","Wireless charging"],"incorrect":[],"description":"This is your chance to talk about the product or image. You can list all of its qualities, so everyone is excited and familiar with it.\n"},{"title":"Product Y","image":"img/examples/product-laptop.png","correct":["It’s the second product","Touch ID","Retina display"],"incorrect":[],"description":"This is your chance to talk about the product or image. You can list all of its qualities, so everyone is excited and familiar with it.\n"},{"title":"Product Z","image":"img/examples/product-tablet.png","correct":["It’s ultra-slim","12‑megapixel camera","Fast Wi‑Fi"],"incorrect":[],"description":"This is your chance to talk about the product or image. You can list all of its qualities, so everyone is excited and familiar with it.\n"}]}]}
});

;require.register("engine/game-elevator/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (description, doneText, hasStars, hasTimeLimit, i18n, prompt, title) {
buf.push("<div class=\"content-intro content-fill content-fit\"><div class=\"block-v-lg text-center content\"><div class=\"row\"><div class=\"col-sm-12 col-md-8 col-md-offset-2\"><h1 class=\"tight\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"text-lg block-v-lg\">" + (null == (jade_interp = description) ? "" : jade_interp) + "</div><div class=\"btn btn-solid play-game\">" + (jade.escape(null == (jade_interp = i18n("game.play-game")) ? "" : jade_interp)) + "</div></div></div></div></div><div class=\"content-outro\"><div class=\"content-fill\"><div class=\"block-v-lg text-center content\"><h1>" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"row\"><div class=\"col-sm-12 col-md-8 col-md-offset-2\"><div class=\"row\"><div" + (jade.cls(['col-sm-6','col-md-4','block-v-md',hasStars ? "" : "col-md-offset-2"], [null,null,null,true])) + "><div class=\"block-md block-dk\"><h4 class=\"white-dot-text bold-italic\">" + (jade.escape(null == (jade_interp = i18n("game.your-score")) ? "" : jade_interp)) + "</h4><h1 class=\"game-total tight\">?</h1></div></div><div class=\"col-sm-6 col-md-4 block-v-md\"><div class=\"block-md block-dk\"><h4 class=\"grey-dot-text bold-italic\">" + (jade.escape(null == (jade_interp = i18n("game.your-best")) ? "" : jade_interp)) + "</h4><h1 class=\"game-record tight\">?</h1></div></div>");
if ( hasStars)
{
buf.push("<div class=\"col-sm-12 col-md-4 block-v-md\"><div class=\"block-md block-dk\"><h4 class=\"grey-dot-text bold-italic\">" + (jade.escape(null == (jade_interp = i18n("game.your-stars")) ? "" : jade_interp)) + "</h4><h1 class=\"game-stars tight\">?<sup class=\"stars-total\"></sup></h1></div></div>");
}
buf.push("</div><div class=\"row block-v-md\"><div class=\"col-sm-12 col-md-8 col-md-offset-2 block-md\"><div class=\"btn btn-solid btn-block play-game\">" + (jade.escape(null == (jade_interp = i18n("game.play-again")) ? "" : jade_interp)) + "</div></div></div></div></div></div></div><div class=\"slide-footer block-v-lg\"><div class=\"btn btn-muted goto-next fade-in\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div></div><div class=\"content-playing\"><div class=\"content-fill full-screen\"><div class=\"game-state block-h-lg\"><div class=\"game-state-inner row block-v-lg\"><div class=\"game-state-text col-md-6 col-sm-6\">");
if ( hasTimeLimit)
{
buf.push("" + (jade.escape((jade_interp = i18n("game.labels.timer")) == null ? '' : jade_interp)) + "\n&ensp;<strong class=\"game-timer text-lg text-bold\"></strong>");
}
buf.push("</div><div class=\"game-state-text col-md-6 col-sm-6 text-right\">" + (jade.escape((jade_interp = i18n("game.labels.score")) == null ? '' : jade_interp)) + "\n&ensp;<strong class=\"game-score text-lg text-bold\"></strong><strong class=\"game-tally\"></strong></div></div></div>");
if ( hasTimeLimit)
{
buf.push("<div class=\"game-stepper\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div>");
}
if ( hasTimeLimit)
{
buf.push("<div class=\"game-bonus-time\"></div>");
}
buf.push("</div><div class=\"content-fill\"><div class=\"game-box content-fill\"></div></div><div class=\"slide-footer slide-up block-v-lg\"><div class=\"text-uppercase text-bold text-ellipsis\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div></div>");}.call(this,"description" in locals_for_with?locals_for_with.description:typeof description!=="undefined"?description:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"hasStars" in locals_for_with?locals_for_with.hasStars:typeof hasStars!=="undefined"?hasStars:undefined,"hasTimeLimit" in locals_for_with?locals_for_with.hasTimeLimit:typeof hasTimeLimit!=="undefined"?hasTimeLimit:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/game-elevator/view.coffee", function(exports, require, module) {
var Device, Easie, GameElevatorView, GameView, Preloader,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

GameView = require("views/base/game");

Preloader = require("lib/preload");

Easie = require("lib/easie");

Device = require("lib/device");

GameElevatorView = (function(superClass) {
  extend(GameElevatorView, superClass);

  function GameElevatorView() {
    return GameElevatorView.__super__.constructor.apply(this, arguments);
  }

  GameElevatorView.prototype.template = require("./template");

  GameElevatorView.prototype.templates = {
    container: require("./components/container"),
    description: require("./components/description")
  };

  GameElevatorView.prototype.events = function() {
    return {
      "iostap .play-game": "enterGame",
      "iostap .goto-next": "next",
      "iostap .btn-attribute": "checkAnswer",
      "iostap .btn-continue": "hideDescription"
    };
  };

  GameElevatorView.prototype.initializeData = function() {
    var image, images;
    GameElevatorView.__super__.initializeData.apply(this, arguments);
    this.game.extra.set("fullscreen", true);
    this.game.extra.set("sounds", true);
    images = this.options.data.images;
    images = (images || []).filter(function(i) {
      return i.image && _.compact(i.correct).length > 0;
    });
    images = images.map(function(i) {
      var j, len, p, ref;
      ref = ["correct", "incorrect"];
      for (j = 0, len = ref.length; j < len; j++) {
        p = ref[j];
        i[p] = _.compact(i[p]);
      }
      return i;
    });
    this.setArray("variant", images);
    return Preloader.load((function() {
      var j, len, results;
      results = [];
      for (j = 0, len = images.length; j < len; j++) {
        image = images[j].image;
        results.push(image);
      }
      return results;
    })(), (function(_this) {
      return function(errors) {
        if (errors == null) {
          errors = [];
        }
        return _this.setArray("variant", _.reject(images, function(variant, i) {
          return _.include(errors, variant.image);
        }));
      };
    })(this));
  };

  GameElevatorView.prototype.initializeElements = function() {
    GameElevatorView.__super__.initializeElements.apply(this, arguments);
    return this.setEl(this.findOne(".game-box"), "container");
  };

  GameElevatorView.prototype.startGame = function() {
    this.answeredCount = 0;
    return GameElevatorView.__super__.startGame.apply(this, arguments);
  };

  GameElevatorView.prototype.showNext = function(isInitial) {
    var correct, el, i, incorrect, j, len, ref, variant;
    if (!isInitial) {
      this.unpauseGame();
    }
    this.game.timer.timestamp = Date.now();
    variant = this.getRandom("variant");
    correct = variant.correct;
    incorrect = this.options.data.combine ? _.chain(this.getArray("variant")).without(variant).pluck("correct").flatten().value() : variant.incorrect;
    correct = _.sample(correct, 4);
    incorrect = _.sample(incorrect, 4 - correct.length);
    this.getEl("container").innerHTML = this.templates.container({
      title: variant.title,
      image: variant.image,
      correct: variant.correct,
      all: _.chain().union(correct, incorrect).shuffle().value()
    });
    this.setEl(this.getEl("container").querySelector(".game-image-container"), "image");
    this.setEl(this.getEl("container").querySelectorAll(".btn-attribute"), "answers");
    this.transform(this.getEl("image"), {
      opacity: 0,
      x: "-100%"
    });
    ref = this.getEl("answers");
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      el = ref[i];
      this.transform(el, {
        opacity: 0,
        x: "100%"
      });
    }
    if (this.getEl("image").firstChild.complete) {
      return this.onImageLoad();
    } else {
      return this.getEl("image").firstChild.onload = (function(_this) {
        return function() {
          return _this.onImageLoad();
        };
      })(this);
    }
  };

  GameElevatorView.prototype.onImageLoad = function() {
    var conHeight, el, i, imgHeight, j, len, ref;
    conHeight = this.getEl("image").parentNode.offsetHeight;
    imgHeight = this.getEl("image").offsetHeight;
    this.getEl("container").classList.remove("hide-description");
    this.transform(this.getEl("image"), {
      opacity: 1,
      transition: "all 300ms"
    });
    ref = this.getEl("answers");
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      el = ref[i];
      this.transform(el, {
        opacity: 1,
        transition: "all 300ms " + (i * 100) + "ms"
      });
    }
    this.game.extra.set({
      animateImage: false
    });
    return window.setTimeout(((function(_this) {
      return function() {
        var k, len1, ref1, results;
        _this.game.extra.set({
          animateImage: true
        });
        _this.transition(_this.getEl("image"), "");
        ref1 = _this.getEl("answers");
        results = [];
        for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {
          el = ref1[i];
          results.push(_this.transition(el, ""));
        }
        return results;
      };
    })(this)), 600);
  };

  GameElevatorView.prototype.onTimerChange = function(m) {
    var alpha, el, i, image, j, len, percent, position, ref, results;
    GameElevatorView.__super__.onTimerChange.apply(this, arguments);
    if (this.game.extra.get("animateImage") && (m.changed.passed != null) && (this.getEl("image") != null)) {
      image = this.getEl("image");
      percent = this.getPercent();
      position = (image.parentNode.offsetHeight - image.offsetHeight) * percent;
      this.transform(this.getEl("image"), {
        y: position
      });
      ref = this.getEl("answers");
      results = [];
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        el = ref[i];
        if (!(!el.classList.contains("selected"))) {
          continue;
        }
        alpha = (1 - Math.abs(this.getDist(i, percent))) * 0.4;
        results.push(el.style.backgroundColor = "rgba(255, 255, 255, " + alpha + ")");
      }
      return results;
    }
  };

  GameElevatorView.prototype.checkAnswer = function(e) {
    var distance, el, index, isComplete, isCorrect, ref, threshold;
    if (this.game.timer.get("paused") || this.getEl("container").classList.contains("hide-attributes")) {
      return;
    }
    el = e.currentTarget;
    ref = el.dataset, isCorrect = ref.isCorrect, index = ref.index;
    distance = Math.abs(this.getDist(index, this.getPercent()));
    threshold = 0.2;
    if (distance > threshold) {
      return;
    }
    el.classList.add("selected");
    isComplete = _.chain(this.getEl("answers")).filter(function(el) {
      return el.dataset.isCorrect && !el.classList.contains("selected");
    }).isEmpty().value();
    if (isCorrect) {
      this.onCorrectAnswer({
        score: 1000,
        time: isComplete ? 1000 : 0,
        tally: true
      });
    } else {
      this.onIncorrectAnswer({
        time: 1000,
        tally: true
      });
    }
    if (isComplete || !isCorrect) {
      return this.showDescription();
    }
  };

  GameElevatorView.prototype.showDescription = function() {
    var description;
    this.getEl("container").classList.add("hide-attributes");
    this.getEl("container").scrollTop = 0;
    this.pauseGame();
    description = this.templates.description({
      image: this.data.variant.lastValue.image,
      paragraphs: this.data.variant.lastValue.description.split(/\n+/)
    });
    return this.getEl("container").innerHTML = description;
  };

  GameElevatorView.prototype.hideDescription = function() {
    this.answeredCount += 1;
    this.getEl("container").classList.add("hide-description");
    return window.setTimeout(((function(_this) {
      return function() {
        _this.getEl("container").classList.remove("hide-attributes");
        if (_this.game.timer.get("isDisabled") && _this.answeredCount === _this.getArray("variant").length) {
          _this.endGame();
          return;
        }
        _this.showNext();
        if (!_this.game.timer.get("isDisabled")) {
          return _this.game.timer.trigger("count", {
            callback: function() {
              return _this.game.timer.trigger("start", {
                callback: function() {
                  return _this.endGame();
                }
              });
            }
          });
        }
      };
    })(this)), 600);
  };

  GameElevatorView.prototype.getDuration = function() {
    return 3000;
  };

  GameElevatorView.prototype.getPercent = function() {
    var circle, duration, timeDiff;
    timeDiff = Date.now() - this.game.timer.timestamp;
    duration = this.getDuration();
    circle = 2 * Math.PI;
    return (1 - Math.sin(timeDiff * circle / duration)) / 2;
  };

  GameElevatorView.prototype.getDist = function(i, percent) {
    return Math.abs(i / (this.getEl("answers").length - 1) - percent);
  };

  return GameElevatorView;

})(GameView);

module.exports = GameElevatorView;
});

;require.register("engine/game-image-word-match/components/container.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (config, image, playinline, prompt, undefined, words) {
jade_mixins["video-stream"] = jade_interp = function(videoUrl, playsinline, controls, klass, poster){
var block = (this && this.block), attributes = (this && this.attributes) || {};
playinline = playinline || true
controls = controls || true
klass = klass || 'video vjs-fluid'
var cloudinaryVideoFolderUrl = config.CLOUDINARY_CDN_URL+config.CLOUDINARY_VIDEO_FOLDER
var streamUrl = ''
if ( videoUrl && videoUrl.indexOf(cloudinaryVideoFolderUrl) > -1)
{
streamUrl = videoUrl.replace(cloudinaryVideoFolderUrl, cloudinaryVideoFolderUrl+'sp_full_hd/')
streamUrl = streamUrl.replace('.mp4', '.m3u8')
}
buf.push("<video" + (jade.attr("webkit-playsinline", playsinline, true, false)) + (jade.attr("controls", controls, true, false)) + " preload=\"auto\"" + (jade.attr("dir", config.direction, true, false)) + (jade.attr("poster", poster, true, false)) + (jade.cls(['video-js',klass], [null,true])) + "><source" + (jade.attr("src", videoUrl, true, false)) + "/>");
if ( streamUrl)
{
buf.push("<source" + (jade.attr("src", streamUrl, true, false)) + "/>");
}
buf.push("</video>");
};
jade_mixins["image"] = jade_interp = function(imageUrl, klass){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<img" + (jade.attr("src", imageUrl, true, false)) + (jade.cls([klass], [true])) + "/>");
};
jade_mixins["multi-content"] = jade_interp = function(prop, obj){
var block = (this && this.block), attributes = (this && this.attributes) || {};
obj = obj || locals;
switch (obj[prop + "Type"]){
case "image":
buf.push("<div" + (jade.attr("data-content", obj.image, true, false)) + " class=\"multi-content-wrapper multi-content-wrapper-image block-md block-lt\"><div class=\"block-sm multi-content-media\">");
jade_mixins["image"](obj[prop], 'multi-content multi-content-image');
buf.push("</div></div>");
  break;
case "video":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-video block-md block-lt\"><div class=\"block-sm multi-content-media\">");
jade_mixins["video-stream"](obj[prop], true, true,"multi-content multi-content-video block-dk");
buf.push("</div></div>");
  break;
case "audio":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-audio block-md block-lt\"><div class=\"block-sm multi-content-media\"><audio" + (jade.attr("src", obj[prop], true, false)) + " playsinline=\"playsinline\" preload=\"auto\" controls=\"controls\"" + (jade.attr("dir", config.direction, true, false)) + " class=\"multi-content multi-content-audio block-dk\"></audio></div></div>");
  break;
case "iframe":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-iframe block-md block-lt\"><div class=\"block-sm multi-content-iframe\">");
var iframe = obj[prop].match(/<iframe[^<]*<\/iframe>/)
if ( iframe)
{
buf.push(null == (jade_interp = iframe[0].replace(/ (width|height)=["'\d\w]+/g, "")) ? "" : jade_interp);
}
buf.push("</div></div>");
  break;
default:
buf.push("<span class=\"multi-content multi-content-text\">" + (null == (jade_interp = obj[prop]) ? "" : jade_interp) + "</span>");
  break;
}
};
buf.push("<div class=\"match-top block-v-md block-h-xl\"><div class=\"text-center match-top-content\"><h4 class=\"block-v-md match-prompt text-md\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</h4><div class=\"match-image-container block-v-md text-center block-lt\"><h1 class=\"match-image\">");
jade_mixins["multi-content"]("image", image);
buf.push("</h1></div></div></div><div class=\"match-words clearfix text-lg\">");
// iterate words
;(function(){
  var $$obj = words;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var word = $$obj[i];

buf.push("<div" + (jade.attr("data-answer", word, true, false)) + (jade.attr("data-is-correct", word === image.title, true, false)) + (jade.cls(['btn-word','text-center',"delay-" + (i) + ""], [null,null,true])) + ">" + (null == (jade_interp = word) ? "" : jade_interp) + "</div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var word = $$obj[i];

buf.push("<div" + (jade.attr("data-answer", word, true, false)) + (jade.attr("data-is-correct", word === image.title, true, false)) + (jade.cls(['btn-word','text-center',"delay-" + (i) + ""], [null,null,true])) + ">" + (null == (jade_interp = word) ? "" : jade_interp) + "</div>");
    }

  }
}).call(this);

buf.push("</div>");}.call(this,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined,"image" in locals_for_with?locals_for_with.image:typeof image!=="undefined"?image:undefined,"playinline" in locals_for_with?locals_for_with.playinline:typeof playinline!=="undefined"?playinline:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined,"words" in locals_for_with?locals_for_with.words:typeof words!=="undefined"?words:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/game-image-word-match/model.yaml", function(exports, require, module) {
module.exports = {"title":"game-image-word-match","display":"Image/Word Match","category":"Game","features":{"stars":true},"model":{"title":{"type":"html","default":"Match the image to the word"},"description":{"type":"html","default":"Select the correct word related to the image. Speed and accuracy will score you the most points.\n"},"images":{"min":3,"max":20,"type":[{"image":{"types":["image","text"],"display":"Content"},"title":{"type":"html"}}]},"game":{"timer":{"limit":{"type":"number","default":20000,"min":1,"display":"Time Limit (seconds)"},"isDisabled":{"type":"boolean","default":false,"display":"Disable","help":"If the timer is disabled, the game ends after one round has been played for each image.\n"}},"stars":{"min":{"type":"int","default":1000,"display":"1 Star"},"max":{"type":"int","default":1000,"display":"All Stars"},"help":"Number of points required to earn stars. 500 points are earned per question. Don’t forget to have enough time and questions to earn all the stars!"}},"prompt":{"type":"html","default":"Select the word that matches the image"},"doneText":{"display":"Done text","type":"html","default":"Move on"}},"examples":[{"subtype":"image-word-match","images":[{"image":"Sample Text","imageType":"text","title":"Product description"},{"image":"img/examples/product-laptop.png","imageType":"image","title":"Retina display"},{"image":"img/examples/product-tablet.png","imageType":"image","title":"Touch screen"}],"challenge_configuration":{"nb_stars":5},"title":"Match the image to the word","description":"Select the correct word related to the image. Speed and accuracy will score you the most points.\n","prompt":"Select the word that matches the image"}]}
});

;require.register("engine/game-image-word-match/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (description, doneText, hasStars, hasTimeLimit, i18n, title) {
buf.push("<div class=\"content-intro content-fill content-fit\"><div class=\"block-v-lg text-center content\"><div class=\"row\"><div class=\"col-sm-12 col-md-8 col-md-offset-2\"><h1 class=\"tight\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"text-lg block-v-lg\">" + (null == (jade_interp = description) ? "" : jade_interp) + "</div><div class=\"btn btn-solid play-game\">" + (jade.escape(null == (jade_interp = i18n("game.play-game")) ? "" : jade_interp)) + "</div></div></div></div></div><div class=\"content-outro\"><div class=\"content-fill\"><div class=\"block-v-lg text-center content\"><h1>" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"row\"><div class=\"col-sm-12 col-md-8 col-md-offset-2\"><div class=\"row\"><div" + (jade.cls(['col-sm-6','col-md-4','block-v-md',hasStars ? "" : "col-md-offset-2"], [null,null,null,true])) + "><div class=\"block-md block-dk\"><h4 class=\"white-dot-text bold-italic\">" + (jade.escape(null == (jade_interp = i18n("game.your-score")) ? "" : jade_interp)) + "</h4><h1 class=\"game-total tight\">?</h1></div></div><div class=\"col-sm-6 col-md-4 block-v-md\"><div class=\"block-md block-dk\"><h4 class=\"grey-dot-text bold-italic\">" + (jade.escape(null == (jade_interp = i18n("game.your-best")) ? "" : jade_interp)) + "</h4><h1 class=\"game-record tight\">?</h1></div></div>");
if ( hasStars)
{
buf.push("<div class=\"col-sm-12 col-md-4 block-v-md\"><div class=\"block-md block-dk\"><h4 class=\"grey-dot-text bold-italic\">" + (jade.escape(null == (jade_interp = i18n("game.your-stars")) ? "" : jade_interp)) + "</h4><h1 class=\"game-stars tight\">?<sup class=\"stars-total\"></sup></h1></div></div>");
}
buf.push("</div><div class=\"row block-v-md\"><div class=\"col-sm-12 col-md-8 col-md-offset-2 block-md\"><div class=\"btn btn-solid btn-block play-game\">" + (jade.escape(null == (jade_interp = i18n("game.play-again")) ? "" : jade_interp)) + "</div></div></div></div></div></div></div><div class=\"slide-footer block-v-lg\"><div class=\"btn btn-muted goto-next fade-in\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div></div><div class=\"content-playing\"><div class=\"full-screen\"><div class=\"game-state block-h-lg\"><div class=\"game-state-inner row block-v-lg\"><div class=\"game-state-text col-md-6 col-sm-6\">");
if ( hasTimeLimit)
{
buf.push("" + (jade.escape((jade_interp = i18n("game.labels.timer")) == null ? '' : jade_interp)) + "\n&ensp;<strong class=\"game-timer text-lg text-bold\"></strong>");
}
buf.push("</div><div class=\"game-state-text col-md-6 col-sm-6 text-right\">" + (jade.escape((jade_interp = i18n("game.labels.score")) == null ? '' : jade_interp)) + "\n&ensp;<strong class=\"game-score text-lg text-bold\"></strong><strong class=\"game-tally\"></strong></div></div></div>");
if ( hasTimeLimit)
{
buf.push("<div class=\"game-stepper\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div>");
}
if ( hasTimeLimit)
{
buf.push("<div class=\"game-bonus-time\"></div>");
}
buf.push("<div class=\"game-box content-fill\"></div></div></div>");}.call(this,"description" in locals_for_with?locals_for_with.description:typeof description!=="undefined"?description:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"hasStars" in locals_for_with?locals_for_with.hasStars:typeof hasStars!=="undefined"?hasStars:undefined,"hasTimeLimit" in locals_for_with?locals_for_with.hasTimeLimit:typeof hasTimeLimit!=="undefined"?hasTimeLimit:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/game-image-word-match/view.coffee", function(exports, require, module) {
var GameImageWordMatchView, GameView, Preloader, container,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

GameView = require("views/base/game");

container = require("./components/container");

Preloader = require("lib/preload");

GameImageWordMatchView = (function(superClass) {
  extend(GameImageWordMatchView, superClass);

  function GameImageWordMatchView() {
    return GameImageWordMatchView.__super__.constructor.apply(this, arguments);
  }

  GameImageWordMatchView.prototype.template = require("./template");

  GameImageWordMatchView.prototype.events = function() {
    return {
      "iostap .play-game": "enterGame",
      "iostap .goto-next": "next",
      "iostap  .btn-word": "checkAnswer"
    };
  };

  GameImageWordMatchView.prototype.initializeData = function() {
    var images, toLoad;
    GameImageWordMatchView.__super__.initializeData.apply(this, arguments);
    this.game.extra.set("fullscreen", true);
    this.game.extra.set("sounds", true);
    images = _.chain(this.options.data.images).map(function(m) {
      if (!m.imageType || m.imageType === "") {
        m.imageType = "image";
      }
      return m;
    }).filter(function(m) {
      return m.title && m.title !== "";
    }).value();
    this.setArray(images, "images");
    toLoad = _.chain(images).where({
      imageType: "image"
    }).pluck("image").value();
    if (!toLoad.length) {
      return;
    }
    return Preloader.load(toLoad, (function(_this) {
      return function(errors) {
        return _this.setArray(_.reject(images, function(m) {
          return errors.indexOf(m.image) > -1;
        }), "images");
      };
    })(this));
  };

  GameImageWordMatchView.prototype.initializeElements = function() {
    GameImageWordMatchView.__super__.initializeElements.apply(this, arguments);
    return this.setEl(this.findOne(".game-box"), "container");
  };

  GameImageWordMatchView.prototype.startGame = function() {
    this.game.timer.timestamp = Date.now();
    this.answeredCount = 0;
    return GameImageWordMatchView.__super__.startGame.apply(this, arguments);
  };

  GameImageWordMatchView.prototype.showNext = function(isFirstRun) {
    var image;
    image = this.getRandom("images");
    this.game.timer.timestamp = Date.now();
    this.getEl("container").innerHTML = container(_.extend({}, this.options.data, {
      image: image,
      words: _.chain(this.getArray("images")).pluck("title").without(image.title).uniq().sample(2).concat(image.title).shuffle().value()
    }));
    this.getEl("container").offsetTop;
    return this.getEl("container").classList.remove("hidden");
  };

  GameImageWordMatchView.prototype.checkAnswer = function(e) {
    var isCorrect, ref, word;
    if (this.game.timer.get("paused")) {
      return;
    }
    ref = e.currentTarget.dataset, word = ref.word, isCorrect = ref.isCorrect;
    if (isCorrect != null) {
      this.onCorrectAnswer({
        score: 500,
        time: 1000,
        tally: true
      });
    } else {
      this.onIncorrectAnswer({
        time: 300,
        tally: true
      });
    }
    this.getEl("container").classList.add("hidden");
    this.answeredCount += 1;
    return window.setTimeout(((function(_this) {
      return function() {
        if (_this.game.timer.get("isDisabled") && _this.answeredCount === _this.getArray("images").length) {
          _this.endGame();
          return;
        }
        return _this.showNext();
      };
    })(this)), 1200);
  };

  return GameImageWordMatchView;

})(GameView);

module.exports = GameImageWordMatchView;
});

;require.register("engine/game-jeopardy/components/menu.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (categories, undefined) {
var col = 12 / categories.length;
var klass = "col-sm-" + col + " col-md-" + col;
buf.push("<div class=\"content-ver block-v-md\"><div class=\"row text-center\">");
// iterate categories
;(function(){
  var $$obj = categories;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var category = $$obj[i];

buf.push("<h2" + (jade.cls(['tight','game-category-title',klass], [null,null,true])) + "><div class=\"content-ver\">" + (null == (jade_interp = category.title) ? "" : jade_interp) + "</div></h2>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var category = $$obj[i];

buf.push("<h2" + (jade.cls(['tight','game-category-title',klass], [null,null,true])) + "><div class=\"content-ver\">" + (null == (jade_interp = category.title) ? "" : jade_interp) + "</div></h2>");
    }

  }
}).call(this);

buf.push("</div><div class=\"row text-center\">");
// iterate categories
;(function(){
  var $$obj = categories;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var category = $$obj[i];

buf.push("<div" + (jade.cls(['game-category',klass], [null,true])) + "><div class=\"block-v-sm\">");
// iterate category.questions
;(function(){
  var $$obj = category.questions;
  if ('number' == typeof $$obj.length) {

    for (var j = 0, $$l = $$obj.length; j < $$l; j++) {
      var question = $$obj[j];

buf.push("<div" + (jade.attr("data-category", i, true, false)) + (jade.attr("data-question", j, true, false)) + " class=\"btn-question block-v-sm\"><div" + (jade.attr("data-category", i, true, false)) + (jade.attr("data-question", j, true, false)) + (jade.cls(['block-md','block-dk',"stars-" + (j + 1) + ""], [null,null,true])) + "><div" + (jade.attr("data-category", i, true, false)) + (jade.attr("data-question", j, true, false)) + " class=\"text-lg\">" + (jade.escape(null == (jade_interp = (j + 1) * 200) ? "" : jade_interp)) + "</div></div></div>");
    }

  } else {
    var $$l = 0;
    for (var j in $$obj) {
      $$l++;      var question = $$obj[j];

buf.push("<div" + (jade.attr("data-category", i, true, false)) + (jade.attr("data-question", j, true, false)) + " class=\"btn-question block-v-sm\"><div" + (jade.attr("data-category", i, true, false)) + (jade.attr("data-question", j, true, false)) + (jade.cls(['block-md','block-dk',"stars-" + (j + 1) + ""], [null,null,true])) + "><div" + (jade.attr("data-category", i, true, false)) + (jade.attr("data-question", j, true, false)) + " class=\"text-lg\">" + (jade.escape(null == (jade_interp = (j + 1) * 200) ? "" : jade_interp)) + "</div></div></div>");
    }

  }
}).call(this);

buf.push("</div></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var category = $$obj[i];

buf.push("<div" + (jade.cls(['game-category',klass], [null,true])) + "><div class=\"block-v-sm\">");
// iterate category.questions
;(function(){
  var $$obj = category.questions;
  if ('number' == typeof $$obj.length) {

    for (var j = 0, $$l = $$obj.length; j < $$l; j++) {
      var question = $$obj[j];

buf.push("<div" + (jade.attr("data-category", i, true, false)) + (jade.attr("data-question", j, true, false)) + " class=\"btn-question block-v-sm\"><div" + (jade.attr("data-category", i, true, false)) + (jade.attr("data-question", j, true, false)) + (jade.cls(['block-md','block-dk',"stars-" + (j + 1) + ""], [null,null,true])) + "><div" + (jade.attr("data-category", i, true, false)) + (jade.attr("data-question", j, true, false)) + " class=\"text-lg\">" + (jade.escape(null == (jade_interp = (j + 1) * 200) ? "" : jade_interp)) + "</div></div></div>");
    }

  } else {
    var $$l = 0;
    for (var j in $$obj) {
      $$l++;      var question = $$obj[j];

buf.push("<div" + (jade.attr("data-category", i, true, false)) + (jade.attr("data-question", j, true, false)) + " class=\"btn-question block-v-sm\"><div" + (jade.attr("data-category", i, true, false)) + (jade.attr("data-question", j, true, false)) + (jade.cls(['block-md','block-dk',"stars-" + (j + 1) + ""], [null,null,true])) + "><div" + (jade.attr("data-category", i, true, false)) + (jade.attr("data-question", j, true, false)) + " class=\"text-lg\">" + (jade.escape(null == (jade_interp = (j + 1) * 200) ? "" : jade_interp)) + "</div></div></div>");
    }

  }
}).call(this);

buf.push("</div></div>");
    }

  }
}).call(this);

buf.push("</div></div>");}.call(this,"categories" in locals_for_with?locals_for_with.categories:typeof categories!=="undefined"?categories:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/game-jeopardy/components/question.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (answers, i18n, question, stars) {
buf.push("<div class=\"content-ver text-center\"><div class=\"text-md block-v-lg\"><h2>" + (null == (jade_interp = question.content) ? "" : jade_interp) + "</h2></div><div class=\"block-v-md row\"><div class=\"col-md-3 col-md-offset-3 col-sm-6\"><div" + (jade.attr("data-question-id", question.id, true, false)) + (jade.attr("data-answer-id", answers.false.id, true, false)) + (jade.attr("data-is-correct", (answers.false.correct), true, false)) + (jade.attr("data-stars", stars, true, false)) + " class=\"btn btn-solid btn-block btn-check\">" + (jade.escape(null == (jade_interp = i18n("game-jeopardy.is-false")) ? "" : jade_interp)) + "</div></div><div class=\"col-md-3 col-sm-6\"><div" + (jade.attr("data-question-id", question.id, true, false)) + (jade.attr("data-answer-id", answers.true.id, true, false)) + (jade.attr("data-is-correct", (answers.true.correct), true, false)) + (jade.attr("data-stars", stars, true, false)) + " class=\"btn btn-solid btn-block btn-check\">" + (jade.escape(null == (jade_interp = i18n("game-jeopardy.is-true")) ? "" : jade_interp)) + "</div></div></div></div>");}.call(this,"answers" in locals_for_with?locals_for_with.answers:typeof answers!=="undefined"?answers:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"question" in locals_for_with?locals_for_with.question:typeof question!=="undefined"?question:undefined,"stars" in locals_for_with?locals_for_with.stars:typeof stars!=="undefined"?stars:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/game-jeopardy/model.yaml", function(exports, require, module) {
module.exports = {"title":"game-jeopardy","display":"Jeopardy","category":"Game","features":{"stars":true},"model":{"title":{"type":"html","default":"Jeopardy"},"description":{"type":"html","default":"How many stars can you earn? Choose questions from one of three topics. Harder questions will earn you more stars, but answer any question incorrectly and it’s game over!\n"},"categories":{"min":3,"max":3,"type":[{"title":{"type":"html","display":"Category"},"questions":{"min":5,"max":5,"type":[{"mix":{"min":1,"max":3,"type":[{"text":{"type":"html"},"true":{"type":"boolean","display":"Correct"}}]}}]},"help":"Add at least five questions to each category, starting with the easiest worth 200 points.\n"}]},"game":{"timer":{"limit":{"type":"number","default":20000,"min":1,"display":"Time Limit (seconds)"},"isDisabled":{"type":"boolean","default":false,"display":"Disable","help":"If the timer is disabled, the game ends at the first wrong answer or until all questions are answered.\n"}},"stars":{"min":{"type":"int","default":1000,"display":"1 Star"},"max":{"type":"int","default":1000,"display":"All Stars"},"help":"Number of points required to earn stars."}},"prompt":{"type":"html","default":"Select a question from any category"},"doneText":{"display":"Done text","type":"html","default":"Move on"}},"examples":[{"subtype":"jeopardy","title":"Jeopardy","description":"How many stars can you earn? Choose questions from one of three topics. Harder questions will earn you more stars, but answer any question incorrectly and it’s game over!\n","prompt":"Select a question from any category","categories":[{"title":"Category 1","questions":[{"mix":[{"text":"Question 1","true":true},{"text":"Question 2","true":false},{"text":"Question 3","true":true}]},{"mix":[{"text":"Question 1","true":true},{"text":"Question 2","true":false},{"text":"Question 3","true":true}]},{"mix":[{"text":"Question 1","true":true},{"text":"Question 2","true":false},{"text":"Question 3","true":true}]},{"mix":[{"text":"Question 1","true":true},{"text":"Question 2","true":false},{"text":"Question 3","true":true}]},{"mix":[{"text":"Question 1","true":true},{"text":"Question 2","true":false},{"text":"Question 3","true":true}]}]},{"title":"Category 2","questions":[{"mix":[{"text":"Question 1","true":true},{"text":"Question 2","true":false},{"text":"Question 3","true":true}]},{"mix":[{"text":"Question 1","true":true},{"text":"Question 2","true":false},{"text":"Question 3","true":true}]},{"mix":[{"text":"Question 1","true":true},{"text":"Question 2","true":false},{"text":"Question 3","true":true}]},{"mix":[{"text":"Question 1","true":true},{"text":"Question 2","true":false},{"text":"Question 3","true":true}]},{"mix":[{"text":"Question 1","true":true},{"text":"Question 2","true":false},{"text":"Question 3","true":true}]}]},{"title":"Category 3","questions":[{"mix":[{"text":"Question 1","true":true},{"text":"Question 2","true":false},{"text":"Question 3","true":true}]},{"mix":[{"text":"Question 1","true":true},{"text":"Question 2","true":false},{"text":"Question 3","true":true}]},{"mix":[{"text":"Question 1","true":true},{"text":"Question 2","true":false},{"text":"Question 3","true":true}]},{"mix":[{"text":"Question 1","true":true},{"text":"Question 2","true":false},{"text":"Question 3","true":true}]},{"mix":[{"text":"Question 1","true":true},{"text":"Question 2","true":false},{"text":"Question 3","true":true}]}]}]}]}
});

;require.register("engine/game-jeopardy/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (description, doneText, hasStars, hasTimeLimit, i18n, prompt, title) {
buf.push("<div class=\"content-intro content-fill content-fit\"><div class=\"block-v-lg text-center content\"><div class=\"row\"><div class=\"col-sm-12 col-md-8 col-md-offset-2\"><h1 class=\"tight\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"text-lg block-v-lg\">" + (null == (jade_interp = description) ? "" : jade_interp) + "</div><div class=\"btn btn-solid play-game\">" + (jade.escape(null == (jade_interp = i18n("game.play-game")) ? "" : jade_interp)) + "</div></div></div></div></div><div class=\"content-outro\"><div class=\"content-fill\"><div class=\"block-v-lg text-center content\"><h1>" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"row\"><div class=\"col-sm-12 col-md-8 col-md-offset-2\"><div class=\"row\"><div" + (jade.cls(['col-sm-6','col-md-4','block-v-md',hasStars ? "" : "col-md-offset-2"], [null,null,null,true])) + "><div class=\"block-md block-dk\"><h4 class=\"white-dot-text bold-italic\">" + (jade.escape(null == (jade_interp = i18n("game.your-score")) ? "" : jade_interp)) + "</h4><h1 class=\"game-total tight\">?</h1></div></div><div class=\"col-sm-6 col-md-4 block-v-md\"><div class=\"block-md block-dk\"><h4 class=\"grey-dot-text bold-italic\">" + (jade.escape(null == (jade_interp = i18n("game.your-best")) ? "" : jade_interp)) + "</h4><h1 class=\"game-record tight\">?</h1></div></div>");
if ( hasStars)
{
buf.push("<div class=\"col-sm-12 col-md-4 block-v-md\"><div class=\"block-md block-dk\"><h4 class=\"grey-dot-text bold-italic\">" + (jade.escape(null == (jade_interp = i18n("game.your-stars")) ? "" : jade_interp)) + "</h4><h1 class=\"game-stars tight\">?<sup class=\"stars-total\"></sup></h1></div></div>");
}
buf.push("</div><div class=\"row block-v-md\"><div class=\"col-sm-12 col-md-8 col-md-offset-2 block-md\"><div class=\"btn btn-solid btn-block play-game\">" + (jade.escape(null == (jade_interp = i18n("game.play-again")) ? "" : jade_interp)) + "</div></div></div></div></div></div></div><div class=\"slide-footer block-v-lg\"><div class=\"btn btn-muted goto-next fade-in\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div></div><div class=\"content-playing\"><div class=\"full-screen content-fill\"><div class=\"game-state block-h-lg\"><div class=\"game-state-inner row block-v-lg\"><div class=\"game-state-text col-md-6 col-sm-6\">");
if ( hasTimeLimit)
{
buf.push("" + (jade.escape((jade_interp = i18n("game.labels.timer")) == null ? '' : jade_interp)) + "\n&ensp;<strong class=\"game-timer text-lg text-bold\"></strong>");
}
buf.push("</div><div class=\"game-state-text col-md-6 col-sm-6 text-right\">" + (jade.escape((jade_interp = i18n("game.labels.score")) == null ? '' : jade_interp)) + "\n&ensp;<strong class=\"game-score text-lg text-bold\"></strong><strong class=\"game-tally\"></strong></div></div></div>");
if ( hasTimeLimit)
{
buf.push("<div class=\"game-stepper\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div>");
}
if ( hasTimeLimit)
{
buf.push("<div class=\"game-bonus-time\"></div>");
}
buf.push("</div><div class=\"content-fill\"><div class=\"game-box content-fill\"><div class=\"game-menu content-fill\"></div><div class=\"game-question content-fill\"></div></div></div><div class=\"slide-footer slide-up block-v-lg\"><div class=\"slide-footer-prompt text-bold text-uppercase\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div></div>");}.call(this,"description" in locals_for_with?locals_for_with.description:typeof description!=="undefined"?description:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"hasStars" in locals_for_with?locals_for_with.hasStars:typeof hasStars!=="undefined"?hasStars:undefined,"hasTimeLimit" in locals_for_with?locals_for_with.hasTimeLimit:typeof hasTimeLimit!=="undefined"?hasTimeLimit:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/game-jeopardy/view.coffee", function(exports, require, module) {
var Easie, GameJeopardyView, GameView, Preloader,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

GameView = require("views/base/game");

Preloader = require("lib/preload");

Easie = require("lib/easie");

GameJeopardyView = (function(superClass) {
  extend(GameJeopardyView, superClass);

  function GameJeopardyView() {
    return GameJeopardyView.__super__.constructor.apply(this, arguments);
  }

  GameJeopardyView.prototype.templates = {
    "default": require("./template"),
    menu: require("./components/menu"),
    question: require("./components/question")
  };

  GameJeopardyView.prototype.events = function() {
    return {
      "iostap .play-game": "enterGame",
      "iostap .goto-next": "next",
      "iostap .btn-question": "showQuestion",
      "iostap .btn-check": "checkAnswer"
    };
  };

  GameJeopardyView.prototype.initializeData = function() {
    var base, categories, category, data, i, j, k, l, len, len1, len2, m, metadata, mix, q, ref, ref1, ref2;
    GameJeopardyView.__super__.initializeData.apply(this, arguments);
    this.guesses = [];
    this.game.extra.set("fullscreen", true);
    this.game.extra.set("sounds", true);
    ref = this.options, metadata = ref.metadata, data = ref.data;
    categories = _.chain(metadata.questions).groupBy(function(arg) {
      var question;
      question = arg.question;
      return question.category;
    }).map(function(unOrderedQuestions, title) {
      return {
        title: title,
        unOrderedQuestions: unOrderedQuestions
      };
    }).value();
    for (i = k = 0, len = categories.length; k < len; i = ++k) {
      category = categories[i];
      categories[i].questions = [];
      ref2 = (ref1 = data.categories[i]) != null ? ref1.questions : void 0;
      for (j = l = 0, len1 = ref2.length; l < len1; j = ++l) {
        mix = ref2[j].mix;
        if ((base = categories[i].questions)[j] == null) {
          base[j] = {
            mix: []
          };
        }
        for (m = 0, len2 = mix.length; m < len2; m++) {
          q = mix[m];
          categories[i].questions[j].mix.push(categories[i].unOrderedQuestions.shift());
        }
      }
    }
    this.questionsDict = _.chain(metadata.questions).pluck('question').indexBy('id').value();
    this.answersDict = _.chain(metadata.questions).pluck('answers').flatten().indexBy('id').value();
    return this.setArray("categories", categories);
  };

  GameJeopardyView.prototype.initializeElements = function() {
    GameJeopardyView.__super__.initializeElements.apply(this, arguments);
    this.setEl(this.findOne(".game-menu"), "menu");
    return this.setEl(this.findOne(".game-question"), "question");
  };

  GameJeopardyView.prototype.showNext = function(isInitial) {
    this.getEl("menu").innerHTML = this.templates.menu({
      categories: this.getArray("categories")
    });
    return this.setEl(this.getEl("menu").querySelectorAll(".btn-question"), "questions");
  };

  GameJeopardyView.prototype.showQuestion = function(e) {
    var category, falseAnswer, question, questions, randomQuestion, ref, ref1, trueAnswer;
    if (this.game.timer.get("paused")) {
      return;
    }
    ref = e.currentTarget.dataset, category = ref.category, question = ref.question;
    questions = this.getArray("categories")[parseInt(category)].questions[parseInt(question)].mix;
    randomQuestion = _.sample(questions);
    ref1 = _.partition(randomQuestion.answers, function(a) {
      return a.content === "true" || a.content === "True";
    }), trueAnswer = ref1[0], falseAnswer = ref1[1];
    [trueAnswer, falseAnswer].map(function(a) {
      return a[0].content = a[0].content.toString();
    });
    e.currentTarget.classList.add("question-answered");
    this.getEl("question").innerHTML = this.templates.question({
      question: randomQuestion.question,
      answers: {
        "true": trueAnswer[0],
        "false": falseAnswer[0]
      },
      stars: +question + 1
    });
    this.getEl("question").offsetLeft;
    return this.el.classList.add("show-question");
  };

  GameJeopardyView.prototype.checkAnswer = function(e) {
    var answer, answerId, el, isComplete, isCorrect, question, questionId, ref, stars;
    el = e.currentTarget;
    ref = el.dataset, questionId = ref.questionId, answerId = ref.answerId, stars = ref.stars;
    question = this.questionsDict[questionId];
    answer = this.answersDict[answerId];
    this.guesses.push(question, answer);
    if (this.game.timer.get("paused") || !this.el.classList.contains("show-question")) {
      return;
    }
    this.el.classList.remove("show-question");
    isCorrect = answer != null ? answer.correct : void 0;
    isComplete = _.chain(this.getEl("questions")).filter(function(el) {
      return !el.classList.contains("question-answered");
    }).isEmpty().value();
    if (isCorrect) {
      this.onCorrectAnswer({
        score: 200 * stars,
        time: 4000,
        tally: true
      });
    }
    if (isComplete || !isCorrect) {
      return this.endGame();
    }
  };

  GameJeopardyView.prototype.answerDetails = function() {
    var ref, ref1, ref2;
    if (((ref = this.options) != null ? (ref1 = ref.metadata) != null ? (ref2 = ref1.questions) != null ? ref2.length : void 0 : void 0 : void 0) > 0) {
      return this.guesses;
    } else {
      return [];
    }
  };

  return GameJeopardyView;

})(GameView);

module.exports = GameJeopardyView;
});

;require.register("engine/game-jumble/components/container.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (Array, complete, i18n, ids, image, letters, undefined, word) {
jade_mixins["image"] = jade_interp = function(imageUrl, klass){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<img" + (jade.attr("src", imageUrl, true, false)) + (jade.cls([klass], [true])) + "/>");
};
jade_mixins["image"] = jade_interp = function(imageUrl, klass){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<img" + (jade.attr("src", imageUrl, true, false)) + (jade.cls([klass], [true])) + "/>");
};
var klass = "jumble-answer-" + word.toLowerCase();
var multiline = /[\s-]/.test(word) && word.length > 7;
if (multiline) klass += " multiline";
buf.push("<div class=\"jumble-top\"><div class=\"jumble-top-content block-h-xl\"><div class=\"block-v-md\"><div class=\"jumble-image-container block-lt block-v-sm\">");
jade_mixins["image"](image,'jumble-image content-ver');
buf.push("<div class=\"jumble-masks\">");
// iterate (new Array(60))
;(function(){
  var $$obj = (new Array(60));
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var m = $$obj[$index];

buf.push("<div class=\"jumble-mask\"></div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var m = $$obj[$index];

buf.push("<div class=\"jumble-mask\"></div>");
    }

  }
}).call(this);

buf.push("</div></div></div><div" + (jade.cls(['jumble-answer','block-v-sm',klass], [null,null,true])) + ">");
// iterate word
;(function(){
  var $$obj = word;
  if ('number' == typeof $$obj.length) {

    for (var j = 0, $$l = $$obj.length; j < $$l; j++) {
      var letter = $$obj[j];

var i = complete.indexOf(letter);
if ( /[\s-]/.test(letter))
{
if ( multiline)
{
if ( letter != " ")
{
buf.push("<div class=\"droppy-complete\">" + (jade.escape(null == (jade_interp = letter) ? "" : jade_interp)) + "</div><div class=\"line-br-sm\"></div>");
}
else
{
buf.push("<br/>");
}
}
else
{
buf.push("<div class=\"droppy-complete\">&nbsp;</div>");
}
}
else if ( i > -1)
{
complete[i] = null;
buf.push("<div class=\"droppy-complete\"><div class=\"letter\">" + (jade.escape(null == (jade_interp = letter) ? "" : jade_interp)) + "</div></div>");
}
else
{
buf.push("<div" + (jade.attr("data-letter", letter, true, false)) + " class=\"droppy\"><div class=\"letter\">&nbsp;</div></div>");
}
    }

  } else {
    var $$l = 0;
    for (var j in $$obj) {
      $$l++;      var letter = $$obj[j];

var i = complete.indexOf(letter);
if ( /[\s-]/.test(letter))
{
if ( multiline)
{
if ( letter != " ")
{
buf.push("<div class=\"droppy-complete\">" + (jade.escape(null == (jade_interp = letter) ? "" : jade_interp)) + "</div><div class=\"line-br-sm\"></div>");
}
else
{
buf.push("<br/>");
}
}
else
{
buf.push("<div class=\"droppy-complete\">&nbsp;</div>");
}
}
else if ( i > -1)
{
complete[i] = null;
buf.push("<div class=\"droppy-complete\"><div class=\"letter\">" + (jade.escape(null == (jade_interp = letter) ? "" : jade_interp)) + "</div></div>");
}
else
{
buf.push("<div" + (jade.attr("data-letter", letter, true, false)) + " class=\"droppy\"><div class=\"letter\">&nbsp;</div></div>");
}
    }

  }
}).call(this);

buf.push("</div></div></div><div class=\"jumble-letters block-md clearfix\"><h4 class=\"jumble-prompt text-md-left block-sm\">" + (jade.escape((jade_interp = i18n("game-jumble.drag-letters")) == null ? '' : jade_interp)) + "</h4>");
// iterate letters
;(function(){
  var $$obj = letters;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var letter = $$obj[i];

buf.push("<div" + (jade.attr("data-id", ids[i], true, false)) + (jade.attr("data-letter", letter, true, false)) + (jade.cls(['draggy','bold',"draggy-" + (i) + ""], [null,null,true])) + "><div class=\"letter\">" + (jade.escape(null == (jade_interp = letter) ? "" : jade_interp)) + "</div></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var letter = $$obj[i];

buf.push("<div" + (jade.attr("data-id", ids[i], true, false)) + (jade.attr("data-letter", letter, true, false)) + (jade.cls(['draggy','bold',"draggy-" + (i) + ""], [null,null,true])) + "><div class=\"letter\">" + (jade.escape(null == (jade_interp = letter) ? "" : jade_interp)) + "</div></div>");
    }

  }
}).call(this);

buf.push("</div>");}.call(this,"Array" in locals_for_with?locals_for_with.Array:typeof Array!=="undefined"?Array:undefined,"complete" in locals_for_with?locals_for_with.complete:typeof complete!=="undefined"?complete:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"ids" in locals_for_with?locals_for_with.ids:typeof ids!=="undefined"?ids:undefined,"image" in locals_for_with?locals_for_with.image:typeof image!=="undefined"?image:undefined,"letters" in locals_for_with?locals_for_with.letters:typeof letters!=="undefined"?letters:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined,"word" in locals_for_with?locals_for_with.word:typeof word!=="undefined"?word:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/game-jumble/model.yaml", function(exports, require, module) {
module.exports = {"title":"game-jumble","display":"Letter Jumble","category":"Game","features":{"stars":true},"model":{"title":{"type":"html","default":"Letter Jumble"},"description":{"type":"html","default":"Drag the letters to spell words related to each image. Each correct answer will reward extra time to complete more words and earn more points.\n"},"words":{"min":3,"max":20,"type":[{"image":{"type":"image"},"word":{"type":"html"}}]},"game":{"timer":{"limit":{"type":"number","default":20000,"min":1,"display":"Time Limit (seconds)"},"isDisabled":{"type":"boolean","default":false,"display":"Disable","help":"If the timer is disabled, the game ends after one round has been played for each word.\n"}},"stars":{"min":{"type":"int","default":1000,"display":"1 Star"},"max":{"type":"int","default":1000,"display":"All Stars"},"help":"Number of points required to earn stars."}},"prompt":{"type":"html","default":"Drag the letters to the word above"},"doneText":{"display":"Done text","type":"html","default":"Move on"}},"examples":[{"subtype":"jumble","title":"Letter Jumble","description":"Drag the letters to spell words related to each image. Each correct answer will reward extra time to complete more words and earn more points.\n","prompt":"Snag the letters to the word above","words":[{"image":"img/examples/product-phone.png","word":"Wireless charging"},{"image":"img/examples/product-laptop.png","word":"Retina display"},{"image":"img/examples/product-tablet.png","word":"Touch screen"}],"challenge_configuration":{"nb_stars":5}}]}
});

;require.register("engine/game-jumble/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (description, doneText, hasStars, hasTimeLimit, i18n, title) {
buf.push("<div class=\"content-intro content-fill content-fit\"><div class=\"block-v-lg text-center content\"><div class=\"row\"><div class=\"col-sm-12 col-md-8 col-md-offset-2\"><h1 class=\"tight\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"text-lg block-v-lg\">" + (null == (jade_interp = description) ? "" : jade_interp) + "</div><div class=\"btn btn-solid play-game\">" + (jade.escape(null == (jade_interp = i18n("game.play-game")) ? "" : jade_interp)) + "</div></div></div></div></div><div class=\"content-outro\"><div class=\"content-fill\"><div class=\"block-v-lg text-center content\"><h1>" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"row\"><div class=\"col-sm-12 col-md-8 col-md-offset-2\"><div class=\"row\"><div" + (jade.cls(['col-sm-6','col-md-4','block-v-md',hasStars ? "" : "col-md-offset-2"], [null,null,null,true])) + "><div class=\"block-md block-dk\"><h4 class=\"white-dot-text bold-italic\">" + (jade.escape(null == (jade_interp = i18n("game.your-score")) ? "" : jade_interp)) + "</h4><h1 class=\"game-total tight\">?</h1></div></div><div class=\"col-sm-6 col-md-4 block-v-md\"><div class=\"block-md block-dk\"><h4 class=\"grey-dot-text bold-italic\">" + (jade.escape(null == (jade_interp = i18n("game.your-best")) ? "" : jade_interp)) + "</h4><h1 class=\"game-record tight\">?</h1></div></div>");
if ( hasStars)
{
buf.push("<div class=\"col-sm-12 col-md-4 block-v-md\"><div class=\"block-md block-dk\"><h4 class=\"grey-dot-text bold-italic\">" + (jade.escape(null == (jade_interp = i18n("game.your-stars")) ? "" : jade_interp)) + "</h4><h1 class=\"game-stars tight\">?<sup class=\"stars-total\"></sup></h1></div></div>");
}
buf.push("</div><div class=\"row block-v-md\"><div class=\"col-sm-12 col-md-8 col-md-offset-2 block-md\"><div class=\"btn btn-solid btn-block play-game\">" + (jade.escape(null == (jade_interp = i18n("game.play-again")) ? "" : jade_interp)) + "</div></div></div></div></div></div></div><div class=\"slide-footer block-v-lg\"><div class=\"btn btn-muted goto-next fade-in\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div></div><div class=\"content-playing\"><div class=\"full-screen\"><div class=\"game-state block-h-lg\"><div class=\"game-state-inner row block-v-lg\"><div class=\"game-state-text col-md-6 col-sm-6\">");
if ( hasTimeLimit)
{
buf.push("" + (jade.escape((jade_interp = i18n("game.labels.timer")) == null ? '' : jade_interp)) + "\n&ensp;<strong class=\"game-timer text-lg text-bold\"></strong>");
}
buf.push("</div><div class=\"game-state-text col-md-6 col-sm-6 text-right\">" + (jade.escape((jade_interp = i18n("game.labels.score")) == null ? '' : jade_interp)) + "\n&ensp;<strong class=\"game-score text-lg text-bold\"></strong><strong class=\"game-tally\"></strong></div></div></div>");
if ( hasTimeLimit)
{
buf.push("<div class=\"game-stepper\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div>");
}
if ( hasTimeLimit)
{
buf.push("<div class=\"game-bonus-time\"></div>");
}
buf.push("<div class=\"game-box content-fill text-center\"></div></div></div>");}.call(this,"description" in locals_for_with?locals_for_with.description:typeof description!=="undefined"?description:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"hasStars" in locals_for_with?locals_for_with.hasStars:typeof hasStars!=="undefined"?hasStars:undefined,"hasTimeLimit" in locals_for_with?locals_for_with.hasTimeLimit:typeof hasTimeLimit!=="undefined"?hasTimeLimit:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/game-jumble/view.coffee", function(exports, require, module) {
var DraggyView, GameJumbleView, GameView, container, theAlphabet,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

GameView = require("views/base/game");

DraggyView = require("views/components/draggy").DraggyView;

container = require("./components/container");

theAlphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".split("");

GameJumbleView = (function(superClass) {
  extend(GameJumbleView, superClass);

  function GameJumbleView() {
    return GameJumbleView.__super__.constructor.apply(this, arguments);
  }

  GameJumbleView.prototype.template = require("./template");

  GameJumbleView.prototype.events = function() {
    return {
      "iostap .play-game": "enterGame",
      "iostap .goto-next": "next"
    };
  };

  GameJumbleView.prototype.initializeData = function() {
    var words;
    GameJumbleView.__super__.initializeData.apply(this, arguments);
    this.game.extra.set("fullscreen", true);
    this.game.extra.set("sounds", true);
    words = _.compact(_.map(this.options.data.words, function(m) {
      if (_.isString(m.word) && m.word !== "") {
        m.word = m.word.replace(/<\/?[^>]+(>|$)/g, "");
        m.word = _.unescape(m.word);
        return m;
      } else {
        return null;
      }
    }));
    return this.setArray(words, "words");
  };

  GameJumbleView.prototype.initializeElements = function() {
    GameJumbleView.__super__.initializeElements.apply(this, arguments);
    return this.setEl(this.findOne(".game-box"), "container");
  };

  GameJumbleView.prototype.startGame = function() {
    var draggy, j, len, ref;
    this.displayMaskedImage();
    this.game.timer.timestamp = Date.now();
    ref = this.draggies;
    for (j = 0, len = ref.length; j < len; j++) {
      draggy = ref[j];
      draggy.unlock();
    }
    this.answeredCount = 0;
    return GameJumbleView.__super__.startGame.apply(this, arguments);
  };

  GameJumbleView.prototype.showNext = function(isFirstRun) {
    var complete, difficulty, draggy, el, ids, image, letter, letters, lettersWithoutFirstLetter, ref, remaining, word;
    ref = this.getRandom("words"), word = ref.word, image = ref.image;
    word = word.toUpperCase();
    letters = this.getRandomLetters(_.without(word.split(""), " "));
    difficulty = this.getDifficulty();
    remaining = word.length - 1;
    this.game.timer.timestamp = Date.now();
    complete = (function() {
      var results;
      results = [];
      while (letters.length > difficulty && remaining > 0) {
        letter = _.sample(letters);
        lettersWithoutFirstLetter = _.filter(letters, function(l, i, a) {
          return a.indexOf(letter) !== i;
        });
        if (_.intersection(letters, lettersWithoutFirstLetter).length === 0) {
          continue;
        }
        letters = lettersWithoutFirstLetter;
        remaining -= 1;
        results.push(letter);
      }
      return results;
    })();
    while (letters.length < Math.min(difficulty + _.random(1, 2), 6)) {
      letters.push(_.sample(theAlphabet));
    }
    ids = (function() {
      var j, len, results;
      results = [];
      for (j = 0, len = letters.length; j < len; j++) {
        letter = letters[j];
        results.push(Math.random().toString(16).slice(2));
      }
      return results;
    })();
    this.getEl("container").innerHTML = container({
      ids: ids,
      word: word,
      image: image,
      letters: _.shuffle(letters),
      complete: complete
    });
    this.setEl(this.findAll(".jumble-mask"), "masks");
    this.droppies = this.getElements(".droppy");
    this.draggies = (function() {
      var j, len, ref1, results;
      ref1 = this.findAll(".draggy");
      results = [];
      for (j = 0, len = ref1.length; j < len; j++) {
        el = ref1[j];
        draggy = new DraggyView({
          el: el
        });
        this.listenTo(draggy, "drag", this.onDrag);
        this.listenTo(draggy, "drop", this.onDrop);
        if (isFirstRun) {
          draggy.lock();
        }
        results.push(draggy);
      }
      return results;
    }).call(this);
    if (!isFirstRun) {
      this.displayMaskedImage();
    }
    this.displayLetters();
    this.displayDraggies();
    this.getEl("container").offsetTop;
    return this.transform(this.getEl("container"), {
      opacity: 1,
      transition: "opacity 300ms"
    });
  };

  GameJumbleView.prototype.displayMaskedImage = function() {
    var el, i, j, len, ref, results;
    ref = _.shuffle(this.getEl("masks"));
    results = [];
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      el = ref[i];
      results.push(this.transform(el, {
        opacity: 0,
        transition: "opacity 300ms " + (i * (5000 / this.getEl("masks").length)) + "ms"
      }));
    }
    return results;
  };

  GameJumbleView.prototype.displayLetters = function() {
    var child, el, i, j, len, ref, results;
    ref = this.findAll(".jumble-answer, .jumble-letters");
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      el = ref[j];
      results.push((function() {
        var k, len1, ref1, results1;
        ref1 = el.querySelectorAll(".letter");
        results1 = [];
        for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {
          child = ref1[i];
          this.transition(child, "all 300ms " + (i * 50) + "ms", true);
          results1.push(child.classList.add("visible"));
        }
        return results1;
      }).call(this));
    }
    return results;
  };

  GameJumbleView.prototype.displayDraggies = function() {
    var draggy, j, len, ref, results;
    ref = this.draggies;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      draggy = ref[j];
      results.push(this.resetDraggy(draggy));
    }
    return results;
  };

  GameJumbleView.prototype.getElements = function(selector) {
    var el, j, len, ref, results;
    ref = this.findAll(selector);
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      el = ref[j];
      results.push({
        el: el,
        bounds: el.getBoundingClientRect()
      });
    }
    return results;
  };

  GameJumbleView.prototype.onDrag = function(draggy, isInitialDrag) {
    var activeDroppy, activeIndex, droppy, el, i, j, k, len, len1, ref, ref1, ref2, shouldHide, x, y;
    if (isInitialDrag) {
      this.droppies = this.getElements(".droppy", this.droppies);
    }
    activeIndex = draggy.closest(_.pluck(this.droppies, "bounds"));
    activeDroppy = this.droppies[activeIndex];
    ref = this.droppies;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      droppy = ref[i];
      droppy.el.classList.toggle("active", i === activeIndex);
      droppy.isActive = i === activeIndex;
    }
    draggy.el.classList.toggle("active-pos", activeDroppy != null);
    ref1 = this.draggies;
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      el = ref1[k].el;
      if (!(el !== draggy.el)) {
        continue;
      }
      shouldHide = el.dataset.id === (activeDroppy != null ? activeDroppy.el.dataset.contains : void 0);
      el.classList.toggle("hidden", shouldHide);
    }
    ref2 = activeDroppy ? this.positionFromBounds(draggy, activeDroppy.bounds) : draggy, x = ref2.x, y = ref2.y;
    this.transform(draggy.el, {
      x: x,
      y: y,
      scale: activeDroppy ? 1 : 1.4,
      transition: isInitialDrag || activeDroppy ? "all 300ms" : "none"
    });
    if (!isInitialDrag) {
      return draggy.el.offsetLeft;
    }
  };

  GameJumbleView.prototype.onDrop = function(draggy) {
    var droppy, ref, x, y;
    droppy = _.findWhere(this.droppies, {
      isActive: true
    });
    if (droppy) {
      ref = this.positionFromBounds(draggy, droppy.bounds), x = ref.x, y = ref.y;
    } else {
      x = y = 0;
    }
    if (draggy.x !== x || draggy.y !== y) {
      return draggy.reset({
        x: x,
        y: y
      });
    } else {
      this.transform(draggy.el, {
        x: draggy.x,
        y: draggy.y,
        transition: "all 300ms"
      });
      this.updateDroppies(draggy);
      return this.checkAnswer();
    }
  };

  GameJumbleView.prototype.updateDroppies = function(draggy) {
    var containsActive, droppy, j, len, ref, results;
    ref = this.droppies;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      droppy = ref[j];
      droppy.el.classList.remove("active");
      containsActive = droppy.el.dataset.contains === draggy.el.dataset.id;
      if (droppy.isActive) {
        draggy.el.classList.add("is-positioned");
        if (droppy.el.dataset.contains && !containsActive) {
          droppy.isActive = false;
          this.resetDraggy(this.getDraggy(droppy.el.dataset.contains));
        }
        results.push(droppy.el.dataset.contains = draggy.el.dataset.id);
      } else if (containsActive) {
        results.push(delete droppy.el.dataset.contains);
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  GameJumbleView.prototype.positionFromBounds = function(draggy, bounds) {
    var height, left, ref, top, width;
    ref = draggy.offset, left = ref.left, top = ref.top, width = ref.width, height = ref.height;
    return {
      x: Math.round(bounds.left + bounds.width / 2 - left - width / 2),
      y: Math.round(bounds.top + bounds.height / 2 - top - height / 2)
    };
  };

  GameJumbleView.prototype.resetDraggy = function(draggy) {
    draggy.reset();
    draggy.el.classList.remove("is-positioned", "hidden", "active-pos");
    return this.transform(draggy.el, {
      rotate: _.random(-8, 8),
      transition: "all 300ms"
    });
  };

  GameJumbleView.prototype.checkAnswer = function() {
    var active, correct, diff, draggy, j, len, over, ref;
    active = this.droppies.filter(function(droppy) {
      return droppy.el.dataset.letter;
    });
    correct = active.filter((function(_this) {
      return function(droppy) {
        var draggy;
        draggy = _this.getDraggy(droppy.el.dataset.contains);
        return droppy.el.dataset.letter === (draggy != null ? draggy.el.dataset.letter : void 0);
      };
    })(this));
    if (active.length === correct.length) {
      ref = this.draggies;
      for (j = 0, len = ref.length; j < len; j++) {
        draggy = ref[j];
        draggy.undelegateEvents();
      }
      diff = this.game.timer.timestamp - Date.now();
      over = 5000 + this.getDifficulty() * 500;
      this.onCorrectAnswer({
        score: 1000,
        time: 3000,
        tally: true
      });
      this.el.classList.add("correct");
      this.transform(this.getEl("container"), {
        opacity: 0,
        transition: "opacity 300ms 900ms"
      });
      window.setTimeout(((function(_this) {
        return function() {
          var el, k, len1, ref1, results;
          ref1 = _this.findAll(".letter");
          results = [];
          for (k = 0, len1 = ref1.length; k < len1; k++) {
            el = ref1[k];
            results.push(el.classList.remove("visible"));
          }
          return results;
        };
      })(this)), 300);
      return window.setTimeout(((function(_this) {
        return function() {
          _this.el.classList.remove("correct");
          _this.answeredCount += 1;
          if (_this.game.timer.get("isDisabled") && _this.answeredCount === _this.getArray("words").length) {
            _this.endGame();
            return;
          }
          return _this.showNext();
        };
      })(this)), 1200);
    }
  };

  GameJumbleView.prototype.getDraggy = function(id) {
    var draggy;
    return ((function() {
      var j, len, ref, results;
      ref = this.draggies;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        draggy = ref[j];
        if (draggy.el.dataset.id === id) {
          results.push(draggy);
        }
      }
      return results;
    }).call(this))[0];
  };

  GameJumbleView.prototype.getDifficulty = function() {
    return Math.floor(_.limit(this.game.score.get("consecutive") / 1.6, 6, 1));
  };

  GameJumbleView.prototype.getRandomLetters = function(word) {
    return _.chain(theAlphabet).difference(word).sample(6 - word.length).value().concat(word);
  };

  return GameJumbleView;

})(GameView);

module.exports = GameJumbleView;
});

;require.register("engine/game-memory/components/tiles.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (config, playinline, tiles, undefined) {
jade_mixins["video-stream"] = jade_interp = function(videoUrl, playsinline, controls, klass, poster){
var block = (this && this.block), attributes = (this && this.attributes) || {};
playinline = playinline || true
controls = controls || true
klass = klass || 'video vjs-fluid'
var cloudinaryVideoFolderUrl = config.CLOUDINARY_CDN_URL+config.CLOUDINARY_VIDEO_FOLDER
var streamUrl = ''
if ( videoUrl && videoUrl.indexOf(cloudinaryVideoFolderUrl) > -1)
{
streamUrl = videoUrl.replace(cloudinaryVideoFolderUrl, cloudinaryVideoFolderUrl+'sp_full_hd/')
streamUrl = streamUrl.replace('.mp4', '.m3u8')
}
buf.push("<video" + (jade.attr("webkit-playsinline", playsinline, true, false)) + (jade.attr("controls", controls, true, false)) + " preload=\"auto\"" + (jade.attr("dir", config.direction, true, false)) + (jade.attr("poster", poster, true, false)) + (jade.cls(['video-js',klass], [null,true])) + "><source" + (jade.attr("src", videoUrl, true, false)) + "/>");
if ( streamUrl)
{
buf.push("<source" + (jade.attr("src", streamUrl, true, false)) + "/>");
}
buf.push("</video>");
};
jade_mixins["image"] = jade_interp = function(imageUrl, klass){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<img" + (jade.attr("src", imageUrl, true, false)) + (jade.cls([klass], [true])) + "/>");
};
jade_mixins["multi-content"] = jade_interp = function(prop, obj){
var block = (this && this.block), attributes = (this && this.attributes) || {};
obj = obj || locals;
switch (obj[prop + "Type"]){
case "image":
buf.push("<div" + (jade.attr("data-content", obj.image, true, false)) + " class=\"multi-content-wrapper multi-content-wrapper-image block-md block-lt\"><div class=\"block-sm multi-content-media\">");
jade_mixins["image"](obj[prop], 'multi-content multi-content-image');
buf.push("</div></div>");
  break;
case "video":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-video block-md block-lt\"><div class=\"block-sm multi-content-media\">");
jade_mixins["video-stream"](obj[prop], true, true,"multi-content multi-content-video block-dk");
buf.push("</div></div>");
  break;
case "audio":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-audio block-md block-lt\"><div class=\"block-sm multi-content-media\"><audio" + (jade.attr("src", obj[prop], true, false)) + " playsinline=\"playsinline\" preload=\"auto\" controls=\"controls\"" + (jade.attr("dir", config.direction, true, false)) + " class=\"multi-content multi-content-audio block-dk\"></audio></div></div>");
  break;
case "iframe":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-iframe block-md block-lt\"><div class=\"block-sm multi-content-iframe\">");
var iframe = obj[prop].match(/<iframe[^<]*<\/iframe>/)
if ( iframe)
{
buf.push(null == (jade_interp = iframe[0].replace(/ (width|height)=["'\d\w]+/g, "")) ? "" : jade_interp);
}
buf.push("</div></div>");
  break;
default:
buf.push("<span class=\"multi-content multi-content-text\">" + (null == (jade_interp = obj[prop]) ? "" : jade_interp) + "</span>");
  break;
}
};
// iterate tiles
;(function(){
  var $$obj = tiles;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var tile = $$obj[$index];

buf.push("<div" + (jade.attr("data-index", tile.index, true, false)) + (jade.cls(['tile',"tile-" + ((tiles.length / 2)) + ""], [null,true])) + "><div class=\"tile-content\"><div class=\"btn btn-solid tile-front\"><div class=\"content text-xl\">?</div></div><div" + (jade.cls(['btn','btn-solid','tile-back',tile.klass], [null,null,null,true])) + ">");
jade_mixins["multi-content"]("content", tile);
buf.push("</div></div></div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var tile = $$obj[$index];

buf.push("<div" + (jade.attr("data-index", tile.index, true, false)) + (jade.cls(['tile',"tile-" + ((tiles.length / 2)) + ""], [null,true])) + "><div class=\"tile-content\"><div class=\"btn btn-solid tile-front\"><div class=\"content text-xl\">?</div></div><div" + (jade.cls(['btn','btn-solid','tile-back',tile.klass], [null,null,null,true])) + ">");
jade_mixins["multi-content"]("content", tile);
buf.push("</div></div></div>");
    }

  }
}).call(this);
}.call(this,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined,"playinline" in locals_for_with?locals_for_with.playinline:typeof playinline!=="undefined"?playinline:undefined,"tiles" in locals_for_with?locals_for_with.tiles:typeof tiles!=="undefined"?tiles:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/game-memory/model.yaml", function(exports, require, module) {
module.exports = {"title":"game-memory","display":"Memory","category":"Game","description":"Find the matching tiles","features":{"stars":true},"model":{"title":{"type":"text","default":"Find the matching tiles"},"description":{"type":"html","default":"Use your memory to find the matching tiles. Tap on a tile to select it and then tap its matching pair.\n"},"tiles":{"min":2,"max":4,"type":[{"left":{"types":["text","image"]},"right":{"types":["text","image"]}}]},"game":{"timer":{"limit":{"type":"number","default":20000,"min":1,"display":"Time Limit (seconds)"},"isDisabled":{"type":"boolean","default":false,"display":"Disable","help":"If the timer is disabled, the game ends after all pairs have been matched.\n"}},"stars":{"min":{"type":"int","default":1000,"display":"1 Star"},"max":{"type":"int","default":1000,"display":"All Stars"},"help":"Number of points required to earn stars."}},"prompt":{"type":"text","default":"Find a pair of matching tiles"},"doneText":{"display":"Done text","type":"html","default":"Move on"}},"examples":[{"subtype":"memory","tiles":[{"left":"Pig","right":"Pink"},{"left":"Cow","right":"Brown"},{"left":"Cat","right":"Black, white, cream, ginger, brown & different assortments of the aforementioned (tortoiseshell)\n"},{"left":"Polar Bear","right":"White"}]}]}
});

;require.register("engine/game-memory/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (description, doneText, hasStars, hasTimeLimit, i18n, prompt, title) {
buf.push("<div class=\"content-intro content-fill content-fit\"><div class=\"block-v-lg text-center content\"><div class=\"row\"><div class=\"col-sm-12 col-md-8 col-md-offset-2\"><h1 class=\"tight\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"text-lg block-v-lg\">" + (null == (jade_interp = description) ? "" : jade_interp) + "</div><div class=\"btn btn-solid play-game\">" + (jade.escape(null == (jade_interp = i18n("game.play-game")) ? "" : jade_interp)) + "</div></div></div></div></div><div class=\"content-outro\"><div class=\"content-fill\"><div class=\"block-v-lg text-center content\"><h1>" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"row\"><div class=\"col-sm-12 col-md-8 col-md-offset-2\"><div class=\"row\"><div" + (jade.cls(['col-sm-6','col-md-4','block-v-md',hasStars ? "" : "col-md-offset-2"], [null,null,null,true])) + "><div class=\"block-md block-dk\"><h4 class=\"white-dot-text bold-italic\">" + (jade.escape(null == (jade_interp = i18n("game.your-score")) ? "" : jade_interp)) + "</h4><h1 class=\"game-total tight\">?</h1></div></div><div class=\"col-sm-6 col-md-4 block-v-md\"><div class=\"block-md block-dk\"><h4 class=\"grey-dot-text bold-italic\">" + (jade.escape(null == (jade_interp = i18n("game.your-best")) ? "" : jade_interp)) + "</h4><h1 class=\"game-record tight\">?</h1></div></div>");
if ( hasStars)
{
buf.push("<div class=\"col-sm-12 col-md-4 block-v-md\"><div class=\"block-md block-dk\"><h4 class=\"grey-dot-text bold-italic\">" + (jade.escape(null == (jade_interp = i18n("game.your-stars")) ? "" : jade_interp)) + "</h4><h1 class=\"game-stars tight\">?<sup class=\"stars-total\"></sup></h1></div></div>");
}
buf.push("</div><div class=\"row block-v-md\"><div class=\"col-sm-12 col-md-8 col-md-offset-2 block-md\"><div class=\"btn btn-solid btn-block play-game\">" + (jade.escape(null == (jade_interp = i18n("game.play-again")) ? "" : jade_interp)) + "</div></div></div></div></div></div></div><div class=\"slide-footer block-v-lg\"><div class=\"btn btn-muted goto-next fade-in\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div></div><div class=\"content-playing\"><div class=\"content-fill full-screen\"><div class=\"game-state block-h-lg\"><div class=\"game-state-inner row block-v-lg\"><div class=\"game-state-text col-md-6 col-sm-6\">");
if ( hasTimeLimit)
{
buf.push("" + (jade.escape((jade_interp = i18n("game.labels.timer")) == null ? '' : jade_interp)) + "\n&ensp;<strong class=\"game-timer text-lg text-bold\"></strong>");
}
buf.push("</div><div class=\"game-state-text col-md-6 col-sm-6 text-right\">" + (jade.escape((jade_interp = i18n("game.labels.score")) == null ? '' : jade_interp)) + "\n&ensp;<strong class=\"game-score text-lg text-bold\"></strong><strong class=\"game-tally\"></strong></div></div></div>");
if ( hasTimeLimit)
{
buf.push("<div class=\"game-stepper\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div>");
}
if ( hasTimeLimit)
{
buf.push("<div class=\"game-bonus-time\"></div>");
}
buf.push("</div><div class=\"game-tiles content-fill text-center\"></div><div class=\"slide-footer slide-up block-v-lg\"><div class=\"slide-footer-prompt text-uppercase text-bold\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div></div>");}.call(this,"description" in locals_for_with?locals_for_with.description:typeof description!=="undefined"?description:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"hasStars" in locals_for_with?locals_for_with.hasStars:typeof hasStars!=="undefined"?hasStars:undefined,"hasTimeLimit" in locals_for_with?locals_for_with.hasTimeLimit:typeof hasTimeLimit!=="undefined"?hasTimeLimit:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/game-memory/view.coffee", function(exports, require, module) {
var GameMemoryView, GameView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

GameView = require("views/base/game");

GameMemoryView = (function(superClass) {
  extend(GameMemoryView, superClass);

  function GameMemoryView() {
    return GameMemoryView.__super__.constructor.apply(this, arguments);
  }

  GameMemoryView.prototype.templates = {
    "default": require("./template"),
    tiles: require("./components/tiles")
  };

  GameMemoryView.prototype.events = function() {
    return {
      "iostap .play-game": "enterGame",
      "iostap .tile": "selectTile",
      "iostap .goto-next": "next"
    };
  };

  GameMemoryView.prototype.serialize = function() {
    var data;
    data = GameMemoryView.__super__.serialize.apply(this, arguments);
    data.tiles = _.chain(data.tiles).map(function(arg, i) {
      var left, leftType, right, rightType;
      left = arg.left, leftType = arg.leftType, right = arg.right, rightType = arg.rightType;
      if ((left != null) && (right != null)) {
        return [
          {
            content: left,
            contentType: leftType,
            index: i
          }, {
            content: right,
            contentType: rightType,
            index: i
          }
        ];
      } else {
        return [];
      }
    }).flatten().shuffle().each(function(t) {
      if (t.content.length > 20) {
        return t.klass = "text-sm";
      } else if (t.content.length < 8) {
        return t.klass = "text-lg";
      }
    }).value();
    return data;
  };

  GameMemoryView.prototype.initializeData = function() {
    GameMemoryView.__super__.initializeData.apply(this, arguments);
    this.game.extra.set("fullscreen", true);
    return this.game.extra.set("sounds", true);
  };

  GameMemoryView.prototype.initializeElements = function() {
    GameMemoryView.__super__.initializeElements.apply(this, arguments);
    return this.setEl(this.findOne(".game-tiles"), "container");
  };

  GameMemoryView.prototype.enterGame = function() {
    this.getEl("container").innerHTML = this.templates.tiles(this.serialize());
    this.setEl(this.findAll(".tile"), "tiles");
    this.elements.current = null;
    return GameMemoryView.__super__.enterGame.apply(this, arguments);
  };

  GameMemoryView.prototype.startGame = function() {
    this.game.timer.timestamp = Date.now();
    return GameMemoryView.__super__.startGame.apply(this, arguments);
  };

  GameMemoryView.prototype.selectTile = function(e) {
    var next, prev;
    prev = this.getEl("current");
    next = e.currentTarget;
    if (this.game.timer.get("paused") || next.classList.contains("correct")) {
      return;
    }
    next.classList.toggle("active");
    if (prev) {
      if (next.classList.contains("active")) {
        this.compareTiles(prev, next);
      }
      return this.elements.current = null;
    } else {
      return this.setEl(next, "current");
    }
  };

  GameMemoryView.prototype.compareTiles = function(prev, next) {
    var allTiles, doneTiles, isComplete, isCorrect, t;
    if (prev !== next && prev.dataset.index === next.dataset.index) {
      prev.classList.add("correct");
      next.classList.add("correct");
      prev.classList.add("active");
      next.classList.add("active");
      allTiles = this.getEl("tiles");
      doneTiles = (function() {
        var j, len, results;
        results = [];
        for (j = 0, len = allTiles.length; j < len; j++) {
          t = allTiles[j];
          if (t.classList.contains("correct")) {
            results.push(t);
          }
        }
        return results;
      })();
      isComplete = doneTiles.length === allTiles.length;
      isCorrect = true;
    } else {
      window.setTimeout((function() {
        prev.classList.remove("active");
        return next.classList.remove("active");
      }), 1000);
    }
    if (isCorrect) {
      this.onCorrectAnswer({
        score: 1000,
        tally: true
      });
      this.game.timer.timestamp = Date.now();
    }
    if (isComplete) {
      return window.setTimeout(_.bind(this.endGame, this), 1000);
    }
  };

  return GameMemoryView;

})(GameView);

module.exports = GameMemoryView;
});

;require.register("engine/game-next-in-order/components/options.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (missing, options, sequence, undefined) {
// iterate options
;(function(){
  var $$obj = options;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var image = $$obj[i];

buf.push("<div class=\"btn-image-container block-md\"><img" + (jade.attr("src", image, true, false)) + (jade.attr("data-is-correct", image === sequence[missing[0]], true, false)) + (jade.cls(['btn-image',"delay-" + (i) + ""], [null,true])) + "/></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var image = $$obj[i];

buf.push("<div class=\"btn-image-container block-md\"><img" + (jade.attr("src", image, true, false)) + (jade.attr("data-is-correct", image === sequence[missing[0]], true, false)) + (jade.cls(['btn-image',"delay-" + (i) + ""], [null,true])) + "/></div>");
    }

  }
}).call(this);
}.call(this,"missing" in locals_for_with?locals_for_with.missing:typeof missing!=="undefined"?missing:undefined,"options" in locals_for_with?locals_for_with.options:typeof options!=="undefined"?options:undefined,"sequence" in locals_for_with?locals_for_with.sequence:typeof sequence!=="undefined"?sequence:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/game-next-in-order/components/sequence.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (missing, sequence, undefined) {
// iterate sequence
;(function(){
  var $$obj = sequence;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var image = $$obj[i];

var klass = missing.indexOf(i) > -1 ? "hidden" : "";
buf.push("<div class=\"next-img-container block-sm\"><div" + (jade.cls(['block-lt','block-sm',klass + " delay-" + (i) + ""], [null,null,true])) + "><img" + (jade.attr("src", image, true, false)) + " class=\"next-img\"/></div></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var image = $$obj[i];

var klass = missing.indexOf(i) > -1 ? "hidden" : "";
buf.push("<div class=\"next-img-container block-sm\"><div" + (jade.cls(['block-lt','block-sm',klass + " delay-" + (i) + ""], [null,null,true])) + "><img" + (jade.attr("src", image, true, false)) + " class=\"next-img\"/></div></div>");
    }

  }
}).call(this);
}.call(this,"missing" in locals_for_with?locals_for_with.missing:typeof missing!=="undefined"?missing:undefined,"sequence" in locals_for_with?locals_for_with.sequence:typeof sequence!=="undefined"?sequence:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/game-next-in-order/model.yaml", function(exports, require, module) {
module.exports = {"title":"game-next-in-order","display":"Next in Order","category":"Game","features":{"stars":true},"model":{"title":{"type":"html","default":"What comes next?"},"description":{"type":"html","default":"Can you remember the correct order? Select the image that completes the following sequence.\n"},"sequence":{"min":3,"max":9,"type":[{"type":"image"}]},"imposters":{"min":0,"max":9,"type":[{"type":"image"}],"help":"Imposters are images that don't belong in the sequence."},"game":{"timer":{"limit":{"type":"number","default":20000,"min":1,"display":"Time Limit (seconds)"},"isDisabled":{"type":"boolean","default":false,"display":"Disable","help":"If the timer is disabled, the game ends after one sequence is attempted.\n"}},"stars":{"min":{"type":"int","default":1000,"display":"1 Star"},"max":{"type":"int","default":1000,"display":"All Stars"},"help":"Number of points required to earn stars."}},"prompt":{"type":"html","default":"Select the image that is next in order"},"doneText":{"display":"Done text","type":"html","default":"Move on"}},"examples":[{"subtype":"next-in-order","title":"What comes next?","description":"Can you remember the correct order? Select the image that completes the following sequence.\n","prompt":"Select the image that is next in order","sequence":["img/examples/product-phone.png","img/examples/product-laptop.png","img/examples/product-tablet.png"]}]}
});

;require.register("engine/game-next-in-order/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (description, doneText, hasStars, hasTimeLimit, i18n, prompt, title) {
buf.push("<div class=\"content-intro content-fill content-fit\"><div class=\"block-v-lg text-center content\"><div class=\"row\"><div class=\"col-sm-12 col-md-8 col-md-offset-2\"><h1 class=\"tight\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"text-lg block-v-lg\">" + (null == (jade_interp = description) ? "" : jade_interp) + "</div><div class=\"btn btn-solid play-game\">" + (jade.escape(null == (jade_interp = i18n("game.play-game")) ? "" : jade_interp)) + "</div></div></div></div></div><div class=\"content-outro\"><div class=\"content-fill\"><div class=\"block-v-lg text-center content\"><h1>" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"row\"><div class=\"col-sm-12 col-md-8 col-md-offset-2\"><div class=\"row\"><div" + (jade.cls(['col-sm-6','col-md-4','block-v-md',hasStars ? "" : "col-md-offset-2"], [null,null,null,true])) + "><div class=\"block-md block-dk\"><h4 class=\"white-dot-text bold-italic\">" + (jade.escape(null == (jade_interp = i18n("game.your-score")) ? "" : jade_interp)) + "</h4><h1 class=\"game-total tight\">?</h1></div></div><div class=\"col-sm-6 col-md-4 block-v-md\"><div class=\"block-md block-dk\"><h4 class=\"grey-dot-text bold-italic\">" + (jade.escape(null == (jade_interp = i18n("game.your-best")) ? "" : jade_interp)) + "</h4><h1 class=\"game-record tight\">?</h1></div></div>");
if ( hasStars)
{
buf.push("<div class=\"col-sm-12 col-md-4 block-v-md\"><div class=\"block-md block-dk\"><h4 class=\"grey-dot-text bold-italic\">" + (jade.escape(null == (jade_interp = i18n("game.your-stars")) ? "" : jade_interp)) + "</h4><h1 class=\"game-stars tight\">?<sup class=\"stars-total\"></sup></h1></div></div>");
}
buf.push("</div><div class=\"row block-v-md\"><div class=\"col-sm-12 col-md-8 col-md-offset-2 block-md\"><div class=\"btn btn-solid btn-block play-game\">" + (jade.escape(null == (jade_interp = i18n("game.play-again")) ? "" : jade_interp)) + "</div></div></div></div></div></div></div><div class=\"slide-footer block-v-lg\"><div class=\"btn btn-muted goto-next fade-in\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div></div><div class=\"content-playing\"><div class=\"full-screen\"><div class=\"game-state block-h-lg\"><div class=\"game-state-inner row block-v-lg\"><div class=\"game-state-text col-md-6 col-sm-6\">");
if ( hasTimeLimit)
{
buf.push("" + (jade.escape((jade_interp = i18n("game.labels.timer")) == null ? '' : jade_interp)) + "\n&ensp;<strong class=\"game-timer text-lg text-bold\"></strong>");
}
buf.push("</div><div class=\"game-state-text col-md-6 col-sm-6 text-right\">" + (jade.escape((jade_interp = i18n("game.labels.score")) == null ? '' : jade_interp)) + "\n&ensp;<strong class=\"game-score text-lg text-bold\"></strong><strong class=\"game-tally\"></strong></div></div></div>");
if ( hasTimeLimit)
{
buf.push("<div class=\"game-stepper\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div>");
}
if ( hasTimeLimit)
{
buf.push("<div class=\"game-bonus-time\"></div>");
}
buf.push("<div class=\"block-lg content-fill\"><div class=\"text-center content-fill game-box\"><div class=\"next-top\"><div class=\"content-ver\"><h4 class=\"next-prompt block-lg text-md\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</h4><div class=\"next-sequence block-dk block-sm\"></div></div></div><div class=\"next-options\"></div></div></div></div></div>");}.call(this,"description" in locals_for_with?locals_for_with.description:typeof description!=="undefined"?description:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"hasStars" in locals_for_with?locals_for_with.hasStars:typeof hasStars!=="undefined"?hasStars:undefined,"hasTimeLimit" in locals_for_with?locals_for_with.hasTimeLimit:typeof hasTimeLimit!=="undefined"?hasTimeLimit:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/game-next-in-order/view.coffee", function(exports, require, module) {
var GameNextInOrderView, GameView, Preloader, optTempl, seqTempl,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  slice = [].slice;

GameView = require("views/base/game");

seqTempl = require("./components/sequence");

optTempl = require("./components/options");

Preloader = require("lib/preload");

GameNextInOrderView = (function(superClass) {
  extend(GameNextInOrderView, superClass);

  function GameNextInOrderView() {
    return GameNextInOrderView.__super__.constructor.apply(this, arguments);
  }

  GameNextInOrderView.prototype.template = require("./template");

  GameNextInOrderView.prototype.events = function() {
    return {
      "iostap .play-game": "enterGame",
      "iostap .goto-next": "next",
      "iostap .btn-image": "checkAnswer"
    };
  };

  GameNextInOrderView.prototype.initializeData = function() {
    var arr, imposters, key, ref, ref1, results, sequence;
    GameNextInOrderView.__super__.initializeData.apply(this, arguments);
    this.game.extra.set("fullscreen", true);
    this.game.extra.set("sounds", true);
    ref = this.options.data, imposters = ref.imposters, sequence = ref.sequence;
    ref1 = {
      imposters: imposters,
      sequence: sequence
    };
    results = [];
    for (key in ref1) {
      arr = ref1[key];
      arr = _.compact(arr);
      arr = _.filter(arr, _.isString);
      this.setArray(key, arr);
      results.push(Preloader.load(arr, (function(_this) {
        return function(errors) {
          if (errors == null) {
            errors = [];
          }
          return _this.setArray(key, _.without.apply(_, [arr].concat(slice.call(errors))));
        };
      })(this)));
    }
    return results;
  };

  GameNextInOrderView.prototype.initializeElements = function() {
    GameNextInOrderView.__super__.initializeElements.apply(this, arguments);
    this.setEl(this.findOne(".game-box"), "container");
    this.setEl(this.findOne(".next-sequence"), "sequence");
    return this.setEl(this.findOne(".next-options"), "options");
  };

  GameNextInOrderView.prototype.startGame = function() {
    this.game.timer.timestamp = Date.now();
    return GameNextInOrderView.__super__.startGame.apply(this, arguments);
  };

  GameNextInOrderView.prototype.showNext = function() {
    var j, ref, results;
    this.setArray("missing", _.chain((function() {
      results = [];
      for (var j = 0, ref = this.getArray("sequence").length; 0 <= ref ? j < ref : j > ref; 0 <= ref ? j++ : j--){ results.push(j); }
      return results;
    }).apply(this)).sample(this.getDifficulty()).sortBy(_.identity).value());
    return this.continueSequence(true);
  };

  GameNextInOrderView.prototype.continueSequence = function(isFirstRun) {
    var data, el, seqEl, x;
    this.game.timer.timestamp = Date.now();
    data = _.extend({}, this.options.data, {
      missing: this.getArray("missing"),
      options: _.chain(this.getArray("missing").slice(1)).map((function(_this) {
        return function(i) {
          return _this.getArray("sequence")[i];
        };
      })(this)).concat(this.getArray("imposters")).sample(3).concat(this.getArray("sequence")[this.getArray("missing")[0]]).shuffle().value()
    });
    this.getEl("options").innerHTML = optTempl(data);
    seqEl = this.getEl("sequence");
    if (isFirstRun) {
      this.getEl("container").classList.remove("hidden");
      seqEl.innerHTML = seqTempl(data);
      seqEl.style.width = this.getArray("sequence").length * seqEl.firstChild.offsetWidth + "px";
    }
    if (seqEl.querySelectorAll(".hidden").item(0)) {
      el = seqEl.querySelectorAll(".hidden").item(0);
      x = (-el.parentNode.offsetLeft - seqEl.offsetLeft) - (el.parentNode.offsetWidth - seqEl.parentNode.offsetWidth) / 2;
    } else {
      return;
    }
    el.classList.add("hidden-next");
    this.transform(this.getEl("sequence"), {
      x: x,
      transition: "all 300ms"
    });
    this.setArray("missing", this.getArray("missing").slice(1));
    this.getEl("container").offsetTop;
    return this.getEl("container").classList.remove("hidden", "between");
  };

  GameNextInOrderView.prototype.checkAnswer = function(e) {
    var el, isComplete, isCorrect;
    el = this.findOne(".hidden-next");
    if (this.game.timer.get("paused") || (el == null)) {
      return;
    }
    isCorrect = e.currentTarget.dataset.isCorrect;
    isComplete = this.getArray("missing").length === 0;
    if (isCorrect) {
      this.onCorrectAnswer({
        score: isComplete ? 1000 : 200,
        time: isComplete ? 3000 : 500,
        tally: true
      });
    } else {
      this.onIncorrectAnswer({
        time: 1000,
        tally: true
      });
    }
    el.classList.remove("hidden", "hidden-next");
    if (isComplete || !isCorrect) {
      return window.setTimeout(((function(_this) {
        return function() {
          if (_this.game.timer.get("isDisabled")) {
            _this.endGame();
            return;
          }
          _this.getEl("container").classList.add("hidden");
          return window.setTimeout((function() {
            return _this.showNext();
          }), 800);
        };
      })(this)), 500);
    } else {
      this.getEl("container").classList.add("between");
      return window.setTimeout(((function(_this) {
        return function() {
          return _this.continueSequence();
        };
      })(this)), 800);
    }
  };

  GameNextInOrderView.prototype.getDifficulty = function() {
    var consecutive;
    if (this.game.timer.get("isDisabled")) {
      return this.getArray("sequence").length;
    } else {
      consecutive = this.game.score.get("consecutive");
      return Math.floor(_.limit((consecutive + 1) / 2, this.getArray("sequence").length, 2));
    }
  };

  return GameNextInOrderView;

})(GameView);

module.exports = GameNextInOrderView;
});

;require.register("engine/game-true-or-false/components/statement.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (missing, sequence, undefined) {
// iterate sequence
;(function(){
  var $$obj = sequence;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var image = $$obj[i];

var klass = missing.indexOf(i) > -1 ? "hidden" : "";
buf.push("<div" + (jade.cls(['pull-left',"delay-" + (i) + ""], [null,true])) + "><div class=\"block-sm\"><div" + (jade.cls(['next-img-container','block-sm','block-lt',klass], [null,null,null,true])) + "><img" + (jade.attr("src", image, true, false)) + " class=\"next-img\"/></div></div></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var image = $$obj[i];

var klass = missing.indexOf(i) > -1 ? "hidden" : "";
buf.push("<div" + (jade.cls(['pull-left',"delay-" + (i) + ""], [null,true])) + "><div class=\"block-sm\"><div" + (jade.cls(['next-img-container','block-sm','block-lt',klass], [null,null,null,true])) + "><img" + (jade.attr("src", image, true, false)) + " class=\"next-img\"/></div></div></div>");
    }

  }
}).call(this);
}.call(this,"missing" in locals_for_with?locals_for_with.missing:typeof missing!=="undefined"?missing:undefined,"sequence" in locals_for_with?locals_for_with.sequence:typeof sequence!=="undefined"?sequence:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/game-true-or-false/model.yaml", function(exports, require, module) {
module.exports = {"title":"game-true-or-false","display":"True or False","category":"Game","features":{"stars":true},"model":{"title":{"type":"html","default":"True or false?"},"description":{"type":"html","default":"Which of these statements is true? Swipe the incorrect statements to the left and the true statements to the right.\n"},"statements":{"min":3,"max":30,"type":[{"text":{"type":"html"},"true":{"type":"boolean","display":"Right Side"}}]},"falseText":{"display":"Left Side","type":"html","default":"False"},"trueText":{"display":"Right Side","type":"html","default":"True"},"game":{"timer":{"limit":{"type":"number","default":20000,"min":1,"display":"Time Limit (seconds)"},"isDisabled":{"type":"boolean","default":false,"display":"Disable","help":"If the timer is disabled, the game ends after all questions have been answered.\n"}},"stars":{"min":{"type":"int","default":1000,"display":"1 Star"},"max":{"type":"int","default":1000,"display":"All Stars"},"help":"Number of points required to earn stars. 1000 points are earned per question. Don’t forget to have enough time and questions to earn all the stars!"}},"prompt":{"type":"html","default":"Swipe to answer"},"doneText":{"display":"Done text","type":"html","default":"Move on"}},"examples":[{"subtype":"true-or-false","title":"True or false?","prompt":"Swipe to answer","description":"Which of these statements is true? Swipe the incorrect statements to the left and the true statements to the right.","falseText":"False","trueText":"True","statements":[{"text":"Africa is the continent with the most countries","true":true},{"text":"Halley’s comet passes the Earth every 67 years","true":false},{"text":"The Amazon rainforest produces half the world’s oxygen supply","true":true}]},{"subtype":"classify","title":"Classify?","prompt":"Swipe to answer","description":"Which of items are a fruit? Swipe the vegetable to the left and the fruits to the right.","falseText":"Vegetable","trueText":"Fruit","statements":[{"text":"Banana","true":true},{"text":"Apple","true":true},{"text":"Carrot","true":false},{"text":"Potato","true":false},{"text":"Dragon Fruit","true":true}]}]}
});

;require.register("engine/game-true-or-false/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (description, displayOrder, doneText, hasStars, hasTimeLimit, i18n, prompt, title) {
buf.push("<div class=\"content-intro content-fill content-fit\"><div class=\"block-v-lg text-center content\"><div class=\"row\"><div class=\"col-sm-12 col-md-8 col-md-offset-2\"><h1 class=\"tight\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"text-lg block-v-lg\">" + (null == (jade_interp = description) ? "" : jade_interp) + "</div><div class=\"btn btn-solid play-game\">" + (jade.escape(null == (jade_interp = i18n("game.play-game")) ? "" : jade_interp)) + "</div></div></div></div></div><div class=\"content-outro\"><div class=\"content-fill\"><div class=\"block-v-lg text-center content\"><h1>" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"row\"><div class=\"col-sm-12 col-md-8 col-md-offset-2\"><div class=\"row\"><div" + (jade.cls(['col-sm-6','col-md-4','block-v-md',hasStars ? "" : "col-md-offset-2"], [null,null,null,true])) + "><div class=\"block-md block-dk\"><h4 class=\"white-dot-text bold-italic\">" + (jade.escape(null == (jade_interp = i18n("game.your-score")) ? "" : jade_interp)) + "</h4><h1 class=\"game-total tight\">?</h1></div></div><div class=\"col-sm-6 col-md-4 block-v-md\"><div class=\"block-md block-dk\"><h4 class=\"grey-dot-text bold-italic\">" + (jade.escape(null == (jade_interp = i18n("game.your-best")) ? "" : jade_interp)) + "</h4><h1 class=\"game-record tight\">?</h1></div></div>");
if ( hasStars)
{
buf.push("<div class=\"col-sm-12 col-md-4 block-v-md\"><div class=\"block-md block-dk\"><h4 class=\"grey-dot-text bold-italic\">" + (jade.escape(null == (jade_interp = i18n("game.your-stars")) ? "" : jade_interp)) + "</h4><h1 class=\"game-stars tight\">?<sup class=\"stars-total\"></sup></h1></div></div>");
}
buf.push("</div><div class=\"row block-v-md\"><div class=\"col-sm-12 col-md-8 col-md-offset-2 block-md\"><div class=\"btn btn-solid btn-block play-game\">" + (jade.escape(null == (jade_interp = i18n("game.play-again")) ? "" : jade_interp)) + "</div></div></div></div></div></div></div><div class=\"slide-footer block-v-lg\"><div class=\"btn btn-muted goto-next fade-in\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div></div><div class=\"content-playing\"><div class=\"content-fill full-screen\"><div class=\"game-state block-h-lg\"><div class=\"game-state-inner row block-v-lg\"><div class=\"game-state-text col-md-6 col-sm-6\">");
if ( hasTimeLimit)
{
buf.push("" + (jade.escape((jade_interp = i18n("game.labels.timer")) == null ? '' : jade_interp)) + "\n&ensp;<strong class=\"game-timer text-lg text-bold\"></strong>");
}
buf.push("</div><div class=\"game-state-text col-md-6 col-sm-6 text-right\">" + (jade.escape((jade_interp = i18n("game.labels.score")) == null ? '' : jade_interp)) + "\n&ensp;<strong class=\"game-score text-lg text-bold\"></strong><strong class=\"game-tally\"></strong></div></div></div>");
if ( hasTimeLimit)
{
buf.push("<div class=\"game-stepper\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div>");
}
if ( hasTimeLimit)
{
buf.push("<div class=\"game-bonus-time\"></div>");
}
buf.push("<div class=\"row content-fill\"><div" + (jade.cls(['col-sm-2','content-fill','block-dk','text-lg','text-center',displayOrder[0].klass], [null,null,null,null,null,true])) + "><h4 class=\"game-label content-ver block-h-lg\">" + (null == (jade_interp = displayOrder[0].text) ? "" : jade_interp) + "</h4></div><div class=\"game-statement-container col-sm-8 content-fill\"><div class=\"content-ver text-sm text-center\"><h1 class=\"game-statement block-lg\"></h1></div></div><div" + (jade.cls(['col-sm-2','content-fill','block-dk','text-lg','text-center',displayOrder[1].klass], [null,null,null,null,null,true])) + "><h4 class=\"game-label content-ver block-h-lg\">" + (null == (jade_interp = displayOrder[1].text) ? "" : jade_interp) + "</h4></div></div></div><div class=\"slide-footer slide-up block-v-lg\"><div class=\"slide-footer-prompt text-uppercase text-bold\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div></div>");}.call(this,"description" in locals_for_with?locals_for_with.description:typeof description!=="undefined"?description:undefined,"displayOrder" in locals_for_with?locals_for_with.displayOrder:typeof displayOrder!=="undefined"?displayOrder:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"hasStars" in locals_for_with?locals_for_with.hasStars:typeof hasStars!=="undefined"?hasStars:undefined,"hasTimeLimit" in locals_for_with?locals_for_with.hasTimeLimit:typeof hasTimeLimit!=="undefined"?hasTimeLimit:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/game-true-or-false/view.coffee", function(exports, require, module) {
var AutoCursorRemoveDraggy, GameNextInOrderView, GameView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

GameView = require("views/base/game");

AutoCursorRemoveDraggy = require("views/components/draggy").AutoCursorRemoveDraggy;

GameNextInOrderView = (function(superClass) {
  extend(GameNextInOrderView, superClass);

  function GameNextInOrderView() {
    return GameNextInOrderView.__super__.constructor.apply(this, arguments);
  }

  GameNextInOrderView.prototype.templates = {
    "default": require("./template"),
    statement: require("./components/statement")
  };

  GameNextInOrderView.prototype.events = function() {
    return {
      "iostap .play-game": "enterGame",
      "iostap .goto-next": "next"
    };
  };

  GameNextInOrderView.prototype.serialize = function() {
    var d;
    d = GameNextInOrderView.__super__.serialize.apply(this, arguments);
    d.falseText = _.hyphenate(d.falseText);
    d.trueText = _.hyphenate(d.trueText);
    d.displayOrder = [
      {
        klass: "game-false",
        text: d.falseText
      }, {
        klass: "game-true",
        text: d.trueText
      }
    ];
    if (this.options.config().direction === "rtl") {
      d.displayOrder.reverse();
    }
    return d;
  };

  GameNextInOrderView.prototype.initializeData = function() {
    GameNextInOrderView.__super__.initializeData.apply(this, arguments);
    this.game.extra.set("fullscreen", true);
    this.game.extra.set("sounds", true);
    return this.setArray("statements", _.filter(this.options.data.statements, function(s) {
      return s.text;
    }));
  };

  GameNextInOrderView.prototype.initializeElements = function() {
    GameNextInOrderView.__super__.initializeElements.apply(this, arguments);
    this.setEl(this.findOne(".game-true"), "true");
    this.setEl(this.findOne(".game-false"), "false");
    this.draggy = new AutoCursorRemoveDraggy({
      el: this.findOne(".game-statement")
    });
    this.listenTo(this.draggy, "drag", this.onDrag);
    return this.listenTo(this.draggy, "drop", this.onDrop);
  };

  GameNextInOrderView.prototype.enterGame = function() {
    GameNextInOrderView.__super__.enterGame.apply(this, arguments);
    return this.draggy.lock();
  };

  GameNextInOrderView.prototype.startGame = function() {
    this.game.timer.timestamp = Date.now();
    this.answeredCount = 0;
    this.draggy.unlock();
    this.guesses = [];
    return GameNextInOrderView.__super__.startGame.apply(this, arguments);
  };

  GameNextInOrderView.prototype.onDrag = function(draggy, isInitial) {
    var isLeft, isRight;
    if (draggy.el.classList.contains("hidden")) {
      return;
    }
    isRight = this.isRight(draggy);
    isLeft = this.isLeft(draggy);
    if (this.options.config().direction === "rtl") {
      this.getEl("true").classList.toggle("active", isLeft);
      this.getEl("false").classList.toggle("active", isRight);
    } else {
      this.getEl("true").classList.toggle("active", isRight);
      this.getEl("false").classList.toggle("active", isLeft);
    }
    return this.transform(draggy.el, {
      x: draggy.x,
      y: draggy.y / 1.2,
      rotate: draggy.x * -draggy.y / 5000,
      transition: isInitial ? "all 300ms" : ""
    });
  };

  GameNextInOrderView.prototype.onDrop = function(draggy, isReset) {
    var isComplete, isCorrect, x;
    if (isReset) {
      return this.transform(draggy.el, {
        x: draggy.x,
        y: draggy.y
      });
    } else {
      if (draggy.el.classList.contains("hidden")) {
        return;
      }
      isComplete = this.didMove(draggy);
      if (isComplete) {
        x = this.el.offsetWidth * Math.abs(draggy.x) / draggy.x;
        draggy.reset({
          x: x,
          y: draggy.y
        });
        this.transition(draggy.el, "all 300ms", true);
        draggy.el.classList.add("hidden");
        isCorrect = this.options.config().direction === "rtl" ? this.isLeft(draggy) === draggy.isTrue : this.isRight(draggy) === draggy.isTrue;
        return window.setTimeout(((function(_this) {
          return function() {
            var guess, guessA, guessQ;
            if (isCorrect) {
              _this.onCorrectAnswer({
                score: 1000,
                time: 1000,
                tally: true
              });
            } else {
              _this.onIncorrectAnswer({
                time: 1000,
                tally: true
              });
            }
            guessQ = draggy.$el.text();
            guessA = draggy.velocity.dir === "left" ? "false" : "true";
            guess = {
              q: guessQ,
              a: guessA
            };
            _this.guesses.push(guess);
            _this.transition(draggy.el, "", true);
            draggy.reset();
            _this.answeredCount += 1;
            if (_this.game.timer.get("isDisabled") && _this.answeredCount === _this.getArray("statements").length) {
              _this.endGame();
              return;
            }
            return _this.showNext();
          };
        })(this)), 400);
      } else {
        this.transition(draggy.el, "all 300ms");
        return draggy.reset();
      }
    }
  };

  GameNextInOrderView.prototype.didMove = function(draggy) {
    return this.isRight(draggy) || this.isLeft(draggy);
  };

  GameNextInOrderView.prototype.isRight = function(draggy) {
    return (Math.abs(draggy.velocity.x) > 0.5 && draggy.velocity.dir === "right") || draggy.x > this.el.offsetWidth * 0.33;
  };

  GameNextInOrderView.prototype.isLeft = function(draggy) {
    return (Math.abs(draggy.velocity.x) > 0.5 && draggy.velocity.dir === "left") || draggy.x < -this.el.offsetWidth * 0.33;
  };

  GameNextInOrderView.prototype.showNext = function() {
    var statement;
    this.game.timer.timestamp = Date.now();
    statement = this.getRandom("statements");
    this.getEl("true").classList.remove("active");
    this.getEl("false").classList.remove("active");
    this.draggy.el.innerHTML = statement.text;
    this.draggy.isTrue = statement["true"];
    this.draggy.el.offsetLeft;
    return this.draggy.el.classList.remove("hidden");
  };

  GameNextInOrderView.prototype.answerDetails = function() {
    var questionMetadataByContentDict, questions;
    questions = this.options.metadata.questions || [];
    if (!(questions.length > 0)) {
      return [];
    }
    questionMetadataByContentDict = _.indexBy(questions, function(q) {
      return q.question.content;
    });
    return _.chain(this.guesses).map(function(arg) {
      var a, q;
      q = arg.q, a = arg.a;
      if (questionMetadataByContentDict[q]) {
        return {
          question: questionMetadataByContentDict[q].question,
          answer: _.find(questionMetadataByContentDict[q].answers, function(a) {
            return a.content.toString() === a;
          })
        };
      } else {
        return false;
      }
    }).filter(function(g) {
      return g;
    }).value();
  };

  return GameNextInOrderView;

})(GameView);

module.exports = GameNextInOrderView;
});

;require.register("engine/image-collection/model.yaml", function(exports, require, module) {
module.exports = {"title":"image-collection","display":"Image Collection","category":"Content","description":"Select an image to see more detail","features":{"narration":true,"social":true},"model":{"title":{"type":"html"},"images":{"display":"List items","type":[{"image":{"type":"image"},"content":{"type":"html"},"narration":{"type":"audio"}}],"min":2,"max":8},"lightbox":{"type":"boolean","default":false,"help":"Focus on the image by hiding other parts of the interface. If a background color is set, that color will be used.\n"},"background":{"type":"string","default":"","display":"Background color","help":"This color (eg. “orange”, “#f90”, “rgb(255,160,0)”) will be used for the background in lightbox mode.\n"},"prompt":{"type":"html","default":"Select each image for more details"},"doneText":{"type":"html","default":"Continue","display":"Done text"}},"examples":[{"subtype":"image-collection","title":"Example Image Collection","images":[{"image":"img/examples/product-phone.png","content":"Our brilliant new sleek design allows the user to have unparalleled comfort when using the device.\n"},{"image":"img/examples/product-laptop.png","content":"Crystal clear display performs better than any of our competitors.\n"},{"image":"img/examples/product-tablet.png","content":"The newest feature offers a new level of feedback for the user.\n"}]}]}
});

;require.register("engine/image-collection/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (continueBtnText, doneText, hasNarration, hasPrompt, i18n, prompt, submitUp, tappies, title, undefined) {
jade_mixins["image"] = jade_interp = function(imageUrl, klass){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<img" + (jade.attr("src", imageUrl, true, false)) + (jade.cls([klass], [true])) + "/>");
};
buf.push("<div class=\"block-v-lg content-fill text-center\"><div class=\"tappies-parent content-fill\"><div class=\"thumbnail-collection content-sm-ver content-md-ver content-lg-ver\"><div class=\"title-wrapper\"><h1 class=\"title slide-down delay-3 tight\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1></div><div class=\"row tappies text-center\">");
var full = "col-sm-12 col-lg-8 col-lg-offset-2"
var half = "col-sm-6 col-lg-6"
// iterate tappies
;(function(){
  var $$obj = tappies;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var tappy = $$obj[i];

buf.push("<div" + (jade.attr("data-index", i, true, false)) + (jade.cls(['tappy','content-fill','slide-up',"delay-" + (i + 1) + " " + (tappies.length >= 4 ? half : full) + ""], [null,null,null,true])) + "><div class=\"tappy-child content-fill block-dk block-sm\">");
jade_mixins["image"](tappy.image, 'content-ver thumbnail');
buf.push("</div></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var tappy = $$obj[i];

buf.push("<div" + (jade.attr("data-index", i, true, false)) + (jade.cls(['tappy','content-fill','slide-up',"delay-" + (i + 1) + " " + (tappies.length >= 4 ? half : full) + ""], [null,null,null,true])) + "><div class=\"tappy-child content-fill block-dk block-sm\">");
jade_mixins["image"](tappy.image, 'content-ver thumbnail');
buf.push("</div></div>");
    }

  }
}).call(this);

buf.push("</div></div></div><div class=\"details-parent content-fill\">");
// iterate tappies
;(function(){
  var $$obj = tappies;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var tappy = $$obj[i];

buf.push("<div class=\"image-details content-fill\"><div class=\"row content-lg-fill content-sm-ver content-md-ver\"><div class=\"col-lg-6 content-lg-ver image-container\">");
jade_mixins["image"](tappy.image, 'image-full-size block-v-md');
buf.push("</div><div class=\"col-lg-6 content-lg-ver\"><div class=\"caption block-v-md block-h-md text-md\">" + (null == (jade_interp = tappy.content) ? "" : jade_interp) + "</div></div></div></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var tappy = $$obj[i];

buf.push("<div class=\"image-details content-fill\"><div class=\"row content-lg-fill content-sm-ver content-md-ver\"><div class=\"col-lg-6 content-lg-ver image-container\">");
jade_mixins["image"](tappy.image, 'image-full-size block-v-md');
buf.push("</div><div class=\"col-lg-6 content-lg-ver\"><div class=\"caption block-v-md block-h-md text-md\">" + (null == (jade_interp = tappy.content) ? "" : jade_interp) + "</div></div></div></div>");
    }

  }
}).call(this);

buf.push("</div></div><div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"tappies" in locals_for_with?locals_for_with.tappies:typeof tappies!=="undefined"?tappies:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/image-collection/view.coffee", function(exports, require, module) {
var ImageCollectionView, Preloader, SlideView, Sound,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Preloader = require("lib/preload");

SlideView = require("views/slide");

Sound = Application.actions().Sound;

ImageCollectionView = (function(superClass) {
  extend(ImageCollectionView, superClass);

  function ImageCollectionView() {
    return ImageCollectionView.__super__.constructor.apply(this, arguments);
  }

  ImageCollectionView.prototype.template = require("./template");

  ImageCollectionView.prototype.fitTextOnResize = false;

  ImageCollectionView.prototype.fitTextOnRender = false;

  ImageCollectionView.prototype.events = function() {
    return {
      "iostap .btn-done": "submit",
      "iostap .image-details": "hideDetails",
      "iostap .tappy": "toggleThumbnail"
    };
  };

  ImageCollectionView.prototype.serialize = function() {
    var data;
    data = ImageCollectionView.__super__.serialize.apply(this, arguments);
    data.tappies = _.filter(data.images || [], function(d) {
      return d.image;
    });
    data.hasPrompt = true;
    return data;
  };

  ImageCollectionView.prototype.onResize = function() {
    var images;
    this.el.classList.remove("active");
    images = _.pluck(this.options.data.images, "image");
    return Preloader.load(_.compact(images), (function(_this) {
      return function() {
        _this.setTappyHeight();
        return _this.fitText(function() {
          return window.setTimeout((function() {
            return _this.el.classList.add("active");
          }), 300);
        });
      };
    })(this));
  };

  ImageCollectionView.prototype.onDetailResize = function() {
    var image;
    image = this.getEl("active-details");
    return this.limitImageSize(image);
  };

  ImageCollectionView.prototype.show = function() {
    var j, ref, results;
    this.setEl(this.findOne(".tappies-parent"), "parent");
    this.setEl(this.findOne(".tappies"), "tappies");
    this.setEl(this.findOne(".title-wrapper"), "title");
    this.setEl(this.findAll(".image-details"), "imageDetails");
    this.listenTo(this, "resize", this.onResize);
    this.onResize();
    this.toVisit = (function() {
      results = [];
      for (var j = 0, ref = this.serialize().tappies.length; 0 <= ref ? j < ref : j > ref; 0 <= ref ? j++ : j--){ results.push(j); }
      return results;
    }).apply(this);
    return this.hideDetails();
  };

  ImageCollectionView.prototype.beforeHide = function() {
    if (this.currentSrc) {
      return Sound.fadeOut(this.currentSrc, 500, 0.02);
    }
  };

  ImageCollectionView.prototype.setTappyHeight = function() {
    var el, i, j, len, length, outerHeight, ref, results, tappyHeight;
    length = this.getEl("tappies").children.length;
    if (length >= 4) {
      length = Math.ceil(length / 2);
    }
    outerHeight = this.getEl("parent").offsetHeight - this.getEl("title").offsetHeight;
    tappyHeight = outerHeight / length;
    tappyHeight = Math.min(tappyHeight, 220);
    ref = this.getEl("tappies").children;
    results = [];
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      el = ref[i];
      results.push(el.style.height = tappyHeight + "px");
    }
    return results;
  };

  ImageCollectionView.prototype.limitImageSize = function(imgDetails) {
    var ch, cw, img, scale, txt;
    img = imgDetails.querySelector(".image-full-size");
    txt = imgDetails.querySelector(".caption");
    ch = imgDetails.offsetHeight - txt.offsetHeight;
    cw = imgDetails.offsetWidth;
    scale = _.max([img.height / ch, img.width / cw]);
    return img.style.height = (img.height / scale) + "px";
  };

  ImageCollectionView.prototype.toggleThumbnail = function(e) {
    return this.showDetails(e.currentTarget, true);
  };

  ImageCollectionView.prototype.showDetails = function(tappy, animate) {
    var imgDetails, index, loaded, narration;
    index = +tappy.dataset.index;
    imgDetails = this.getEl("imageDetails").item(index);
    narration = this.serialize().tappies[index].narration;
    loaded = false;
    if (this.currentSrc) {
      Sound.stop(this.currentSrc);
    }
    if ((this.currentSrc = narration) && !this.withoutNarration) {
      this.showLoadingNarration();
      Sound.play(narration, {
        cb: function() {},
        onProgress: (function(_this) {
          return function() {
            if (!loaded) {
              loaded = true;
              return _this.hideLoadingNarration();
            }
          };
        })(this)
      });
    }
    this.toVisit = _.without(this.toVisit, index);
    this.setEl(imgDetails, "active-details");
    if (_.isEmpty(this.toVisit)) {
      this.setState("touched");
    }
    this.setState("active", "details");
    this.showLightbox();
    this.listenTo(this, "resize", this.onDetailResize);
    this.onDetailResize();
    tappy.classList.add("visited");
    this.transform(imgDetails, {
      opacity: 1,
      transition: animate ? "all 300ms" : ""
    });
    return imgDetails.classList.add("image-details-visible");
  };

  ImageCollectionView.prototype.hideDetails = function() {
    var imgDetails;
    if (this.currentSrc) {
      Sound.fadeOut(this.currentSrc, 500, 0.02);
    }
    if (!(imgDetails = this.getEl("active-details"))) {
      return;
    }
    this.transform(imgDetails, {
      opacity: 0,
      scale: 0.9,
      transition: "all 300ms"
    });
    imgDetails.classList.remove("image-details-visible");
    this.trigger("ui", {
      lightbox: false
    });
    return this.setState("inactive", "details");
  };

  ImageCollectionView.prototype.showLightbox = function() {
    if (this.options.data.lightbox) {
      return this.trigger("ui", {
        lightbox: this.options.data.background || true
      });
    }
  };

  ImageCollectionView.prototype.refresh = function(params) {
    var changed, content, i, j, len, ref, ref1, tappy;
    if (params.data.images.length === this.options.data.images.length) {
      ref = params.data.images;
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        content = ref[i].content;
        if (content && ((ref1 = this.options.data.images[i]) != null ? ref1.content : void 0) !== content) {
          changed = i;
        }
      }
    }
    ImageCollectionView.__super__.refresh.apply(this, arguments);
    if ((changed != null) && (tappy = this.getEl("tappies").children[changed])) {
      return this.showDetails(tappy, false);
    }
  };

  return ImageCollectionView;

})(SlideView);

module.exports = ImageCollectionView;
});

;require.register("engine/image-gallery/model.yaml", function(exports, require, module) {
module.exports = {"title":"image-gallery","display":"Image Gallery","category":"Content","description":"Swipe through a gallery of images","links":{"academy":"https://academy.edapp.com/tag/image-gallery/"},"features":{"narration":true,"social":true},"model":{"images":{"min":1,"max":10,"type":[{"image":{"type":"image","display":"Image"},"caption":{"type":"html"}}]},"lightbox":{"type":"boolean","default":false,"help":"Focus on the image by hiding other parts of the interface. If a background color is set, that color will be used.\n"},"background":{"type":"string","default":"","display":"Background color","help":"This color (eg. “orange”, “#f90”, “rgb(255,160,0)”) will be used for the background in lightbox mode.\n"},"prompt":{"type":"html","default":"Swipe to continue"},"doneText":{"type":"html","default":"Continue","display":"Done text"}},"examples":[{"subtype":"image-gallery","images":[{"image":"img/examples/product-phone.png","caption":"Our brilliant new sleek design allows the user to have unparalleled comfort when using the device.\n"},{"image":"img/examples/product-laptop.png","caption":"Crystal clear display performs better than any of our competitors.\n"},{"image":"img/examples/product-tablet.png","caption":"The newest feature offers a new level of feedback for the user.\n"}]}]}
});

;require.register("engine/image-gallery/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (continueBtnText, doneText, hasNarration, hasPrompt, i18n, images, prompt, submitUp, undefined) {
jade_mixins["image"] = jade_interp = function(imageUrl, klass){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<img" + (jade.attr("src", imageUrl, true, false)) + (jade.cls([klass], [true])) + "/>");
};
buf.push("<div class=\"content-wrapper content-fill slide-up\"><div class=\"carousel content-fill delay-6 draggy block-v-xl\"><div" + (jade.attr("style", "width:" + (images.length * 100) + "%;", true, false)) + " class=\"carousel-slider content-fill clearfix\">");
// iterate images
;(function(){
  var $$obj = images;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var item = $$obj[$index];

buf.push("<div" + (jade.attr("style", "width: " + (100 / images.length) + "%;", true, false)) + " class=\"carousel-item content-fill\"><div class=\"row content-lg-fill content-sm-ver content-md-ver\">");
var size = _.compact([item.image, item.caption]).length
var cols = size == 2 ? "col-lg-6" : ""
if ( item.image)
{
buf.push("<div" + (jade.cls(['col-sm-12','content-lg-ver',cols], [null,null,true])) + ">");
jade_mixins["image"](item.image, 'img');
buf.push("</div>");
}
if ( item.caption)
{
buf.push("<div" + (jade.cls(['caption','content-fit','col-sm-12','content-lg-ver',cols], [null,null,null,null,true])) + "><div class=\"text-center text-md block-v-lg\">" + (null == (jade_interp = item.caption) ? "" : jade_interp) + "</div></div>");
}
buf.push("</div></div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var item = $$obj[$index];

buf.push("<div" + (jade.attr("style", "width: " + (100 / images.length) + "%;", true, false)) + " class=\"carousel-item content-fill\"><div class=\"row content-lg-fill content-sm-ver content-md-ver\">");
var size = _.compact([item.image, item.caption]).length
var cols = size == 2 ? "col-lg-6" : ""
if ( item.image)
{
buf.push("<div" + (jade.cls(['col-sm-12','content-lg-ver',cols], [null,null,true])) + ">");
jade_mixins["image"](item.image, 'img');
buf.push("</div>");
}
if ( item.caption)
{
buf.push("<div" + (jade.cls(['caption','content-fit','col-sm-12','content-lg-ver',cols], [null,null,null,null,true])) + "><div class=\"text-center text-md block-v-lg\">" + (null == (jade_interp = item.caption) ? "" : jade_interp) + "</div></div>");
}
buf.push("</div></div>");
    }

  }
}).call(this);

buf.push("</div></div></div>");
if ( images.length > 1)
{
buf.push("<div class=\"pagination\">");
// iterate images
;(function(){
  var $$obj = images;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var item = $$obj[i];

buf.push("<div" + (jade.attr("data-page", i, true, false)) + " class=\"dot\"></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var item = $$obj[i];

buf.push("<div" + (jade.attr("data-page", i, true, false)) + " class=\"dot\"></div>");
    }

  }
}).call(this);

buf.push("</div>");
}
buf.push("<div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"images" in locals_for_with?locals_for_with.images:typeof images!=="undefined"?images:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/image-gallery/view.coffee", function(exports, require, module) {
var Device, DraggyView, ImageGalleryView, Preload, SlideView, fitText,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SlideView = require("views/slide");

DraggyView = require("views/components/draggy").DraggyView;

Preload = require("lib/preload");

Device = require("lib/device");

fitText = require("lib/fit-text");

ImageGalleryView = (function(superClass) {
  extend(ImageGalleryView, superClass);

  function ImageGalleryView() {
    return ImageGalleryView.__super__.constructor.apply(this, arguments);
  }

  ImageGalleryView.prototype.template = require("./template");

  ImageGalleryView.prototype.currentIndex = 0;

  ImageGalleryView.prototype.events = {
    "iostap .btn-done": "submit",
    "iostap .dot": "goToPage"
  };

  ImageGalleryView.prototype.serialize = function() {
    var data;
    data = ImageGalleryView.__super__.serialize.apply(this, arguments);
    this.options.data.images = data.images = (data.images || []).filter(function(m) {
      return m.image || m.caption.length > 0;
    });
    if (this.options.config().direction === "rtl" && !this.options.data.isReversed) {
      data.images = data.images.reverse();
      this.options.data.isReversed = true;
    }
    if (data.images.length === 0) {
      data.images.push({
        image: void 0,
        caption: ""
      });
    }
    if (data.images.length <= 1) {
      window.setTimeout(((function(_this) {
        return function() {
          return _this.setState("touched");
        };
      })(this)), 0);
    }
    data.hasPrompt = true;
    return data;
  };

  ImageGalleryView.prototype.beforeShow = function() {
    var lightboxColor;
    lightboxColor = this.options.data.lightbox ? void 0 : "default";
    if (this.options.data.lightbox) {
      return this.trigger("ui", {
        lightbox: this.options.data.background || true
      });
    } else {
      return this.trigger("ui", {
        lightbox: false
      });
    }
  };

  ImageGalleryView.prototype.onRefresh = function() {
    ImageGalleryView.__super__.onRefresh.apply(this, arguments);
    return this.beforeShow();
  };

  ImageGalleryView.prototype.show = function(index) {
    var el, len, min, ref, x;
    if (index == null) {
      index = 0;
    }
    if ((ref = this.draggy) != null) {
      ref.undelegateEvents();
    }
    this.draggy = null;
    if (!this.draggy) {
      el = this.findOne(".carousel");
      this.setEl(el.firstChild, "scroller");
      if (this.options.data.images.length > 1) {
        this.setEl(this.findOne(".pagination"), "pagination");
        len = this.options.data.images.length - 1;
        min = -el.offsetWidth * len;
        this.draggy = new DraggyView({
          el: el,
          minX: min,
          maxX: 0,
          lock: "y"
        });
        this.listenTo(this.draggy, "drag", this.onDrag);
        this.listenTo(this.draggy, "drop", this.onDrop);
        if (this.options.config().direction === "rtl") {
          x = -this.draggy.el.offsetWidth * (len - Math.min(index, len));
        } else {
          x = -this.draggy.el.offsetWidth * Math.min(index, len);
        }
        this.draggy.reset({
          x: x
        });
      } else {
        this.getEl("scroller").firstChild.style.opacity = 1;
      }
      this.listenTo(this, "resize", this.onResize);
      this.onResize();
      return this.limitImageSize();
    }
  };

  ImageGalleryView.prototype.limitImageSize = function() {
    var height, images;
    images = _.chain(this.options.data.images).pluck("image").compact().value();
    height = this.getEl("scroller").offsetHeight;
    return Preload.load(images, (function(_this) {
      return function() {
        var child, i, img, j, len1, maxH, ref, results, shouldFitText, text;
        ref = _this.getEl("scroller").children;
        results = [];
        for (i = j = 0, len1 = ref.length; j < len1; i = ++j) {
          child = ref[i];
          child.style.fontSize = "";
          img = child.querySelector(".img");
          if (img) {
            maxH = height;
            if (Device.breakpoint(["xs", "sm", "md"])) {
              text = child.querySelector(".caption");
              maxH -= (text != null ? text.offsetHeight : void 0) || 0;
            } else {
              shouldFitText = true;
            }
            img.style.maxHeight = maxH + "px";
          }
          if (shouldFitText) {
            results.push(fitText(child));
          } else {
            results.push(void 0);
          }
        }
        return results;
      };
    })(this));
  };

  ImageGalleryView.prototype.onDrag = function(draggy, isInitial) {
    var transition;
    transition = isInitial ? "all 300ms" : "none";
    this.transform(this.getEl("scroller"), {
      x: this.getScrollDist(draggy),
      transition: transition
    });
    return this.updateChildren(draggy, transition);
  };

  ImageGalleryView.prototype.onDrop = function(draggy, isReset) {
    var dot, func, i, j, len1, m, ref, step, transition, x;
    if (isReset) {
      transition = this.currentIndex != null ? "all 300ms" : "";
      this.currentIndex = Math.floor(-draggy.x / draggy.offset.width);
      this.transform(this.getEl("scroller"), {
        x: this.getScrollDist(draggy),
        transition: transition
      });
      this.updateChildren(draggy, transition);
    } else {
      x = draggy.velocity.x;
      m = 0.9;
      func = x < -m ? "ceil" : x > m ? "floor" : "round";
      step = Math[func](Math.min(draggy.x / draggy.offset.width, 1));
      draggy.reset({
        x: step * draggy.offset.width
      });
    }
    ref = this.getEl("pagination").children;
    for (i = j = 0, len1 = ref.length; j < len1; i = ++j) {
      dot = ref[i];
      dot.classList.toggle("active", i === this.currentIndex);
    }
    if (this.options.config().direction === "rtl") {
      if (this.currentIndex === 0) {
        return this.setState("touched");
      }
    } else {
      if (this.currentIndex === this.options.data.images.length - 1) {
        return this.setState("touched");
      }
    }
  };

  ImageGalleryView.prototype.goToPage = function(e) {
    var index, total;
    index = e.currentTarget.dataset.page;
    total = this.options.data.images.length - 1;
    return this.draggy.reset({
      x: (index / total) * this.draggy.options.minX
    });
  };

  ImageGalleryView.prototype.updateChildren = function(draggy, transition) {
    var child, i, j, len1, ref, results, width;
    width = draggy.offset.width;
    ref = this.getEl("scroller").children;
    results = [];
    for (i = j = 0, len1 = ref.length; j < len1; i = ++j) {
      child = ref[i];
      if (transition) {
        child.classList.toggle("active", i === this.currentIndex);
        this.transition(child, transition, true);
      }
      results.push(this.transform(child, {
        scale: 1 - Math.abs(draggy.x + (i * width)) / width / 5,
        opacity: 1 - Math.abs(draggy.x + (i * width)) / width
      }));
    }
    return results;
  };

  ImageGalleryView.prototype.getScrollDist = function(draggy) {
    return (draggy.x / draggy.offset.width / this.options.data.images.length * 100) + "%";
  };

  ImageGalleryView.prototype.onResize = function() {
    var scroller;
    this.limitImageSize();
    if (scroller = this.getEl("scroller") && this.draggy) {
      this.draggy.options.minX = -this.draggy.el.offsetWidth * (this.options.data.images.length - 1);
      return this.draggy.getOffset();
    }
  };

  ImageGalleryView.prototype.refresh = function(params) {
    var changed, i, image, images, j, len1;
    images = params.data.images;
    if (params.data.images.length !== this.options.data.images.length) {
      images = (params.data.images || []).filter(function(m) {
        return m.image || m.caption.length > 0;
      });
      changed = this.currentIndex;
    }
    for (i = j = 0, len1 = images.length; j < len1; i = ++j) {
      image = images[i];
      if (!_.isEqual(image, this.options.data.images[i])) {
        changed = i;
        break;
      }
    }
    ImageGalleryView.__super__.refresh.apply(this, arguments);
    if (this.draggy) {
      this.draggy.undelegateEvents();
      this.draggy = this.currentIndex = null;
    }
    return this.show(changed);
  };

  ImageGalleryView.prototype.screenshot = function() {
    var total;
    total = this.options.data.images.length - 1;
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var getPages;
        getPages = function(images) {
          var index, ref;
          if (images == null) {
            images = [];
          }
          if (images.length <= total) {
            index = images.length;
            if ((ref = _this.draggy) != null) {
              ref.reset({
                x: (index / total) * _this.draggy.options.minX
              });
            }
            return _this.collateScreenshots(images).then(getPages)["catch"](reject);
          } else {
            return resolve(images);
          }
        };
        return getPages();
      };
    })(this));
  };

  return ImageGalleryView;

})(SlideView);

module.exports = ImageGalleryView;
});

;require.register("engine/image-map/model.yaml", function(exports, require, module) {
module.exports = {"title":"image-map","display":"Image Map","category":"Content","description":"Map out details through a series of images","features":{"social":true},"model":{"url":{"type":"image","default":"","display":"Image Map"},"waypoints":{"min":1,"max":20,"type":[{"region":{"type":"image-region","for":"url"},"image":{"type":"image"},"caption":{"type":"html","default":""},"narration":{"type":"audio"}}]},"zoom":{"type":"boolean","default":true,"help":"Recenter the map image on the region after it has been selected.\n"},"stickyCaptions":{"type":"boolean","display":"Sticky Captions","default":false,"help":"Place waypoint captions directly underneath the image.\n"},"appearance":{"waypointColor":{"display":"Waypoint Style","type":"select","default":"White","enum":["Black","White","None"]}},"lightbox":{"background":{"type":"string","default":"","display":"Background Color","help":"This color (eg. \"orange\", \"#f90\", \"rgb(255,160,0)\") will be used for the background of the entire screen in lightbox mode.\n"},"textColor":{"display":"Text Color","type":"select","default":"White","enum":["Black","White"]}},"prompt":{"type":"html","default":"Explore each region of the image"},"doneText":{"type":"html","default":"Continue","display":"Done text"}},"examples":[{"subtype":"multiple-regions","url":"img/examples/product-phone.png","stickyCaptions":true,"waypoints":[{"region":{"xMin":0.55,"xMax":0.76,"yMin":0,"yMax":0.15},"image":"img/examples/product-phone.png","caption":"\n# Product X\nOur brilliant new sleek design allows the user to have unparalleled comfort when using the device.\n"},{"region":{"xMin":0.4,"xMax":0.76,"yMin":0.2,"yMax":0.5},"image":"img/examples/product-laptop.png","caption":"\n# Product Y\nConsistent with product Y, the liquid retina display with true tone technology extends from edge to edge.\n"},{"region":{"xMin":0.27,"xMax":0.43,"yMin":0.78,"yMax":1},"image":"img/examples/product-tablet.png","caption":"\n# Product Z\nWireless charging, a feature also avaliable as part of Product Z.\n"}]},{"subtype":"highlight-single-region","url":"img/examples/flow-1.png","zoom":false,"waypoints":[{"region":{"xMin":0.66,"xMax":1,"yMin":0.25,"yMax":0.5},"image":"img/examples/flow-2.png","caption":"\n# Process Flow\nAt this point in the process, those who answer no move directly\nto the end.\n"}],"lightbox":{"background":"transparent"},"appearance":{"waypointColor":"None"}}]}
});

;require.register("engine/image-map/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (continueBtnText, doneText, hasNarration, hasPrompt, i18n, prompt, submitUp, undefined, url, waypoints) {
jade_mixins["image"] = jade_interp = function(imageUrl, klass){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<img" + (jade.attr("src", imageUrl, true, false)) + (jade.cls([klass], [true])) + "/>");
};
buf.push("<div class=\"content-fill text-center block-v-md\"><div class=\"image-container block-inline content-fill\">");
jade_mixins["image"](url, 'img-map content-ver');
buf.push("<div class=\"waypoints content\">");
// iterate waypoints
;(function(){
  var $$obj = waypoints;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var w = $$obj[i];

buf.push("<div" + (jade.attr("style", ([
            "left: " + (w.region.xMin * 100) + "%",
            "top: " + (w.region.yMin * 100) + "%",
            "width: " + ((w.region.xMax - w.region.xMin) * 100) + "%",
            "height: " + ((w.region.yMax - w.region.yMin) * 100) + "%"
          ].join(";")), true, false)) + (jade.attr("data-index", i, true, false)) + " class=\"waypoint\"></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var w = $$obj[i];

buf.push("<div" + (jade.attr("style", ([
            "left: " + (w.region.xMin * 100) + "%",
            "top: " + (w.region.yMin * 100) + "%",
            "width: " + ((w.region.xMax - w.region.xMin) * 100) + "%",
            "height: " + ((w.region.yMax - w.region.yMin) * 100) + "%"
          ].join(";")), true, false)) + (jade.attr("data-index", i, true, false)) + " class=\"waypoint\"></div>");
    }

  }
}).call(this);

buf.push("</div></div></div>");
// iterate waypoints
;(function(){
  var $$obj = waypoints;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var w = $$obj[i];

buf.push("<div class=\"waypoint-img content-fill text-center\">");
jade_mixins["image"](w.image, 'content-ver');
buf.push("</div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var w = $$obj[i];

buf.push("<div class=\"waypoint-img content-fill text-center\">");
jade_mixins["image"](w.image, 'content-ver');
buf.push("</div>");
    }

  }
}).call(this);

buf.push("<div class=\"full-screen\"><div class=\"navigation text-center\"><div class=\"caption text-md block-lg\"></div></div></div><div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined,"url" in locals_for_with?locals_for_with.url:typeof url!=="undefined"?url:undefined,"waypoints" in locals_for_with?locals_for_with.waypoints:typeof waypoints!=="undefined"?waypoints:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/image-map/view.coffee", function(exports, require, module) {
var ImageMapView, SlideView, Sound,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SlideView = require("views/slide");

Sound = Application.actions().Sound;

ImageMapView = (function(superClass) {
  extend(ImageMapView, superClass);

  function ImageMapView() {
    return ImageMapView.__super__.constructor.apply(this, arguments);
  }

  ImageMapView.prototype.template = require("./template");

  ImageMapView.prototype.events = {
    "iostap .btn-done": "submit",
    "iostap .waypoint": "tapWaypoint",
    "iostap": "exitWaypoint"
  };

  ImageMapView.prototype.serialize = function() {
    var data, j, len, ref, waypoint;
    data = ImageMapView.__super__.serialize.apply(this, arguments);
    data.hasPrompt = true;
    ref = data.waypoints;
    for (j = 0, len = ref.length; j < len; j++) {
      waypoint = ref[j];
      waypoint.center = this.getCenter(waypoint.region);
    }
    return data;
  };

  ImageMapView.prototype.submit = function(e) {
    if (e != null) {
      e.stopImmediatePropagation();
    }
    return ImageMapView.__super__.submit.apply(this, arguments);
  };

  ImageMapView.prototype.beforeHide = function() {
    this.trigger("ui", {
      lightbox: false
    });
    if (this.currentSrc) {
      return Sound.fadeOut(this.currentSrc, 500, 0.02);
    }
  };

  ImageMapView.prototype.hide = function() {
    this.exitWaypoint();
    return this.el.classList.remove("is-loaded");
  };

  ImageMapView.prototype.refresh = function(params) {
    var caption, changed, i, j, len, ref, ref1;
    ref = params.data.waypoints;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      caption = ref[i].caption;
      if (caption !== ((ref1 = this.options.data.waypoints[i]) != null ? ref1.caption : void 0)) {
        changed = i;
      }
    }
    ImageMapView.__super__.refresh.apply(this, arguments);
    this.beforeShow();
    this.show(false);
    if (changed != null) {
      this.el.classList.add("no-transition");
      this.goToWaypoint(changed);
      return _.delay(((function(_this) {
        return function() {
          return _this.el.classList.remove("no-transition");
        };
      })(this)), 1);
    }
  };

  ImageMapView.prototype.onRefresh = function() {};

  ImageMapView.prototype.onResize = function() {
    this.getEl("waypoints").removeAttribute("style");
    return this.setContainerDimensions();
  };

  ImageMapView.prototype.beforeShow = function() {
    this.setState(false, "zoom");
    this.setState(this.options.data.stickyCaptions, "sticky");
    return this.setState(this.options.data.zoom.toString(), "recenter");
  };

  ImageMapView.prototype.setTextColor = function(lightbox) {
    var color, ref, ref1;
    if (color = lightbox != null ? (ref = lightbox.textColor) != null ? ref.toLowerCase() : void 0 : void 0) {
      return this.el.style.color = lightbox != null ? (ref1 = lightbox.textColor) != null ? ref1.toLowerCase() : void 0 : void 0;
    }
  };

  ImageMapView.prototype.setWaypointColor = function(appearance) {
    var color, ref;
    if (color = appearance != null ? (ref = appearance.waypointColor) != null ? ref.toLowerCase() : void 0 : void 0) {
      this.el.classList.remove("waypoint-none", "waypoint-black", "waypoint-white");
      return this.el.classList.add("waypoint-" + color);
    }
  };

  ImageMapView.prototype.showLightbox = function() {
    var ref;
    this.setState(true, "zoom");
    return this.trigger("ui", {
      lightbox: ((ref = this.options.data.lightbox) != null ? ref.background : void 0) || true
    });
  };

  ImageMapView.prototype.show = function(fadeImage) {
    var img;
    if (fadeImage == null) {
      fadeImage = true;
    }
    this.setEl(img = this.findOne(".img-map"), "image");
    if (img == null) {
      return;
    }
    this.setEl(this.findOne(".caption"), "caption");
    this.setEl(this.findOne(".waypoints"), "waypoints");
    this.setEl(this.findOne(".navigation"), "navigation");
    this.setEl(this.findOne(".image-container"), "container");
    this.setEl(this.findAll(".waypoint-img"), "images");
    this.setState("prompt");
    this.setState(false, "zoom");
    this.setTextColor(this.options.data.lightbox);
    this.setWaypointColor(this.options.data.appearance);
    this.listenTo(this, "resize", this.onResize);
    if (!fadeImage) {
      this.el.classList.add("no-transition");
    }
    if (img != null ? img.complete : void 0) {
      return this.setDimensions();
    } else if (img != null) {
      return img.onload = (function(_this) {
        return function() {
          return _this.setDimensions();
        };
      })(this);
    }
  };

  ImageMapView.prototype.setDimensions = function() {
    var i, j, len, ref, results, waypoint;
    this.setContainerDimensions();
    this.el.classList.add("is-loaded");
    this.el.offsetLeft;
    this.el.classList.remove("no-transition");
    ref = this.options.data.waypoints;
    results = [];
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      waypoint = ref[i];
      results.push(this.scaleDown(i));
    }
    return results;
  };

  ImageMapView.prototype.getCenter = function(wp) {
    return {
      x: (wp.xMin + wp.xMax) / 2,
      y: (wp.yMin + wp.yMax) / 2
    };
  };

  ImageMapView.prototype.allWaypointsTapped = function() {
    return _.reduce(this.getEl("waypoints").children, function(allTapped, el) {
      return allTapped && el.dataset.tapped;
    }, true);
  };

  ImageMapView.prototype.tapWaypoint = function(e) {
    var el;
    el = e.target;
    e.stopImmediatePropagation();
    this.goToWaypoint(+el.dataset.index);
    el.dataset.tapped = "true";
    el.classList.add("tapped");
    if (this.allWaypointsTapped()) {
      return this.setState("touched");
    }
  };

  ImageMapView.prototype.limits = function() {
    return {
      min: 0,
      max: this.options.data.waypoints.length - 1
    };
  };

  ImageMapView.prototype.goToWaypoint = function(currentIndex) {
    var caption, loaded, narration, ref, region;
    this.currentIndex = currentIndex;
    ref = this.options.data.waypoints[this.currentIndex], region = ref.region, caption = ref.caption, narration = ref.narration;
    loaded = false;
    if (this.currentSrc) {
      Sound.stop(this.currentSrc);
    }
    if ((this.currentSrc = narration) && !this.withoutNarration) {
      this.showLoadingNarration();
      Sound.play(narration, {
        cb: (function(_this) {
          return function() {};
        })(this),
        onProgress: (function(_this) {
          return function() {
            if (!loaded) {
              loaded = true;
              return _this.hideLoadingNarration();
            }
          };
        })(this)
      });
    }
    this.getEl("images").item(this.currentIndex).classList.add("active");
    this.showLightbox();
    this.toggleCaption(caption);
    return this.scaleUp(this.currentIndex);
  };

  ImageMapView.prototype.exitWaypoint = function() {
    if (this.currentIndex == null) {
      return;
    }
    if (this.currentSrc) {
      Sound.fadeOut(this.currentSrc, 500, 0.02);
    }
    this.getEl("images").item(this.currentIndex).classList.remove("active");
    this.toggleCaption();
    this.setState(false, "zoom");
    this.trigger("ui", {
      lightbox: false
    });
    this.scaleDown(this.currentIndex);
    this.transform(this.getEl("image"), {
      scale: 1,
      y: "-50%"
    });
    this.transform(this.getEl("navigation"), {
      y: 0
    });
    return delete this.currentIndex;
  };

  ImageMapView.prototype.scaleDown = function(index) {
    var left, scale, top, waypoint, wimage, x, y;
    wimage = this.getEl("images").item(index);
    scale = 1 / this.scaleForWaypoint(this.options.data.waypoints[index]);
    waypoint = this.getEl("waypoints").children[index];
    if (this.options.data.zoom) {
      top = (wimage.offsetHeight - this.getEl("waypoints").offsetHeight) / 2;
      left = this.getEl("waypoints").parentNode.offsetLeft;
      x = (waypoint.offsetLeft + waypoint.offsetWidth / 2) - (wimage.offsetWidth / 2 - left);
      y = (waypoint.offsetTop + waypoint.offsetHeight / 2) - (wimage.offsetHeight / 2 - top) - wimage.offsetTop;
    } else {
      x = 0;
      y = "-50%";
      scale = 1;
    }
    return this.transform(wimage, {
      x: x,
      y: y,
      scale: scale
    });
  };

  ImageMapView.prototype.scaleUp = function(index) {
    var iOffset, image, img, imgY, nav, navY, offY, ref, scaleToUse, wHeight, wTop, waypoint, wimage, x, y, yOffset;
    waypoint = this.options.data.waypoints[index];
    nav = this.getEl("navigation");
    image = this.getEl("image");
    wimage = this.getEl("images").item(index);
    wHeight = wimage.offsetHeight;
    wTop = (window.innerHeight - wHeight) / 2;
    yOffset = -nav.offsetHeight / 2 / image.height;
    yOffset *= 0.75;
    iOffset = yOffset * image.offsetHeight;
    if (this.options.data.zoom) {
      ref = this.getCenter(waypoint.region), x = ref.x, y = ref.y;
      scaleToUse = this.scaleForWaypoint(waypoint);
    } else {
      x = 0.5;
      y = 0.5;
      scaleToUse = 1;
    }
    this.transform(image, {
      x: scaleToUse * 100 * (0.5 - x) + "%",
      y: -50 + yOffset * 100 + scaleToUse * 100 * (0.5 - y) + "%",
      scale: scaleToUse
    });
    this.transform(wimage, {
      y: -50 + (100 * iOffset / wHeight) + "%",
      scale: 1
    });
    if (this.options.data.stickyCaptions) {
      img = wimage.firstChild;
      navY = nav.offsetTop - wTop;
      imgY = img.offsetTop + img.offsetHeight / 2 + iOffset;
      offY = -Math.max(navY - imgY, 0);
      return this.transform(nav, {
        y: offY
      });
    }
  };

  ImageMapView.prototype.scaleForWaypoint = function(waypoint) {
    var heightScale, image, index, navBounds, region, regionHeight, regionWidth, scaleToUse, viewportHeight, viewportWidth, widthScale, wimage, wp;
    if (this.options.data.zoom) {
      index = this.options.data.waypoints.indexOf(waypoint);
      region = waypoint.region;
      image = this.getEl("image");
      wp = this.getEl("waypoints").children[index];
      wimage = this.getEl("images").item(index);
      navBounds = this.getEl("navigation").getBoundingClientRect();
      viewportWidth = wimage.firstChild.offsetWidth;
      viewportHeight = wimage.firstChild.offsetHeight;
      regionWidth = (region.xMax - region.xMin) * image.offsetWidth;
      regionHeight = (region.yMax - region.yMin) * image.offsetHeight;
      widthScale = viewportWidth / regionWidth;
      heightScale = viewportHeight / regionHeight;
      return scaleToUse = Math.min(widthScale, heightScale);
    } else {
      return scaleToUse = 1;
    }
  };

  ImageMapView.prototype.toggleCaption = function(caption) {
    var ref;
    if (caption == null) {
      caption = false;
    }
    this.setState(Boolean(caption), "caption");
    if (caption) {
      this.getEl("caption").innerHTML = caption;
    }
    if (caption == null) {
      return this.getEl("caption").style.background = "";
    } else if ((ref = this.options.data.lightbox) != null ? ref.background : void 0) {
      return this.getEl("caption").style.background = this.options.data.lightbox.background;
    }
  };

  ImageMapView.prototype.setContainerDimensions = function() {
    this.getEl("waypoints").style.height = (this.getEl("image").offsetHeight) + "px";
    return this.getEl("waypoints").style.width = (this.getEl("image").offsetWidth) + "px";
  };

  return ImageMapView;

})(SlideView);

module.exports = ImageMapView;
});

;require.register("engine/image-multiple-choice/model.yaml", function(exports, require, module) {
module.exports = {"title":"image-multiple-choice","display":"Multiple Choice: Image","category":"Multiple Choice","features":{"stars":true,"social":true},"description":"Select the correct image(s)","model":{"title":{"types":["text","image","audio","video"],"default":""},"selectable":{"display":"Number of selectable answers","default":1,"type":"number"},"answers":{"display":"List items","type":[{"image":{"type":"image"},"correct":{"type":"boolean"}}],"min":2,"max":9},"reject":{"type":"boolean","default":false,"display":"Reject Answers","help":"Users will not be able to select incorrect answers.\n"},"answer":{"text":{"type":"html","default":"","display":"Answer Text"},"correct":{"type":"html","default":"That's correct!","display":"Correct Reinforcement"},"incorrect":{"type":"html","default":"Not quite...","display":"Incorrect Reinforcement"},"takeaway":{"type":"html","default":"","display":"Core Message"}},"game":{"timer":{"limit":{"type":"number","default":-1,"display":"Time Limit (seconds)"},"out-of-time-prompt":{"type":"html","display":"Out of time prompt"}}},"prompt":{"type":"html","default":"Select the correct answer"},"doneText":{"type":"html","default":"Continue","display":"Done text"}},"examples":[{"subtype":"multiple-choice","title":"Which is the correct product?","selectable":1,"reject":false,"horizontal":true,"answers":[{"image":"img/examples/product-phone.png","correct":true},{"image":"img/examples/product-laptop.png"},{"image":"img/examples/product-tablet.png"}],"answer":{"incorrect":"Not quite...","correct":"That's correct!","text":"Product X is correct.\n"}}]}
});

;require.register("engine/image-multiple-choice/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (config, continueBtnText, doneText, game, hasNarration, hasPrompt, i18n, playinline, prompt, submitUp, tappies, undefined) {
jade_mixins["video-stream"] = jade_interp = function(videoUrl, playsinline, controls, klass, poster){
var block = (this && this.block), attributes = (this && this.attributes) || {};
playinline = playinline || true
controls = controls || true
klass = klass || 'video vjs-fluid'
var cloudinaryVideoFolderUrl = config.CLOUDINARY_CDN_URL+config.CLOUDINARY_VIDEO_FOLDER
var streamUrl = ''
if ( videoUrl && videoUrl.indexOf(cloudinaryVideoFolderUrl) > -1)
{
streamUrl = videoUrl.replace(cloudinaryVideoFolderUrl, cloudinaryVideoFolderUrl+'sp_full_hd/')
streamUrl = streamUrl.replace('.mp4', '.m3u8')
}
buf.push("<video" + (jade.attr("webkit-playsinline", playsinline, true, false)) + (jade.attr("controls", controls, true, false)) + " preload=\"auto\"" + (jade.attr("dir", config.direction, true, false)) + (jade.attr("poster", poster, true, false)) + (jade.cls(['video-js',klass], [null,true])) + "><source" + (jade.attr("src", videoUrl, true, false)) + "/>");
if ( streamUrl)
{
buf.push("<source" + (jade.attr("src", streamUrl, true, false)) + "/>");
}
buf.push("</video>");
};
jade_mixins["image"] = jade_interp = function(imageUrl, klass){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<img" + (jade.attr("src", imageUrl, true, false)) + (jade.cls([klass], [true])) + "/>");
};
jade_mixins["multi-content"] = jade_interp = function(prop, obj){
var block = (this && this.block), attributes = (this && this.attributes) || {};
obj = obj || locals;
switch (obj[prop + "Type"]){
case "image":
buf.push("<div" + (jade.attr("data-content", obj.image, true, false)) + " class=\"multi-content-wrapper multi-content-wrapper-image block-md block-lt\"><div class=\"block-sm multi-content-media\">");
jade_mixins["image"](obj[prop], 'multi-content multi-content-image');
buf.push("</div></div>");
  break;
case "video":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-video block-md block-lt\"><div class=\"block-sm multi-content-media\">");
jade_mixins["video-stream"](obj[prop], true, true,"multi-content multi-content-video block-dk");
buf.push("</div></div>");
  break;
case "audio":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-audio block-md block-lt\"><div class=\"block-sm multi-content-media\"><audio" + (jade.attr("src", obj[prop], true, false)) + " playsinline=\"playsinline\" preload=\"auto\" controls=\"controls\"" + (jade.attr("dir", config.direction, true, false)) + " class=\"multi-content multi-content-audio block-dk\"></audio></div></div>");
  break;
case "iframe":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-iframe block-md block-lt\"><div class=\"block-sm multi-content-iframe\">");
var iframe = obj[prop].match(/<iframe[^<]*<\/iframe>/)
if ( iframe)
{
buf.push(null == (jade_interp = iframe[0].replace(/ (width|height)=["'\d\w]+/g, "")) ? "" : jade_interp);
}
buf.push("</div></div>");
  break;
default:
buf.push("<span class=\"multi-content multi-content-text\">" + (null == (jade_interp = obj[prop]) ? "" : jade_interp) + "</span>");
  break;
}
};
if ( game && game.timer && game.timer.limit > 0 && !game.timer.isDisabled)
{
buf.push("<div class=\"full-screen\"><div class=\"game-stepper text-lg text-bold\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div></div>");
}
jade_mixins["image"] = jade_interp = function(imageUrl, klass){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<img" + (jade.attr("src", imageUrl, true, false)) + (jade.cls([klass], [true])) + "/>");
};
buf.push("<div class=\"content-fill text-center block-v-lg\"><div class=\"tappies-parent content-fill content-fit\"><h1 class=\"title block-v-md slide-up delay-3 tight\">");
jade_mixins["multi-content"]("title");
buf.push("</h1><div class=\"tappies\">");
// iterate tappies
;(function(){
  var $$obj = tappies;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var tappy = $$obj[i];

buf.push("<div" + (jade.attr("data-answer-id", tappy.id, true, false)) + (jade.cls(['tappy','block-md','delay-4','selectable',(i % 2 == 0 ? "slide-up" : "slide-down") + " delay-" + (i + 1) + "",tappy.correct ? "correct" : "incorrect"], [null,null,null,null,true,true])) + "><div class=\"tappy-content block-dk block-sm content-fill block-frame\">");
jade_mixins["image"](tappy.image, 'tappy-img content-ver');
buf.push("<div class=\"tappy-selection block-dk text-bold text-lg\"></div></div></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var tappy = $$obj[i];

buf.push("<div" + (jade.attr("data-answer-id", tappy.id, true, false)) + (jade.cls(['tappy','block-md','delay-4','selectable',(i % 2 == 0 ? "slide-up" : "slide-down") + " delay-" + (i + 1) + "",tappy.correct ? "correct" : "incorrect"], [null,null,null,null,true,true])) + "><div class=\"tappy-content block-dk block-sm content-fill block-frame\">");
jade_mixins["image"](tappy.image, 'tappy-img content-ver');
buf.push("<div class=\"tappy-selection block-dk text-bold text-lg\"></div></div></div>");
    }

  }
}).call(this);

buf.push("</div></div></div><div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"game" in locals_for_with?locals_for_with.game:typeof game!=="undefined"?game:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"playinline" in locals_for_with?locals_for_with.playinline:typeof playinline!=="undefined"?playinline:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"tappies" in locals_for_with?locals_for_with.tappies:typeof tappies!=="undefined"?tappies:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/image-multiple-choice/view.coffee", function(exports, require, module) {
var ImageMultipleChoiceView, MultipleChoiceView, Prefix, Preloader,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

MultipleChoiceView = require("../multiple-choice-game/view");

Preloader = require("lib/preload");

Prefix = require("lib/prefix");

ImageMultipleChoiceView = (function(superClass) {
  extend(ImageMultipleChoiceView, superClass);

  function ImageMultipleChoiceView() {
    return ImageMultipleChoiceView.__super__.constructor.apply(this, arguments);
  }

  ImageMultipleChoiceView.prototype.template = require("./template");

  ImageMultipleChoiceView.prototype.fitTextOnResize = false;

  ImageMultipleChoiceView.prototype.fitTextOnRender = false;

  ImageMultipleChoiceView.prototype.serialize = function() {
    var answers, data, ref, ref1;
    data = ImageMultipleChoiceView.__super__.serialize.apply(this, arguments);
    answers = (((ref = this.options.metadata.questions) != null ? (ref1 = ref[0]) != null ? ref1.answers : void 0 : void 0) || []).filter(function(el) {
      return el && el.content;
    }).map(function(el) {
      return {
        image: el.content,
        correct: el.correct,
        id: el.id
      };
    });
    data.tappies = _.shuffle(answers);
    return data;
  };

  ImageMultipleChoiceView.prototype.answerDetails = function() {
    var answers, details, ids, question, questions;
    questions = this.options.metadata.questions || [];
    if (!(questions.length > 0)) {
      return [];
    }
    question = questions[0];
    ids = this.getEl("selected").map(function(e) {
      return this.$(e).data('answer-id');
    });
    answers = question.answers.filter(function(a) {
      var ref;
      return ref = a.id, indexOf.call(ids, ref) >= 0;
    });
    details = answers.map(function(a) {
      return {
        question: question.question,
        answer: a
      };
    });
    return details;
  };

  ImageMultipleChoiceView.prototype.onResize = function() {
    return this.setTappyHeight(true);
  };

  ImageMultipleChoiceView.prototype.show = function() {
    ImageMultipleChoiceView.__super__.show.apply(this, arguments);
    this.listenTo(this, "resize", this.onResize);
    return this.setTappyHeight();
  };

  ImageMultipleChoiceView.prototype.setTappyHeight = function(isResize) {
    var ref;
    if (!(((ref = this.currentState) != null ? ref.refresh : void 0) || isResize)) {
      this.el.classList.remove("active");
    }
    this.setEl(this.findOne(".tappies-parent"), "tappy-parent");
    this.setEl(this.findAll(".tappy"), "tappies");
    this.setEl(this.findOne(".title"), "title");
    this.setEl(this.findOne(".tappies"), "tappy-container");
    return Preloader.load(_.pluck(this.findAll("img"), "src"), (function(_this) {
      return function(errors, imgs) {
        var cols, container, cratio, el, factor, i, iratio, j, len, len1, parent, ref1, ref2, rows, tappies, title;
        parent = _this.getEl("tappy-parent");
        container = _this.getEl("tappy-container");
        title = _this.getEl("title");
        tappies = _this.serialize().tappies;
        ref1 = _this.getEl("tappies");
        for (i = 0, len = ref1.length; i < len; i++) {
          el = ref1[i];
          el.style.opacity = 0;
        }
        container.style.height = parent.offsetHeight - title.offsetHeight + "px";
        iratio = _.chain(imgs).map(function(el) {
          return el.naturalWidth / el.naturalHeight;
        }).average().value();
        cratio = parent.offsetWidth / (parent.offsetHeight - title.offsetHeight);
        factor = cratio / iratio;
        rows = Math.round(Math.sqrt(tappies.length * (iratio / cratio), 2));
        rows = Math.max(Math.min(rows, tappies.length), 1);
        cols = Math.round((tappies.length + tappies.length % rows) / rows);
        ref2 = _this.getEl("tappies");
        for (j = 0, len1 = ref2.length; j < len1; j++) {
          el = ref2[j];
          el.style.height = (100 / rows) + "%";
          el.style.width = (100 / cols) + "%";
          el.offsetWidth;
          el.style.opacity = "";
        }
        return _this.fitText(function() {
          return window.setTimeout((function() {
            return _this.el.classList.add("active");
          }), 300);
        });
      };
    })(this));
  };

  return ImageMultipleChoiceView;

})(MultipleChoiceView);

module.exports = ImageMultipleChoiceView;
});

;require.register("engine/image-pair/model.yaml", function(exports, require, module) {
module.exports = {"title":"image-pair","display":"Image Pairs","category":"Relationships","features":{"stars":true,"social":true},"model":{"title":{"type":"text","default":"Select the correct image in each group"},"multi":{"type":"boolean","default":false,"display":"Select more than one correct answer"},"reject":{"type":"boolean","default":false,"display":"Reject incorrect answers"},"groups":{"display":"Pairs","min":1,"max":4,"type":[{"images":{"min":2,"max":2,"type":[{"image":{"type":"image"},"correct":{"type":"boolean"}}]}}]},"answer":{"text":{"type":"html","default":"","display":"Answer Text"},"correct":{"type":"text","default":"That's correct!","display":"Correct Reinforcement"},"incorrect":{"type":"text","default":"Not quite...","display":"Incorrect Reinforcement"},"takeaway":{"type":"text","default":"","display":"Core Message"}},"game":{"timer":{"limit":{"type":"number","default":-1,"display":"Time Limit (seconds)"},"out-of-time-prompt":{"type":"html","display":"Out of time prompt"}}},"prompt":{"type":"text","default":"Select each correct image"},"doneText":{"type":"html","default":"Continue","display":"Done text"}},"examples":[{"subtype":"image-pair","title":"Which is our first product?\n","multi":true,"groups":[{"images":[{"image":"img/examples/product-phone.png","correct":true},{"image":"img/examples/product-laptop.png","correct":false}]},{"images":[{"image":"img/examples/product-laptop.png","correct":false},{"image":"img/examples/product-phone.png","correct":true}]},{"images":[{"image":"img/examples/product-phone.png","correct":true},{"image":"img/examples/product-phone.png","correct":true}]},{"images":[{"image":"img/examples/product-laptop.png","correct":false},{"image":"img/examples/product-tablet.png","correct":false}]}]}]}
});

;require.register("engine/image-pair/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (continueBtnText, doneText, game, hasNarration, hasPrompt, i18n, klass, metadata, prompt, submitUp, title, undefined) {
if ( game && game.timer && game.timer.limit > 0 && !game.timer.isDisabled)
{
buf.push("<div class=\"full-screen\"><div class=\"game-stepper text-lg text-bold\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div></div>");
}
jade_mixins["image"] = jade_interp = function(imageUrl, klass){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<img" + (jade.attr("src", imageUrl, true, false)) + (jade.cls([klass], [true])) + "/>");
};
buf.push("<div class=\"content-fill\"><div class=\"block-v-md content-fill content-sm-ver content-md-ver\"><div class=\"row content-fill content-area text-center\"><div class=\"col-sm-12 col-lg-6 content-lg-ver\"><h1 class=\"title tight block-v-md\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1></div><div class=\"col-sm-12 col-lg-6\">");
// iterate metadata.questions
;(function(){
  var $$obj = metadata.questions;
  if ('number' == typeof $$obj.length) {

    for (var j = 0, $$l = $$obj.length; j < $$l; j++) {
      var pair = $$obj[j];

var question = pair.question;
var answers = pair.answers;
buf.push("<div class=\"row\">");
// iterate _.shuffle(pair.answers)
;(function(){
  var $$obj = _.shuffle(pair.answers);
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var answer = $$obj[i];

klass  = answer.correct ? "correct" : "incorrect"
klass += i === 0 ? " left" : " right"
buf.push("<div class=\"col-sm-6 block-v-sm slide-up hide-overflow block-box-sizing\"><div" + (jade.attr("data-correct", answer.correct, true, false)) + (jade.attr("data-content", answer.content, true, false)) + (jade.attr("data-answer-id", answer.id, true, false)) + (jade.attr("data-question-id", question.id, true, false)) + (jade.attr("data-group", j, true, false)) + (jade.attr("data-image", i, true, false)) + (jade.cls(['image-container','block-dk','block-sm','content-fill',klass], [null,null,null,null,true])) + ">");
jade_mixins["image"](answer.content, 'img content-ver block');
buf.push("</div></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var answer = $$obj[i];

klass  = answer.correct ? "correct" : "incorrect"
klass += i === 0 ? " left" : " right"
buf.push("<div class=\"col-sm-6 block-v-sm slide-up hide-overflow block-box-sizing\"><div" + (jade.attr("data-correct", answer.correct, true, false)) + (jade.attr("data-content", answer.content, true, false)) + (jade.attr("data-answer-id", answer.id, true, false)) + (jade.attr("data-question-id", question.id, true, false)) + (jade.attr("data-group", j, true, false)) + (jade.attr("data-image", i, true, false)) + (jade.cls(['image-container','block-dk','block-sm','content-fill',klass], [null,null,null,null,true])) + ">");
jade_mixins["image"](answer.content, 'img content-ver block');
buf.push("</div></div>");
    }

  }
}).call(this);

buf.push("</div>");
    }

  } else {
    var $$l = 0;
    for (var j in $$obj) {
      $$l++;      var pair = $$obj[j];

var question = pair.question;
var answers = pair.answers;
buf.push("<div class=\"row\">");
// iterate _.shuffle(pair.answers)
;(function(){
  var $$obj = _.shuffle(pair.answers);
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var answer = $$obj[i];

klass  = answer.correct ? "correct" : "incorrect"
klass += i === 0 ? " left" : " right"
buf.push("<div class=\"col-sm-6 block-v-sm slide-up hide-overflow block-box-sizing\"><div" + (jade.attr("data-correct", answer.correct, true, false)) + (jade.attr("data-content", answer.content, true, false)) + (jade.attr("data-answer-id", answer.id, true, false)) + (jade.attr("data-question-id", question.id, true, false)) + (jade.attr("data-group", j, true, false)) + (jade.attr("data-image", i, true, false)) + (jade.cls(['image-container','block-dk','block-sm','content-fill',klass], [null,null,null,null,true])) + ">");
jade_mixins["image"](answer.content, 'img content-ver block');
buf.push("</div></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var answer = $$obj[i];

klass  = answer.correct ? "correct" : "incorrect"
klass += i === 0 ? " left" : " right"
buf.push("<div class=\"col-sm-6 block-v-sm slide-up hide-overflow block-box-sizing\"><div" + (jade.attr("data-correct", answer.correct, true, false)) + (jade.attr("data-content", answer.content, true, false)) + (jade.attr("data-answer-id", answer.id, true, false)) + (jade.attr("data-question-id", question.id, true, false)) + (jade.attr("data-group", j, true, false)) + (jade.attr("data-image", i, true, false)) + (jade.cls(['image-container','block-dk','block-sm','content-fill',klass], [null,null,null,null,true])) + ">");
jade_mixins["image"](answer.content, 'img content-ver block');
buf.push("</div></div>");
    }

  }
}).call(this);

buf.push("</div>");
    }

  }
}).call(this);

buf.push("</div></div></div></div><div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"game" in locals_for_with?locals_for_with.game:typeof game!=="undefined"?game:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"klass" in locals_for_with?locals_for_with.klass:typeof klass!=="undefined"?klass:undefined,"metadata" in locals_for_with?locals_for_with.metadata:typeof metadata!=="undefined"?metadata:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/image-pair/view.coffee", function(exports, require, module) {
var GameView, ImagePairView, Preloader,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

GameView = require("views/base/game");

Preloader = require("lib/preload");

ImagePairView = (function(superClass) {
  extend(ImagePairView, superClass);

  function ImagePairView() {
    return ImagePairView.__super__.constructor.apply(this, arguments);
  }

  ImagePairView.prototype.template = require("./template");

  ImagePairView.prototype.events = function() {
    return {
      "iostap .image-container": "selectImage",
      "iostap .btn-done": "endGame"
    };
  };

  ImagePairView.prototype.show = function() {
    var images;
    ImagePairView.__super__.show.apply(this, arguments);
    this.setEl(this.findAll(".image-container"), "images");
    this.setEl(this.findOne(".title"), "title");
    this.setEl(this.findOne(".content-area"), "parent");
    this.setState(this.options.data.reject, "reject");
    this.listenTo(this, "resize", this.onResize);
    images = _.chain(this.options.metadata.questions).pluck("answers").flatten().pluck("content").union().value();
    Preloader.load(images, (function(_this) {
      return function() {
        return _this.onResize();
      };
    })(this));
    return this.enterGame();
  };

  ImagePairView.prototype.onResize = function() {
    var groupLength, height, image, j, k, len, len1, maxHeight, outerHeight, ref, ref1, results;
    ref = this.getEl("images");
    for (j = 0, len = ref.length; j < len; j++) {
      image = ref[j];
      image.parentNode.style.height = "";
    }
    outerHeight = this.getEl("parent").offsetHeight;
    if (this.el.offsetWidth < 1024) {
      outerHeight -= this.getEl("title").offsetHeight;
    }
    groupLength = this.options.data.groups.length;
    maxHeight = outerHeight / groupLength;
    height = _.reduce(this.getEl("images"), (function(m, e) {
      return Math.min(m, e.offsetHeight);
    }), maxHeight);
    this.getEl("parent").classList.toggle("content-fill", height === maxHeight);
    this.getEl("parent").classList.toggle("content-ver", height < maxHeight);
    ref1 = this.getEl("images");
    results = [];
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      image = ref1[k];
      results.push(image.parentNode.style.height = height + "px");
    }
    return results;
  };

  ImagePairView.prototype.selectImage = function(e) {
    var image, j, len, other, ref, wasIncorrect;
    image = e.currentTarget;
    if (this.options.data.reject && (image.dataset.correct == null)) {
      wasIncorrect = true;
      image.classList.add("show-incorrect");
      window.setTimeout((function() {
        return image.classList.remove("show-incorrect");
      }), 500);
    } else {
      image.classList.toggle("active");
    }
    if (!(this.options.data.multi || wasIncorrect)) {
      ref = this.getEl("images");
      for (j = 0, len = ref.length; j < len; j++) {
        other = ref[j];
        if (other !== image && other.dataset.group === image.dataset.group) {
          other.classList.remove("active");
        }
      }
    }
    return this.setState(this.isTouched() ? "touched" : "prompt");
  };

  ImagePairView.prototype.isTouched = function() {
    if (this.options.data.multi) {
      return true;
    } else {
      return _.chain(this.getEl("images")).groupBy(function(e, i) {
        return ~~(i / 2);
      }).map(function(group) {
        return group.filter(function(e) {
          return e.classList.contains("active");
        });
      }).reduce((function(isTouched, group) {
        return isTouched && group.length > 0;
      }), true).value();
    }
  };

  ImagePairView.prototype.imageIsCorrect = function(image) {
    return image.classList.contains("active") === (image.dataset.correct != null);
  };

  ImagePairView.prototype.isCorrect = function() {
    return _.chain(this.getEl("images")).map(this.imageIsCorrect).reduce((function(allCorrect, isCorrect) {
      return allCorrect && isCorrect;
    }), true).value();
  };

  ImagePairView.prototype.answerDetails = function() {
    var answersById, questions, questionsById, ref;
    questions = ((ref = this.options.metadata) != null ? ref.questions : void 0) || [];
    if (!(questions.length > 0)) {
      return [];
    }
    questionsById = _.chain(questions).pluck('question').indexBy('id').value();
    answersById = _.chain(questions).pluck('answers').flatten().indexBy('id').value();
    return _.chain(this.getEl('images')).compact().groupBy(function(e) {
      return e.dataset.questionId;
    }).map(function(images, questionId) {
      return _.chain(images).filter(function(i) {
        return i.classList.contains("active");
      }).map(function(answer) {
        return {
          question: questionsById[questionId],
          answer: answersById[answer.dataset.answerId]
        };
      }).value();
    }).compact().flatten().value();
  };

  ImagePairView.prototype.endGame = function() {
    ImagePairView.__super__.endGame.apply(this, arguments);
    return this.submit();
  };

  return ImagePairView;

})(GameView);

module.exports = ImagePairView;
});

;require.register("engine/image-slider/model.yaml", function(exports, require, module) {
module.exports = {"title":"image-slider","display":"Image Slider","category":"Content","description":"Swipe through a group of images","features":{"narration":true,"social":true},"model":{"items":{"min":1,"max":10,"type":[{"content":{"types":["image","text"]},"imagePosition":{"type":"select","enum":["Top","Middle","Bottom","Cover"],"default":"Middle","display":"Image Position"},"caption":{"type":"html"},"captionStyle":{"type":"select","enum":["Default","Light","Dark","Transparent Light Text","Transparent Dark Text"],"default":"Default","display":"Caption Style"},"position":{"type":"select","enum":["Top","Middle","Bottom"],"default":"Bottom","display":"Caption Position"},"color":{"type":"string","default":"","display":"Background Color"}}]},"arrows":{"type":"boolean","default":true,"help":"Use arrows to indicate how the template works. Hiding the arrows can help to focus on the slide content.\n"},"prompt":{"type":"html","default":"Swipe up to see more"},"doneText":{"type":"html","default":"Continue","display":"Done text","help":"Appears after multiple images are viewed."}},"examples":[{"subtype":"multiple","items":[{"contentType":"text","content":"Swipe up to learn more about our range of products."},{"content":"img/examples/product-phone.png","contentType":"image","caption":"Our brilliant new sleek design allows the user to have unparalleled comfort when using the device.\n","position":"Middle","color":"#91A6BA"},{"content":"img/examples/product-laptop.png","contentType":"image","caption":"Crystal clear display performs better than any of our competitors.\n","position":"Bottom","captionStyle":"Transparent Light Text","color":"#9fb9bf"},{"content":"img/examples/product-tablet.png","contentType":"image","caption":"The newest feature offers a new level of feedback for the user.\n","position":"Top","captionStyle":"Dark","color":"rgba(29, 46, 67, 0.84)"}]},{"subtype":"single","items":[{"content":"img/examples/product-phone.png","contentType":"image","caption":"\n### Product X\nBrilliant. In every way.\n"}]}]}
});

;require.register("engine/image-slider/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (arrows, continueBtnText, doneText, hasNarration, hasPrompt, i18n, items, prompt, submitUp, undefined, written) {
jade_mixins["image"] = jade_interp = function(imageUrl, klass){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<img" + (jade.attr("src", imageUrl, true, false)) + (jade.cls([klass], [true])) + "/>");
};
buf.push("<div class=\"content-fill slide-up\"><div class=\"carousel content-fill delay-6\"><div" + (jade.attr("style", "height: " + (items.length * 100) + "%;", true, false)) + " class=\"carousel-slider content-fill clearfix\">");
// iterate items
;(function(){
  var $$obj = items;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var item = $$obj[i];

buf.push("<div" + (jade.attr("style", "height: " + (100 / items.length) + "%;", true, false)) + (jade.cls(['carousel-item','content-fill',[
            "style-" + written.hyphenCase(item.captionStyle),
            "img-pos-" + written.hyphenCase(item.imagePosition)
          ].join(" ")], [null,null,true])) + "><div" + (jade.cls(['content-fill','carousel-content',(
              item.imagePosition === "Cover" ? "full-screen" : ""
            )], [null,null,true])) + ">");
switch (item.contentType){
case "text":
buf.push("<div class=\"content-ver text-center text-md\">" + (null == (jade_interp = item.content) ? "" : jade_interp) + "</div>");
  break;
case "image":
if ( item.imagePosition === "Cover")
{
buf.push("<div" + (jade.attr("style", "background-image: url(" + (item.content) + ")", true, false)) + " class=\"img-pos-cover\"></div>");
}
else
{
jade_mixins["image"](item.content, 'img content');
}
  break;
}
buf.push("</div>");
if ( item.caption)
{
buf.push("<div" + (jade.cls(['caption','text-center','block-box-sizing',"position-" + ((item.position || 'bottom').toLowerCase()) + ""], [null,null,null,true])) + "><div class=\"caption-content text-md block-lg\">" + (null == (jade_interp = item.caption) ? "" : jade_interp) + "</div></div>");
}
buf.push("</div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var item = $$obj[i];

buf.push("<div" + (jade.attr("style", "height: " + (100 / items.length) + "%;", true, false)) + (jade.cls(['carousel-item','content-fill',[
            "style-" + written.hyphenCase(item.captionStyle),
            "img-pos-" + written.hyphenCase(item.imagePosition)
          ].join(" ")], [null,null,true])) + "><div" + (jade.cls(['content-fill','carousel-content',(
              item.imagePosition === "Cover" ? "full-screen" : ""
            )], [null,null,true])) + ">");
switch (item.contentType){
case "text":
buf.push("<div class=\"content-ver text-center text-md\">" + (null == (jade_interp = item.content) ? "" : jade_interp) + "</div>");
  break;
case "image":
if ( item.imagePosition === "Cover")
{
buf.push("<div" + (jade.attr("style", "background-image: url(" + (item.content) + ")", true, false)) + " class=\"img-pos-cover\"></div>");
}
else
{
jade_mixins["image"](item.content, 'img content');
}
  break;
}
buf.push("</div>");
if ( item.caption)
{
buf.push("<div" + (jade.cls(['caption','text-center','block-box-sizing',"position-" + ((item.position || 'bottom').toLowerCase()) + ""], [null,null,null,true])) + "><div class=\"caption-content text-md block-lg\">" + (null == (jade_interp = item.caption) ? "" : jade_interp) + "</div></div>");
}
buf.push("</div>");
    }

  }
}).call(this);

buf.push("</div></div>");
if ( arrows)
{
buf.push("<div class=\"btn btn-muted btn-circular btn-up\"><span class=\"icon icon-chevron-up text-lg\"></span></div><div class=\"btn btn-muted btn-circular btn-down\"><span class=\"icon icon-chevron-down text-lg\"></span></div>");
}
buf.push("</div><div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"arrows" in locals_for_with?locals_for_with.arrows:typeof arrows!=="undefined"?arrows:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"items" in locals_for_with?locals_for_with.items:typeof items!=="undefined"?items:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined,"written" in locals_for_with?locals_for_with.written:typeof written!=="undefined"?written:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/image-slider/view.coffee", function(exports, require, module) {
var DraggyView, ImageSliderView, Preload, SlideView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SlideView = require("views/slide");

DraggyView = require("views/components/draggy").DraggyView;

Preload = require("lib/preload");

ImageSliderView = (function(superClass) {
  extend(ImageSliderView, superClass);

  function ImageSliderView() {
    return ImageSliderView.__super__.constructor.apply(this, arguments);
  }

  ImageSliderView.prototype.template = require("./template");

  ImageSliderView.prototype.currentIndex = 0;

  ImageSliderView.prototype.events = {
    "iostap .btn-done": "submit",
    "iostap": "onTap"
  };

  ImageSliderView.prototype.submit = function(e) {
    e.stopImmediatePropagation();
    return ImageSliderView.__super__.submit.apply(this, arguments);
  };

  ImageSliderView.prototype.onTap = function(e) {
    var index, ref, ref1;
    if (e.target instanceof HTMLAnchorElement) {
      return;
    }
    index = this.currentIndex;
    if (((ref = e.detail) != null ? ref.clientY : void 0) > this.el.offsetHeight / 2) {
      index++;
    } else {
      index--;
    }
    index = Math.max(Math.min(index, this.options.data.items.length - 1), 0);
    return (ref1 = this.draggy) != null ? ref1.reset({
      y: -index * this.draggy.offset.height
    }) : void 0;
  };

  ImageSliderView.prototype.serialize = function() {
    var data, item, j, len1, ref;
    data = ImageSliderView.__super__.serialize.apply(this, arguments);
    this.options.data.items = data.items = (data.items || []).filter(function(m) {
      return m.content || (m.caption && m.caption.length > 0);
    });
    ref = data.items;
    for (j = 0, len1 = ref.length; j < len1; j++) {
      item = ref[j];
      if (item.contentType == null) {
        item.contentType = "image";
      }
      if (item.captionStyle == null) {
        item.captionStyle = "Default";
      }
      if (item.imagePosition == null) {
        item.imagePosition = "Middle";
      }
    }
    if (data.items.length <= 1) {
      window.setTimeout(((function(_this) {
        return function() {
          return _this.setState("touched");
        };
      })(this)), 0);
    }
    data.hasPrompt = true;
    if (data.arrows == null) {
      data.arrows = true;
    }
    return data;
  };

  ImageSliderView.prototype.beforeShow = function() {
    if (this.options.data.arrows) {
      return this.trigger("hide", {
        arrows: false
      });
    }
  };

  ImageSliderView.prototype.show = function(index) {
    var el, item, j, len, len1, min, ref, ref1, ref2;
    if (index == null) {
      index = 0;
    }
    if ((ref = this.draggy) != null) {
      ref.undelegateEvents();
    }
    this.draggy = null;
    if (!this.draggy) {
      el = this.findOne(".carousel");
      this.setEl(el.firstChild, "scroller");
      this.setEl(this.findOne(".btn-up"), "btn-up");
      this.setEl(this.findOne(".btn-down"), "btn-down");
      if (this.options.data.items.length > 1) {
        len = this.options.data.items.length - 1;
        min = -el.offsetHeight * len;
        this.draggy = new DraggyView({
          el: el,
          minY: min,
          maxY: 0,
          lock: "x",
          allowPropagation: true
        });
        this.listenTo(this.draggy, "drag", this.onDrag);
        this.listenTo(this.draggy, "drop", this.onDrop);
        this.draggy.reset({
          y: -this.draggy.offset.height * Math.min(index, len)
        });
      } else if (item = this.getEl("scroller").firstChild) {
        item.classList.add("active");
        ref1 = item.children;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          el = ref1[j];
          this.transform(el, {
            opacity: 1,
            transition: "all 300ms"
          });
        }
      }
      this.trigger("ui", {
        lightbox: ((ref2 = this.options.data.items[0]) != null ? ref2.color : void 0) || false
      });
      this.listenTo(this, "resize", this.onResize);
      return this.onResize();
    }
  };

  ImageSliderView.prototype.onDrag = function(draggy, isInitial) {
    var transition;
    window.Backbone.trigger("canceltap");
    transition = isInitial ? "all 300ms" : "none";
    this.transform(this.getEl("scroller"), {
      y: this.getScrollDist(draggy),
      transition: transition
    });
    return this.updateChildren(draggy, transition);
  };

  ImageSliderView.prototype.onDrop = function(draggy, isReset) {
    var currentItem, func, m, ref, step, total, transition, y;
    if (isReset) {
      transition = this.currentIndex != null ? "all 300ms" : "";
      this.currentIndex = Math.floor(-draggy.y / draggy.offset.height);
      this.transform(this.getEl("scroller"), {
        y: this.getScrollDist(draggy),
        transition: transition
      });
      this.updateChildren(draggy, transition);
    } else {
      y = draggy.velocity.y;
      m = 0.9;
      func = y < -m ? "ceil" : y > m ? "floor" : "round";
      step = Math[func](Math.min(draggy.y / draggy.offset.height, 1));
      draggy.reset({
        y: step * draggy.offset.height
      });
    }
    total = this.options.data.items.length - 1;
    currentItem = this.options.data.items[this.currentIndex || 0];
    this.trigger("ui", {
      lightbox: (currentItem != null ? currentItem.color : void 0) || false
    });
    this.setState(((ref = currentItem.position) != null ? ref.toLowerCase() : void 0) || "none", "caption-position");
    this.getEl("btn-up").classList.toggle("active", this.currentIndex > 0);
    this.getEl("btn-down").classList.toggle("active", this.currentIndex < total);
    if (this.currentIndex === total) {
      return this.setState("touched");
    }
  };

  ImageSliderView.prototype.updateChildren = function(draggy, transition) {
    var child, height, i, item, j, len1, o, ref, results;
    height = draggy.offset.height;
    ref = this.getEl("scroller").children;
    results = [];
    for (i = j = 0, len1 = ref.length; j < len1; i = ++j) {
      child = ref[i];
      child.classList.toggle("active", i === this.currentIndex);
      child.classList.toggle("transition", transition !== "");
      if (transition) {
        this.transition(child, transition, true);
      }
      o = Math.abs(draggy.y + (i * height)) / height;
      results.push((function() {
        var k, len2, ref1, results1;
        ref1 = child.children;
        results1 = [];
        for (i = k = 0, len2 = ref1.length; k < len2; i = ++k) {
          item = ref1[i];
          if (!item.classList.contains("caption")) {
            results1.push(this.transform(item, {
              y: -o * height / (i + 1) / 3,
              opacity: 1 - o,
              transition: transition
            }));
          }
        }
        return results1;
      }).call(this));
    }
    return results;
  };

  ImageSliderView.prototype.getScrollDist = function(draggy) {
    return (draggy.y / draggy.offset.height / this.options.data.items.length * 100) + "%";
  };

  ImageSliderView.prototype.onResize = function() {
    var scroller;
    if (scroller = this.getEl("scroller") && this.draggy) {
      this.draggy.y = -this.currentIndex * this.draggy.offset.height;
      this.draggy.options.minY = -this.draggy.el.offsetHeight * (this.options.data.items.length - 1);
      return this.draggy.getOffset();
    }
  };

  ImageSliderView.prototype.refresh = function(params) {
    var changed, i, j, key, len1, next, prev, ref, val;
    ref = params.data.items;
    for (i = j = 0, len1 = ref.length; j < len1; i = ++j) {
      next = ref[i];
      prev = this.options.data.items[i];
      if (prev) {
        for (key in next) {
          val = next[key];
          if (prev[key] === void 0 || prev[key] !== val) {
            changed = i;
          }
          if (changed != null) {
            break;
          }
        }
      } else {
        changed = i;
      }
      if (changed != null) {
        break;
      }
    }
    ImageSliderView.__super__.refresh.apply(this, arguments);
    if (this.draggy) {
      this.draggy.undelegateEvents();
      this.draggy = this.currentIndex = null;
    }
    return this.show(changed);
  };

  ImageSliderView.prototype.screenshot = function() {
    this.currentIndex = -1;
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var getPages;
        getPages = function(images) {
          var ref;
          if (images == null) {
            images = [];
          }
          if (_this.currentIndex < _this.options.data.items.length - 1) {
            _this.currentIndex++;
            if (_this.options.data.items.length > 1) {
              if ((ref = _this.draggy) != null) {
                ref.reset({
                  y: -_this.currentIndex * _this.draggy.offset.height
                });
              }
            }
            return _this.collateScreenshots(images).then(getPages)["catch"](reject);
          } else {
            return resolve(images);
          }
        };
        return getPages();
      };
    })(this));
  };

  return ImageSliderView;

})(SlideView);

module.exports = ImageSliderView;
});

;require.register("engine/image-waypoints/model.yaml", function(exports, require, module) {
module.exports = {"title":"image-waypoints","display":"Image Waypoints","category":"Content","description":"Highlight important details in an image","features":{"narration":true,"social":true},"model":{"url":{"type":"image","default":"","display":"Image"},"waypoints":{"min":1,"max":20,"type":[{"region":{"type":"image-region","for":"url"},"caption":{"type":"html","default":""},"narration":{"type":"audio"}}]},"guided":{"type":"boolean","default":false,"help":"Start on the first waypoint and only continue with Previous and Next buttons.\n"},"appearance":{"waypointColor":{"display":"Waypoints Color","type":"select","default":"White","enum":["Black","White"]}},"lightbox":{"background":{"type":"string","default":"","display":"Background Color","help":"This color (eg. \"orange\", \"#f90\", \"rgb(255,160,0)\") will be used for the background of the entire screen in lightbox mode.\n"},"textColor":{"display":"Text Color","type":"select","default":"White","enum":["Black","White"]}},"prompt":{"type":"html","default":"Explore the image"},"doneText":{"type":"html","default":"Continue","display":"Done text"}},"examples":[{"subtype":"guided","url":"img/examples/product-phone.png","guided":true,"waypoints":[{"region":{"xMin":0,"xMax":1,"yMin":0,"yMax":1}},{"region":{"xMin":0.62,"xMax":0.78,"yMin":0,"yMax":0.15},"caption":"12 MP Front-Facing Camera"},{"region":{"xMin":0.14,"xMax":0.75,"yMin":0.19,"yMax":0.75},"caption":"Super Retina HD Display"},{"region":{"xMin":0.24,"xMax":0.43,"yMin":0.78,"yMax":1},"caption":"Power and Battery"}]},{"subtype":"unguided","url":"img/examples/product-phone.png","guided":false,"waypoints":[{"region":{"xMin":0.64,"xMax":0.76,"yMin":0,"yMax":0.15},"caption":"\n**12 MP Front-Facing Camera**\n\nA new sensor creates better image fidelity, greater colour accuracy and reduced noise in low-light shots.\n"},{"region":{"xMin":0.14,"xMax":0.75,"yMin":0.19,"yMax":0.75},"caption":"\n**Super Retina HD Display**\n\nThe custom-engineered OLED displays deliver the most accurate colour in the industry, as well as HDR and true blacks.\n"},{"region":{"xMin":0.24,"xMax":0.43,"yMin":0.78,"yMax":1},"caption":"\n**Power and Battery**\n\nBuilt-in rechargeable lithium-ion battery with wireless charging.\n"}]}]}
});

;require.register("engine/image-waypoints/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (continueBtnText, doneText, guided, hasNarration, hasPrompt, i18n, prompt, submitUp, undefined, url, waypoints) {
jade_mixins["image"] = jade_interp = function(imageUrl, klass){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<img" + (jade.attr("src", imageUrl, true, false)) + (jade.cls([klass], [true])) + "/>");
};
jade_mixins["image"] = jade_interp = function(imageUrl, klass){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<img" + (jade.attr("src", imageUrl, true, false)) + (jade.cls([klass], [true])) + "/>");
};
buf.push("<div class=\"full-screen content-fill hide-overflow text-center\"><div class=\"image-container content-ver block-inline\">");
jade_mixins["image"](url, 'img');
if ( !guided)
{
buf.push("<div class=\"waypoints\">");
// iterate waypoints
;(function(){
  var $$obj = waypoints;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var w = $$obj[i];

buf.push("<div" + (jade.attr("style", "left: " + (w.center.x * 100) + "%; top: " + (w.center.y * 100) + "%", true, false)) + (jade.attr("data-index", i, true, false)) + " class=\"waypoint\"></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var w = $$obj[i];

buf.push("<div" + (jade.attr("style", "left: " + (w.center.x * 100) + "%; top: " + (w.center.y * 100) + "%", true, false)) + (jade.attr("data-index", i, true, false)) + " class=\"waypoint\"></div>");
    }

  }
}).call(this);

buf.push("</div>");
}
buf.push("</div><div class=\"navigation text-center\"><div class=\"caption text-md block-lg\"></div>");
if ( guided)
{
buf.push("<div class=\"btn-container\"><div class=\"col-sm-4 col-sm-offset-2 col-lg-3 col-lg-offset-3 block-v-sm\"><div class=\"prev-wp btn btn-block\"><span class=\"icon icon-chevron-left text-xl\"></span></div></div><div class=\"col-sm-4 col-lg-3 block-v-sm\"><div class=\"next-wp btn btn-block\"><span class=\"icon icon-chevron-right text-xl\"></span></div></div></div>");
}
buf.push("</div></div><div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"guided" in locals_for_with?locals_for_with.guided:typeof guided!=="undefined"?guided:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined,"url" in locals_for_with?locals_for_with.url:typeof url!=="undefined"?url:undefined,"waypoints" in locals_for_with?locals_for_with.waypoints:typeof waypoints!=="undefined"?waypoints:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/image-waypoints/view.coffee", function(exports, require, module) {
var ImageWaypointsView, SlideView, Sound,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SlideView = require("views/slide");

Sound = Application.actions().Sound;

ImageWaypointsView = (function(superClass) {
  extend(ImageWaypointsView, superClass);

  function ImageWaypointsView() {
    return ImageWaypointsView.__super__.constructor.apply(this, arguments);
  }

  ImageWaypointsView.prototype.template = require("./template");

  ImageWaypointsView.prototype.events = {
    "iostap .btn-done": "submit",
    "iostap .prev-wp": "goToPrevWaypoint",
    "iostap .next-wp": "goToNextWaypoint",
    "iostap .waypoint": "tapWaypoint",
    "iostap": "exitWaypoint"
  };

  ImageWaypointsView.prototype.serialize = function() {
    var data, j, len, ref, waypoint;
    data = ImageWaypointsView.__super__.serialize.apply(this, arguments);
    data.hasPrompt = true;
    ref = data.waypoints;
    for (j = 0, len = ref.length; j < len; j++) {
      waypoint = ref[j];
      waypoint.center = this.getCenter(waypoint.region);
    }
    return data;
  };

  ImageWaypointsView.prototype.submit = function(e) {
    if (e != null) {
      e.stopImmediatePropagation();
    }
    return ImageWaypointsView.__super__.submit.apply(this, arguments);
  };

  ImageWaypointsView.prototype.beforeHide = function() {
    this.trigger("ui", {
      lightbox: false
    });
    if (this.currentSrc) {
      Sound.fadeOut(this.currentSrc, 500, 0.02);
    }
    return this.exitWaypoint();
  };

  ImageWaypointsView.prototype.hide = function() {
    return this.el.classList.remove("is-loaded");
  };

  ImageWaypointsView.prototype.refresh = function(params) {
    var caption, changed, i, j, len, ref, ref1;
    ref = params.data.waypoints;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      caption = ref[i].caption;
      if (caption !== ((ref1 = this.options.data.waypoints[i]) != null ? ref1.caption : void 0)) {
        changed = i;
      }
    }
    ImageWaypointsView.__super__.refresh.apply(this, arguments);
    this.beforeShow();
    this.show(false);
    if (changed != null) {
      this.el.classList.add("no-transition");
      this.goToWaypoint(changed);
      return _.delay(((function(_this) {
        return function() {
          return _this.el.classList.remove("no-transition");
        };
      })(this)), 1);
    }
  };

  ImageWaypointsView.prototype.onRefresh = function() {};

  ImageWaypointsView.prototype.onResize = function() {
    var ref;
    if (this.getEl("container")) {
      this.getEl("container").style.height = "";
      this.getEl("container").style.width = "";
      if ((ref = this.getEl("container").parentNode) != null) {
        ref.style.height = "";
      }
    }
    return this.setDimensions();
  };

  ImageWaypointsView.prototype.beforeShow = function() {
    this.setState(false, "zoom");
    this.setState(this.options.data.guided.toString(), "guided");
    if (this.options.data.guided) {
      return this.showLightbox();
    } else {
      return this.trigger("ui", {
        lightbox: false
      });
    }
  };

  ImageWaypointsView.prototype.setTextColor = function(lightbox) {
    var color, ref, ref1;
    if (color = lightbox != null ? (ref = lightbox.textColor) != null ? ref.toLowerCase() : void 0 : void 0) {
      return this.el.style.color = lightbox != null ? (ref1 = lightbox.textColor) != null ? ref1.toLowerCase() : void 0 : void 0;
    }
  };

  ImageWaypointsView.prototype.setWaypointColor = function(appearance) {
    var color, ref;
    if (color = appearance != null ? (ref = appearance.waypointColor) != null ? ref.toLowerCase() : void 0 : void 0) {
      this.el.classList.remove("waypoint-black", "waypoint-white");
      return this.el.classList.add("waypoint-" + color);
    }
  };

  ImageWaypointsView.prototype.showLightbox = function() {
    var ref;
    this.setState(true, "zoom");
    return this.trigger("ui", {
      lightbox: ((ref = this.options.data.lightbox) != null ? ref.background : void 0) || true
    });
  };

  ImageWaypointsView.prototype.show = function(fadeImage) {
    var img;
    if (fadeImage == null) {
      fadeImage = true;
    }
    this.setEl(img = this.findOne(".img"), "image");
    this.setEl(this.findOne(".caption"), "caption");
    this.setEl(this.findOne(".waypoints"), "waypoints");
    this.setEl(this.findOne(".navigation"), "navigation");
    this.setEl(this.findOne(".image-container"), "container");
    this.setState("prompt");
    this.setState(false, "zoom");
    this.setState(this.options.data.guided.toString(), "guided");
    this.setTextColor(this.options.data.lightbox);
    this.setWaypointColor(this.options.data.appearance);
    this.listenTo(this, "resize", this.onResize);
    if (!fadeImage) {
      this.el.classList.add("no-transition");
    }
    if (img != null ? img.complete : void 0) {
      this.resetImageScale();
      return this.setDimensions();
    } else if (img != null) {
      return img.onload = (function(_this) {
        return function() {
          _this.resetImageScale();
          return _this.setDimensions();
        };
      })(this);
    }
  };

  ImageWaypointsView.prototype.resetImageScale = function() {
    return this.transform(this.getEl("image"), "none");
  };

  ImageWaypointsView.prototype.setDimensions = function() {
    this.setContainerDimensions();
    this.el.classList.add("is-loaded");
    if (this.options.data.guided) {
      this.goToWaypoint(0);
    }
    this.el.offsetLeft;
    return this.el.classList.remove("no-transition");
  };

  ImageWaypointsView.prototype.getCenter = function(wp) {
    return {
      x: (wp.xMin + wp.xMax) / 2,
      y: (wp.yMin + wp.yMax) / 2
    };
  };

  ImageWaypointsView.prototype.allWaypointsTapped = function() {
    return _.reduce(this.getEl("waypoints").children, function(allTapped, el) {
      return allTapped && el.dataset.tapped;
    }, true);
  };

  ImageWaypointsView.prototype.tapWaypoint = function(e) {
    var el;
    el = e.target;
    e.stopImmediatePropagation();
    this.goToWaypoint(+el.dataset.index);
    el.dataset.tapped = "true";
    el.classList.add("tapped");
    if (this.allWaypointsTapped()) {
      return this.setState("touched");
    }
  };

  ImageWaypointsView.prototype.goToPrevWaypoint = function(e) {
    e.stopImmediatePropagation();
    return this.goToWaypoint(Math.max(this.currentIndex - 1, this.limits().min));
  };

  ImageWaypointsView.prototype.goToNextWaypoint = function(e) {
    e.stopImmediatePropagation();
    return this.goToWaypoint(Math.min(this.currentIndex + 1, this.limits().max));
  };

  ImageWaypointsView.prototype.updateNextPrevButtons = function() {
    var max, min, ref;
    if (this.options.data.guided) {
      ref = this.limits(), min = ref.min, max = ref.max;
      this.el.classList.toggle("prev-disabled", this.currentIndex === min);
      this.el.classList.toggle("next-disabled", this.currentIndex === max);
      if (this.currentIndex === max) {
        return this.setState("touched");
      }
    }
  };

  ImageWaypointsView.prototype.limits = function() {
    return {
      min: 0,
      max: this.options.data.waypoints.length - 1
    };
  };

  ImageWaypointsView.prototype.goToWaypoint = function(currentIndex) {
    var caption, loaded, narration, ref, region;
    this.currentIndex = currentIndex;
    ref = this.options.data.waypoints[this.currentIndex], region = ref.region, caption = ref.caption, narration = ref.narration;
    loaded = false;
    if (this.currentSrc) {
      Sound.stop(this.currentSrc);
    }
    if ((this.currentSrc = narration) && !this.withoutNarration) {
      this.showLoadingNarration();
      Sound.play(narration, {
        cb: (function(_this) {
          return function() {
            return _this.hideLoadingNarration();
          };
        })(this),
        onProgress: (function(_this) {
          return function() {
            if (!loaded) {
              loaded = true;
              return _this.hideLoadingNarration();
            }
          };
        })(this)
      });
    }
    this.showLightbox();
    this.updateNextPrevButtons();
    this.toggleCaption(caption);
    return this.scaleImage(region);
  };

  ImageWaypointsView.prototype.exitWaypoint = function() {
    if (this.currentSrc) {
      Sound.fadeOut(this.currentSrc, 500, 0.02);
    }
    if (!this.options.data.guided) {
      this.toggleCaption();
      this.setState(false, "zoom");
      this.trigger("ui", {
        lightbox: false
      });
      return this.resetImageScale();
    }
  };

  ImageWaypointsView.prototype.scaleImage = function(region, zoomed) {
    var heightScale, image, navBounds, ref, regionHeight, regionWidth, translateX, translateY, viewportHeight, viewportWidth, widthScale, x, y;
    if (zoomed == null) {
      zoomed = true;
    }
    image = this.getEl("image");
    navBounds = this.getEl("navigation").getBoundingClientRect();
    ref = this.getCenter(region), x = ref.x, y = ref.y;
    viewportWidth = this.el.offsetWidth;
    viewportHeight = zoomed || this.options.data.guided ? window.innerHeight - 150 : this.el.offsetHeight;
    regionWidth = (region.xMax - region.xMin) * image.width;
    regionHeight = (region.yMax - region.yMin) * image.height;
    widthScale = viewportWidth / regionWidth;
    heightScale = viewportHeight / regionHeight;
    this.scaleToUse = parseFloat(Math.min(widthScale, heightScale));
    translateX = -x * 100 * this.scaleToUse + 50 + "%";
    translateY = -y * 100 * this.scaleToUse + 50 + "%";
    return this.transform(image, "translateX(" + translateX + ") translateY(" + translateY + ") scale(" + this.scaleToUse + ")");
  };

  ImageWaypointsView.prototype.toggleCaption = function(caption) {
    var ref;
    if (caption == null) {
      caption = false;
    }
    this.setState(Boolean(caption), "caption");
    this.getEl("caption").innerHTML = caption || "";
    if (caption == null) {
      return this.getEl("caption").style.background = "";
    } else if ((ref = this.options.data.lightbox) != null ? ref.background : void 0) {
      return this.getEl("caption").style.background = this.options.data.lightbox.background;
    }
  };

  ImageWaypointsView.prototype.setContainerDimensions = function() {
    var heightScale, img, parentContainer, scale, scaledContainer, widthScale;
    img = this.getEl("image");
    parentContainer = this.getEl("container").parentNode.parentNode;
    if (!((img != null) && (parentContainer != null))) {
      return;
    }
    if (img.width === 0 || img.height === 0) {
      if (parentContainer.offsetWidth < parentContainer.offsetHeight) {
        this.getEl("container").style.width = parentContainer.offsetWidth + "px";
      } else {
        this.getEl("container").style.height = parentContainer.offsetHeight + "px";
      }
      return;
    }
    widthScale = parentContainer.offsetWidth / img.width;
    heightScale = parentContainer.offsetHeight / img.height;
    scale = Math.min(widthScale, heightScale);
    scaledContainer = {
      width: img.width * scale,
      height: img.height * scale
    };
    this.getEl("container").style.width = scaledContainer.width + "px";
    return this.getEl("container").style.height = scaledContainer.height + "px";
  };

  return ImageWaypointsView;

})(SlideView);

module.exports = ImageWaypointsView;
});

;require.register("engine/image/model.yaml", function(exports, require, module) {
module.exports = {"title":"image","display":"Simple Image","category":"Content","features":{"narration":true,"social":true},"description":"Display an image and optional caption","model":{"url":{"type":"image","default":"","display":"Image"},"compose":{"type":"boolean","default":false,"help":"Add a border and shadow to the image.\n"},"autofocus":{"type":"boolean","default":false,"help":"Automatically focus on the image to show its caption.\n"},"caption":{"title":{"type":"html","default":""},"content":{"type":"html","default":""}},"tapAnywhere":{"type":"boolean","display":"Tap anywhere to continue","default":false,"help":"Let the user tap anywhere on the screen to continue to the next slide. This only applies if there is no caption.\n"},"prompt":{"type":"html","default":"Select the image for more details"},"doneText":{"type":"html","default":"Continue","display":"Done text"}},"examples":[{"subtype":"image","url":"img/examples/product-phone.png","autofocus":false,"compose":true,"caption":{"title":"Product X","content":"Our brilliant new sleek design allows the user to have unparalleled comfort when using the device.\n"}}]}
});

;require.register("engine/image/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (backgroundColor, caption, compose, continueBtnText, doneText, hasCaption, hasNarration, hasPrompt, i18n, prompt, submitUp, url) {
jade_mixins["image"] = jade_interp = function(imageUrl, klass){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<img" + (jade.attr("src", imageUrl, true, false)) + (jade.cls([klass], [true])) + "/>");
};
buf.push("<div class=\"block-v-lg content-fill text-center\">");
jade_mixins["image"](url, 'img content-ver'+ (compose ? ' img-compose' : ''));
buf.push("<div class=\"slide-loader content\"></div></div>");
if ( hasCaption)
{
buf.push("<div class=\"text-center\"><div" + (jade.attr("style", "background-color: " + (backgroundColor) + ";", true, false)) + " class=\"caption block-lg text-md\">");
if ( caption.title)
{
buf.push("<p><strong>" + (null == (jade_interp = caption.title) ? "" : jade_interp) + "</strong></p>");
}
if ( caption.content)
{
buf.push(null == (jade_interp = caption.content) ? "" : jade_interp);
}
buf.push("</div></div>");
}
buf.push("<div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"backgroundColor" in locals_for_with?locals_for_with.backgroundColor:typeof backgroundColor!=="undefined"?backgroundColor:undefined,"caption" in locals_for_with?locals_for_with.caption:typeof caption!=="undefined"?caption:undefined,"compose" in locals_for_with?locals_for_with.compose:typeof compose!=="undefined"?compose:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"hasCaption" in locals_for_with?locals_for_with.hasCaption:typeof hasCaption!=="undefined"?hasCaption:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"url" in locals_for_with?locals_for_with.url:typeof url!=="undefined"?url:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/image/view.coffee", function(exports, require, module) {
var ImageSlideView, SlideView, dpi,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SlideView = require("views/slide");

dpi = require("lib/device").dpi;

ImageSlideView = (function(superClass) {
  extend(ImageSlideView, superClass);

  function ImageSlideView() {
    return ImageSlideView.__super__.constructor.apply(this, arguments);
  }

  ImageSlideView.prototype.template = require("./template");

  ImageSlideView.prototype.events = function() {
    var events, tapEvent;
    events = {};
    tapEvent = this.options.data.size === "zoom" ? "touch:tap" : "iostap";
    if (this.options.data.tapAnywhere && !this.hasCaption()) {
      events[tapEvent] = "submit";
    } else {
      events["iostap .btn-done"] = "submit";
      events["iostap"] = "showZoom";
    }
    return events;
  };

  ImageSlideView.prototype.serialize = function() {
    var data;
    data = ImageSlideView.__super__.serialize.apply(this, arguments);
    data.hasCaption = this.hasCaption();
    if (data.tapAnywhere && !data.hasCaption) {
      data.hasPrompt = true;
      data.prompt = i18n("image.tap-to-continue");
    } else if (data.hasCaption) {
      data.hasPrompt = true;
    }
    return data;
  };

  ImageSlideView.prototype.hasCaption = function() {
    var ref, ref1;
    return ((ref = this.options.data.caption) != null ? ref.title : void 0) || ((ref1 = this.options.data.caption) != null ? ref1.content : void 0);
  };

  ImageSlideView.prototype.beforeShow = function() {
    return this.trigger("ui", {
      flexibleHeight: true
    });
  };

  ImageSlideView.prototype.beforeHide = function() {
    var ref, ref1, ref2, ref3;
    if ((ref = this.photoswipe) != null) {
      if ((ref1 = ref.currItem.container) != null) {
        ref1.classList.add("pswp--smooth-exit");
      }
    }
    $((ref2 = this.photoswipe) != null ? ref2.container : void 0).closest("#photoswipe").attr("class", "pswp");
    if ((ref3 = this.photoswipe) != null) {
      ref3.close();
    }
    return this.trigger("ui", {
      flexibleHeight: false
    });
  };

  ImageSlideView.prototype.show = function() {
    var img, onLoad;
    this.setState(false, "focus");
    this.setState("prompt");
    img = this.findOne("img");
    onLoad = (function(_this) {
      return function() {
        img.removeEventListener("load", onLoad);
        _this.setState(true, "loaded");
        if (_this.options.data.autofocus) {
          return _this.showZoom();
        }
      };
    })(this);
    if (img.complete) {
      return onLoad();
    } else {
      return img.addEventListener("load", onLoad);
    }
  };

  ImageSlideView.prototype.showZoom = function(e, showAnimationDuration) {
    var img, left, pad, ref, thumbBounds, top, width;
    if (showAnimationDuration == null) {
      showAnimationDuration = 300;
    }
    this.setState("touched");
    this.setState(true, "focus");
    img = this.findOne("img");
    pad = this.options.data.compose ? 12 : 0;
    ref = img.getBoundingClientRect(), top = ref.top, left = ref.left, width = ref.width;
    thumbBounds = {
      x: left + pad,
      y: top + pad,
      w: width - pad * 2
    };
    this.photoswipe = new PhotoSwipe(document.querySelector("#photoswipe"), PhotoSwipeUI_Default, [
      {
        msrc: img.src,
        src: img.src,
        title: written.wrapInTag(this.options.data.caption.title, "h1") + written.wrapInTag(this.options.data.caption.content, "div"),
        w: (img.naturalWidth || img.width) / Math.min(dpi, 1.66),
        h: (img.naturalHeight || img.height) / Math.min(dpi, 1.66)
      }
    ], {
      showAnimationDuration: showAnimationDuration,
      focus: false,
      history: false,
      barsSize: {
        top: 0,
        bottom: 0
      },
      getThumbBoundsFn: function() {
        return thumbBounds;
      }
    });
    this.photoswipe.listen("close", (function(_this) {
      return function() {
        return _this.setState(false, "focus");
      };
    })(this));
    return this.photoswipe.init();
  };

  ImageSlideView.prototype.submit = function(e) {
    if (e != null) {
      e.stopImmediatePropagation();
    }
    return ImageSlideView.__super__.submit.apply(this, arguments);
  };

  ImageSlideView.prototype.refresh = function(params) {
    var ref, showCaption;
    if (_.isEqual(params.data.caption, this.options.data.caption)) {
      if ((ref = this.photoswipe) != null) {
        ref.close();
      }
    } else {
      showCaption = true;
    }
    ImageSlideView.__super__.refresh.apply(this, arguments);
    if (showCaption) {
      return this.showZoom(null, 0);
    }
  };

  return ImageSlideView;

})(SlideView);

module.exports = ImageSlideView;
});

;require.register("engine/list/model.yaml", function(exports, require, module) {
module.exports = {"title":"list","display":"List Slide","category":"Content","features":{"narration":true,"social":true},"description":"Display a list of bullet points","model":{"title":{"type":"html","default":""},"list":{"type":[{"type":"html"}],"min":1,"max":32}},"examples":[{"subtype":"list","title":"A List Slide","list":["Has a several points","Displays each point with a bullet","Is similar to a PowerPoint slide"]}]}
});

;require.register("engine/list/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (Math, continueBtnText, doneText, hasNarration, hasPrompt, i18n, list, prompt, submitUp, title, undefined) {
buf.push("<div class=\"list-container content content-scroll\"><div class=\"block-v-xl\"><h1 class=\"slide-up\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><ul class=\"list\">");
// iterate list
;(function(){
  var $$obj = list;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var item = $$obj[i];

buf.push("<li" + (jade.cls(['list-item','slide-up',"delay-" + (Math.min(i, 10)) + ""], [null,null,true])) + "><h2>" + (null == (jade_interp = item) ? "" : jade_interp) + "</h2></li>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var item = $$obj[i];

buf.push("<li" + (jade.cls(['list-item','slide-up',"delay-" + (Math.min(i, 10)) + ""], [null,null,true])) + "><h2>" + (null == (jade_interp = item) ? "" : jade_interp) + "</h2></li>");
    }

  }
}).call(this);

buf.push("</ul></div></div><div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"Math" in locals_for_with?locals_for_with.Math:typeof Math!=="undefined"?Math:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"list" in locals_for_with?locals_for_with.list:typeof list!=="undefined"?list:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/list/view.coffee", function(exports, require, module) {
var ListView, SlideView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SlideView = require("views/slide");

ListView = (function(superClass) {
  extend(ListView, superClass);

  function ListView() {
    return ListView.__super__.constructor.apply(this, arguments);
  }

  ListView.prototype.template = require("./template");

  ListView.prototype.events = {
    "iostap .btn-done": "submit"
  };

  return ListView;

})(SlideView);

module.exports = ListView;
});

;require.register("engine/matrix/model.yaml", function(exports, require, module) {
module.exports = {"title":"matrix","display":"Matrix","category":"Multiple Choice","features":{"stars":true,"social":true},"model":{"title":{"type":"html","default":""},"columns":{"min":2,"max":3,"type":[{"title":{"type":"html","default":"","display":"Column Title"},"correct":{"display":"Correct Answer","type":"html","default":""},"incorrect":{"display":"Incorrect Answers","min":1,"max":2,"type":[{"type":"html"}]}}]},"answer":{"text":{"type":"html","default":"","display":"Answer Text"},"correct":{"type":"html","default":"That's correct!","display":"Correct Reinforcement"},"incorrect":{"type":"html","default":"Not quite...","display":"Incorrect Reinforcement"},"takeaway":{"type":"html","default":"","display":"Core Message"}},"game":{"timer":{"limit":{"type":"number","default":-1,"display":"Time Limit (seconds)"},"out-of-time-prompt":{"type":"html","display":"Out of time prompt"}}},"prompt":{"type":"html","default":"Select each correct answer"},"doneText":{"type":"html","default":"Continue","display":"Done text"}},"examples":[{"subtype":"matrix","title":"Name the actor who played...","columns":[{"title":"Neo","correct":"Keanu Reeves","incorrect":["Laurence Fishburne","Carrie-Anne Moss"]},{"title":"Trinity","correct":"Carrie-Anne Moss","incorrect":["Keanu Reeves","Laurence Fishburne"]},{"title":"Morpheus","correct":"Laurence Fishburne","incorrect":["Keanu Reeves","Carrie-Anne Moss"]}],"answer":{"takeaway":"The matrix template tests connected information","text":"The matrix template is powerful addition to standard multiple choice questions. You can even use it to talk about the Matrix movie!\n"}}]}
});

;require.register("engine/matrix/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (columns, continueBtnText, doneText, game, hasNarration, hasPrompt, i18n, isLong, metadata, prompt, submitUp, title, undefined) {
if ( game && game.timer && game.timer.limit > 0 && !game.timer.isDisabled)
{
buf.push("<div class=\"full-screen\"><div class=\"game-stepper text-lg text-bold\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div></div>");
}
buf.push("<div class=\"block-v-xl content-ver text-center content-scroll\"><div class=\"content-scroll-inner\"><h1 class=\"block-v-sm fade-in\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"row\">");
// iterate metadata.questions
;(function(){
  var $$obj = metadata.questions;
  if ('number' == typeof $$obj.length) {

    for (var j = 0, $$l = $$obj.length; j < $$l; j++) {
      var column = $$obj[j];

buf.push("<div" + (jade.cls(['col-sm-12','block-v-sm',columns.length > 2 ? "col-md-4" : "col-md-6"], [null,null,true])) + "><div" + (jade.cls(['block-dk','block-sm','fade-in',"delay-" + (j) + ""], [null,null,null,true])) + ">");
var questionDetails = column.question || column.questionDetails || {};
buf.push("<div class=\"block-sm text-bold text-md\">" + (null == (jade_interp = questionDetails.content) ? "" : jade_interp) + "</div>");
// iterate column.answers
;(function(){
  var $$obj = column.answers;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var answer = $$obj[i];

buf.push("<div" + (jade.attr("data-column", j, true, false)) + (jade.attr("data-correct", answer.correct, true, false)) + (jade.attr("data-question-id", questionDetails.id, true, false)) + (jade.attr("data-answer-id", answer.id, true, false)) + " class=\"selectable block-sm fade-in\"><div" + (jade.cls(['btn','btn-solid','btn-block','slide-up',(isLong ? "btn-long" : "") + " delay-" + (i) + ""], [null,null,null,null,true])) + ">" + (null == (jade_interp = answer.content != null && answer.content != undefined ? answer.content : "&nbsp;") ? "" : jade_interp) + "</div></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var answer = $$obj[i];

buf.push("<div" + (jade.attr("data-column", j, true, false)) + (jade.attr("data-correct", answer.correct, true, false)) + (jade.attr("data-question-id", questionDetails.id, true, false)) + (jade.attr("data-answer-id", answer.id, true, false)) + " class=\"selectable block-sm fade-in\"><div" + (jade.cls(['btn','btn-solid','btn-block','slide-up',(isLong ? "btn-long" : "") + " delay-" + (i) + ""], [null,null,null,null,true])) + ">" + (null == (jade_interp = answer.content != null && answer.content != undefined ? answer.content : "&nbsp;") ? "" : jade_interp) + "</div></div>");
    }

  }
}).call(this);

buf.push("</div></div>");
    }

  } else {
    var $$l = 0;
    for (var j in $$obj) {
      $$l++;      var column = $$obj[j];

buf.push("<div" + (jade.cls(['col-sm-12','block-v-sm',columns.length > 2 ? "col-md-4" : "col-md-6"], [null,null,true])) + "><div" + (jade.cls(['block-dk','block-sm','fade-in',"delay-" + (j) + ""], [null,null,null,true])) + ">");
var questionDetails = column.question || column.questionDetails || {};
buf.push("<div class=\"block-sm text-bold text-md\">" + (null == (jade_interp = questionDetails.content) ? "" : jade_interp) + "</div>");
// iterate column.answers
;(function(){
  var $$obj = column.answers;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var answer = $$obj[i];

buf.push("<div" + (jade.attr("data-column", j, true, false)) + (jade.attr("data-correct", answer.correct, true, false)) + (jade.attr("data-question-id", questionDetails.id, true, false)) + (jade.attr("data-answer-id", answer.id, true, false)) + " class=\"selectable block-sm fade-in\"><div" + (jade.cls(['btn','btn-solid','btn-block','slide-up',(isLong ? "btn-long" : "") + " delay-" + (i) + ""], [null,null,null,null,true])) + ">" + (null == (jade_interp = answer.content != null && answer.content != undefined ? answer.content : "&nbsp;") ? "" : jade_interp) + "</div></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var answer = $$obj[i];

buf.push("<div" + (jade.attr("data-column", j, true, false)) + (jade.attr("data-correct", answer.correct, true, false)) + (jade.attr("data-question-id", questionDetails.id, true, false)) + (jade.attr("data-answer-id", answer.id, true, false)) + " class=\"selectable block-sm fade-in\"><div" + (jade.cls(['btn','btn-solid','btn-block','slide-up',(isLong ? "btn-long" : "") + " delay-" + (i) + ""], [null,null,null,null,true])) + ">" + (null == (jade_interp = answer.content != null && answer.content != undefined ? answer.content : "&nbsp;") ? "" : jade_interp) + "</div></div>");
    }

  }
}).call(this);

buf.push("</div></div>");
    }

  }
}).call(this);

buf.push("</div></div></div><div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"columns" in locals_for_with?locals_for_with.columns:typeof columns!=="undefined"?columns:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"game" in locals_for_with?locals_for_with.game:typeof game!=="undefined"?game:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"isLong" in locals_for_with?locals_for_with.isLong:typeof isLong!=="undefined"?isLong:undefined,"metadata" in locals_for_with?locals_for_with.metadata:typeof metadata!=="undefined"?metadata:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/matrix/view.coffee", function(exports, require, module) {
var GameView, MatrixView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

GameView = require("views/base/game");

MatrixView = (function(superClass) {
  extend(MatrixView, superClass);

  function MatrixView() {
    return MatrixView.__super__.constructor.apply(this, arguments);
  }

  MatrixView.prototype.template = require("./template");

  MatrixView.prototype.events = {
    "iostap .selectable": "selectAnswer",
    "iostap .btn-done": "endGame"
  };

  MatrixView.prototype.serialize = function() {
    var allTheAboveRx, d;
    d = MatrixView.__super__.serialize.apply(this, arguments);
    d.isLong = _.chain(d.metadata.questions).pluck('answers').flatten().pluck('content').sortBy(function(el) {
      return el.length;
    }).last().value().length > 10;
    allTheAboveRx = /the above/i;
    d.metadata.questions = _.map(d.metadata.questions, function(q) {
      var allTheAboveAnswer;
      q.answers = _.shuffle(q.answers);
      allTheAboveAnswer = _.find(q.answers, function(a) {
        return allTheAboveRx.test(a.content);
      });
      if (allTheAboveAnswer) {
        q.answers = _.without(q.answers, allTheAboveAnswer).concat(allTheAboveAnswer);
      }
      return q;
    });
    return d;
  };

  MatrixView.prototype.render = function() {
    MatrixView.__super__.render.apply(this, arguments);
    this.setEl(this.findAll(".selectable"), "answers");
    this.setEl(this.findAll(".column"), "columns");
    return this.onTimerChange(this.game.timer);
  };

  MatrixView.prototype.show = function() {
    var el, i, len, ref;
    MatrixView.__super__.show.apply(this, arguments);
    this.setState("prompt");
    ref = this.getEl("answers");
    for (i = 0, len = ref.length; i < len; i++) {
      el = ref[i];
      el.classList.remove("active");
    }
    return this.enterGame();
  };

  MatrixView.prototype.endGame = function() {
    MatrixView.__super__.endGame.apply(this, arguments);
    return this.submit();
  };

  MatrixView.prototype.selectAnswer = function(e) {
    var column, el, i, len, nbActive, ref, target;
    if (this.currentState.state === "complete") {
      return;
    }
    target = e.currentTarget;
    column = target.dataset.column;
    target.classList.add("active");
    ref = this.getEl("answers");
    for (i = 0, len = ref.length; i < len; i++) {
      el = ref[i];
      if (el.dataset.column === column) {
        if (el !== target) {
          el.classList.remove("active");
        }
      }
    }
    nbActive = (function() {
      var j, len1, ref1, results;
      ref1 = this.getEl("answers");
      results = [];
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        el = ref1[j];
        if (el.classList.contains("active")) {
          results.push(el);
        }
      }
      return results;
    }).call(this);
    if (nbActive.length === this.options.metadata.questions.length) {
      return this.setState("touched");
    }
  };

  MatrixView.prototype.isCorrect = function() {
    var correctSelected, el;
    correctSelected = (function() {
      var i, len, ref, results;
      ref = this.getEl("answers");
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        el = ref[i];
        if (el.classList.contains("active") && el.dataset.correct) {
          results.push(el);
        }
      }
      return results;
    }).call(this);
    return correctSelected.length === this.options.metadata.questions.length;
  };

  MatrixView.prototype.answerDetails = function() {
    var colIdx, details, dictAnswersByColNum, i, len, q, questionDetails, questions, selectedAnswer, selectedAnswerEl;
    questions = this.options.metadata.questions || [];
    if (!(questions.length > 0)) {
      return [];
    }
    details = [];
    dictAnswersByColNum = _.groupBy(this.$(".selectable"), function(el) {
      return this.$(el).data("column");
    });
    for (i = 0, len = questions.length; i < len; i++) {
      q = questions[i];
      colIdx = questions.indexOf(q);
      selectedAnswerEl = _.find(dictAnswersByColNum[colIdx], function(el) {
        return this.$(el).hasClass("active");
      });
      selectedAnswer = _.filter(q.answers, function(a) {
        return a.content === this.$(selectedAnswerEl).text();
      });
      questionDetails = {
        question: q.question,
        answer: selectedAnswer[0]
      };
      details.push(questionDetails);
    }
    return details;
  };

  return MatrixView;

})(GameView);

module.exports = MatrixView;
});

;require.register("engine/media-collection/model.yaml", function(exports, require, module) {
module.exports = {"title":"media-collection","display":"Media Collection","category":"Content","description":"Select a media element to see more detail","features":{"social":true},"model":{"title":{"type":"html"},"content":{"display":"List items","type":[{"content":{"types":["video","image","audio"]},"caption":{"type":"html"}}],"min":1,"max":3},"prompt":{"type":"html","default":"Select each item for more details"}},"examples":[{"subtype":"media-collection","title":"Example Media Collection","content":[{"contentType":"video","content":"video/example.mp4","caption":"This is the original product in our line and is a great source of pride for the company.\n"},{"contentType":"image","content":"img/examples/product-laptop.png","caption":"Product Y was introduced to appeal to a broader customers base and was a great success.\n"},{"contentType":"audio","content":"audio/achievement.mp3","caption":"Completing our range is Product Z. It appeals to old and new customers alike, making us a company for everyone.\n"}]}]}
});

;require.register("engine/media-collection/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (config, continueBtnText, doneText, hasNarration, hasPrompt, i18n, playinline, prompt, submitUp, tappies, title, undefined) {
jade_mixins["video-stream"] = jade_interp = function(videoUrl, playsinline, controls, klass, poster){
var block = (this && this.block), attributes = (this && this.attributes) || {};
playinline = playinline || true
controls = controls || true
klass = klass || 'video vjs-fluid'
var cloudinaryVideoFolderUrl = config.CLOUDINARY_CDN_URL+config.CLOUDINARY_VIDEO_FOLDER
var streamUrl = ''
if ( videoUrl && videoUrl.indexOf(cloudinaryVideoFolderUrl) > -1)
{
streamUrl = videoUrl.replace(cloudinaryVideoFolderUrl, cloudinaryVideoFolderUrl+'sp_full_hd/')
streamUrl = streamUrl.replace('.mp4', '.m3u8')
}
buf.push("<video" + (jade.attr("webkit-playsinline", playsinline, true, false)) + (jade.attr("controls", controls, true, false)) + " preload=\"auto\"" + (jade.attr("dir", config.direction, true, false)) + (jade.attr("poster", poster, true, false)) + (jade.cls(['video-js',klass], [null,true])) + "><source" + (jade.attr("src", videoUrl, true, false)) + "/>");
if ( streamUrl)
{
buf.push("<source" + (jade.attr("src", streamUrl, true, false)) + "/>");
}
buf.push("</video>");
};
jade_mixins["media-collection-content"] = jade_interp = function(prop, obj, isDetails){
var block = (this && this.block), attributes = (this && this.attributes) || {};
obj = obj || locals;
switch (obj[prop + "Type"]){
case "image":
buf.push("<img" + (jade.attr("src", obj[prop], true, false)) + (jade.cls(['block-v-md',isDetails ? "full-size" : "thumbnail"], [null,true])) + "/>");
  break;
case "audio":
if ( isDetails)
{
buf.push("<audio" + (jade.attr("src", obj[prop], true, false)) + " webkit-playsinline=\"webkit-playsinline\" playsinline=\"playsinline\" preload=\"auto\" controls=\"controls\" class=\"multi-content multi-content-audio full-size\"></audio>");
}
else
{
buf.push("<audio" + (jade.attr("src", obj[prop], true, false)) + " webkit-playsinline=\"webkit-playsinline\" playsinline=\"playsinline\" preload=\"none\" controls=\"controls\" class=\"multi-content multi-content-audio thumbnail\"></audio>");
}
  break;
case "video":
default:
if ( isDetails)
{
jade_mixins["video-stream"](obj[prop], true, true, "multi-content vjs-fluid full-size");
}
else
{
jade_mixins["video-stream"](obj[prop], false, false, "video vjs-fluid multi-content thumbnail");
}
  break;
}
};
buf.push("<div class=\"block-v-lg content-fill text-center\"><div class=\"content-container content-fill\"><div class=\"content-sm-ver content-md-ver content-lg-ver\"><h1 class=\"title slide-down delay-3 tight\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"parent-container content-fill\"><div class=\"tappies-parent content-fill\"><div class=\"row tappies text-center\">");
if ( !!tappies)
{
// iterate tappies
;(function(){
  var $$obj = tappies;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var tappy = $$obj[i];

buf.push("<div" + (jade.attr("data-index", i, true, false)) + (jade.cls(['tappy','content-fill','col-sm-12','col-lg-8','col-lg-offset-2','slide-up',"delay-" + (i) + ""], [null,null,null,null,null,null,true])) + "><div class=\"tappy-child content-fill block-dk block-sm\">");
jade_mixins["media-collection-content"]("content", tappy, false);
buf.push("<!-- put a transparent overlay on top of each item that--><!-- intercepts the click/tap events--><div class=\"tappy-overlay\"></div></div></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var tappy = $$obj[i];

buf.push("<div" + (jade.attr("data-index", i, true, false)) + (jade.cls(['tappy','content-fill','col-sm-12','col-lg-8','col-lg-offset-2','slide-up',"delay-" + (i) + ""], [null,null,null,null,null,null,true])) + "><div class=\"tappy-child content-fill block-dk block-sm\">");
jade_mixins["media-collection-content"]("content", tappy, false);
buf.push("<!-- put a transparent overlay on top of each item that--><!-- intercepts the click/tap events--><div class=\"tappy-overlay\"></div></div></div>");
    }

  }
}).call(this);

}
buf.push("</div></div><div class=\"details-parent content-fill\">");
if ( !!tappies)
{
// iterate tappies
;(function(){
  var $$obj = tappies;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var tappy = $$obj[i];

buf.push("<div class=\"details content-sm-ver content-md-ver content-lg-ver\">");
jade_mixins["media-collection-content"]("content", tappy, true);
buf.push("<div class=\"caption block-v-md block-h-md text-md\">" + (null == (jade_interp = tappy.caption) ? "" : jade_interp) + "</div></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var tappy = $$obj[i];

buf.push("<div class=\"details content-sm-ver content-md-ver content-lg-ver\">");
jade_mixins["media-collection-content"]("content", tappy, true);
buf.push("<div class=\"caption block-v-md block-h-md text-md\">" + (null == (jade_interp = tappy.caption) ? "" : jade_interp) + "</div></div>");
    }

  }
}).call(this);

}
buf.push("</div></div></div></div></div><div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"playinline" in locals_for_with?locals_for_with.playinline:typeof playinline!=="undefined"?playinline:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"tappies" in locals_for_with?locals_for_with.tappies:typeof tappies!=="undefined"?tappies:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/media-collection/view.coffee", function(exports, require, module) {
var MediaCollectionView, SlideView,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SlideView = require("views/slide");

MediaCollectionView = (function(superClass) {
  extend(MediaCollectionView, superClass);

  function MediaCollectionView() {
    this.playDetailsMedia = bind(this.playDetailsMedia, this);
    this.showDetails = bind(this.showDetails, this);
    return MediaCollectionView.__super__.constructor.apply(this, arguments);
  }

  MediaCollectionView.prototype.template = require("./template");

  MediaCollectionView.prototype.fitTextOnResize = false;

  MediaCollectionView.prototype.fitTextOnRender = false;

  MediaCollectionView.prototype.events = function() {
    return {
      "iostap .btn-done": "submit",
      "iostap": "hideDetails",
      "iostap .tappy": "toggleContent"
    };
  };

  MediaCollectionView.prototype.serialize = function() {
    var data;
    data = MediaCollectionView.__super__.serialize.call(this);
    data.tappies = data.content || [];
    data.hasPrompt = true;
    return data;
  };

  MediaCollectionView.prototype.show = function() {
    var id, j, k, len, ref, ref1, results, results1, thumbnailPlayer, video;
    this.setEl(this.findOne(".tappies"), "tappies");
    this.setEl(this.findAll(".details"), "details");
    this.onResize();
    this.listenTo(this, "resize", this.onResize);
    this.toVisit = (function() {
      results = [];
      for (var j = 0, ref = this.serialize().tappies.length; 0 <= ref ? j < ref : j > ref; 0 <= ref ? j++ : j--){ results.push(j); }
      return results;
    }).apply(this);
    this.hideDetails();
    ref1 = this.el.querySelectorAll(".video-js.thumbnail");
    results1 = [];
    for (k = 0, len = ref1.length; k < len; k++) {
      video = ref1[k];
      id = video.getAttribute("id");
      thumbnailPlayer = _.findWhere(this.players, {
        id_: id
      });
      if (thumbnailPlayer) {
        thumbnailPlayer.play().pause();
      }
      results1.push(this.resetPlayer(thumbnailPlayer));
    }
    return results1;
  };

  MediaCollectionView.prototype.resetPlayer = function(player) {
    return window.setTimeout((function() {
      return player.hasStarted(false);
    }), 1);
  };

  MediaCollectionView.prototype.onResize = function() {
    var contentContainer, detailsParent, el, i, j, len, length, outerHeight, ref, tappiesParent, tappyHeight, title;
    title = this.$(".title");
    contentContainer = this.$(".content-container");
    detailsParent = this.$(".details-parent");
    tappiesParent = this.$(".tappies-parent");
    length = this.getEl("tappies").children.length;
    if (length >= 4) {
      length = Math.ceil(length / 2);
    }
    outerHeight = contentContainer.height() - title.height();
    tappyHeight = outerHeight / length;
    tappyHeight = Math.min(tappyHeight, 220);
    ref = this.getEl("tappies").children;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      el = ref[i];
      $(el).height(tappyHeight);
    }
    return this.$(".tappy-overlay").height(this.$(".tappy-child").height());
  };

  MediaCollectionView.prototype.onDetailResize = function() {
    var details;
    details = this.getEl("active-details");
    return this.limitDetailImageSize(details);
  };

  MediaCollectionView.prototype.showDetails = function(tappy, animate) {
    var contentType, details, index;
    index = +tappy.dataset.index;
    contentType = this.getContentType(index);
    details = this.getEl("details").item(index);
    this.toVisit = _.without(this.toVisit, index);
    this.setEl(details, "active-details");
    if (_.isEmpty(this.toVisit)) {
      this.setState("touched");
    }
    this.setState("active", "details");
    this.listenTo(this, "resize", this.onDetailResize);
    this.onDetailResize();
    $(details).css({
      opacity: 1,
      "z-index": 1000,
      transform: animate ? "translate(-50%, -50%) scale(1)" : ""
    });
    this.playDetailsMedia(contentType, details);
    return tappy.classList.add("visited");
  };

  MediaCollectionView.prototype.limitDetailImageSize = function(details) {
    var availableHeightForImage, caption, detailsParent, fullSizeImage, video;
    detailsParent = this.$(".details-parent");
    fullSizeImage = details.querySelector(".full-size");
    caption = details.querySelector(".caption");
    availableHeightForImage = detailsParent.height() - caption.offsetHeight;
    video = fullSizeImage.querySelector("video");
    fullSizeImage.style.maxHeight = availableHeightForImage + "px";
    if (video && video.offsetHeight > availableHeightForImage) {
      return $(fullSizeImage).css("padding-top", availableHeightForImage);
    } else if (fullSizeImage.offsetHeight > availableHeightForImage) {
      return $(fullSizeImage).height(availableHeightForImage);
    }
  };

  MediaCollectionView.prototype.toggleContent = function(e) {
    return this.showDetails(e.currentTarget, true);
  };

  MediaCollectionView.prototype.playDetailsMedia = function(contentType, details) {
    if (contentType === "video") {
      return window.setTimeout(((function(_this) {
        return function() {
          var id, videoJsPlayer;
          videoJsPlayer = details.querySelector("div.video-js");
          if (videoJsPlayer) {
            id = videoJsPlayer.getAttribute("id");
            _this.activePlayer = _.findWhere(_this.players, {
              id_: id
            });
            return _this.activePlayer.play();
          }
        };
      })(this)), 400);
    } else if (contentType === "audio") {
      return window.setTimeout((function() {
        var audioPlayer;
        audioPlayer = details.querySelector("audio");
        if (audioPlayer) {
          return audioPlayer.play();
        }
      }), 400);
    }
  };

  MediaCollectionView.prototype.hideDetails = function(e) {
    var details;
    if (e != null) {
      if (/vjs/.test(e.target.className) || e.target.nodeName === "VIDEO") {
        return;
      }
      if (e.target.nodeName === "AUDIO") {
        return;
      }
    }
    if (!(details = this.getEl("active-details"))) {
      return;
    }
    this.stopDetailsMedia(details);
    $(details).css({
      opacity: 0,
      "z-index": 0,
      transform: "translate(-50%, -50%) scale(0.9)"
    });
    return this.setState("inactive", "details");
  };

  MediaCollectionView.prototype.stopDetailsMedia = function(details) {
    var audioEl;
    audioEl = details.querySelector("audio");
    if (audioEl != null) {
      audioEl.pause();
    }
    return this.stopMedia();
  };

  MediaCollectionView.prototype.getContentType = function(index) {
    return this.options.data.content[index].contentType || "video";
  };

  MediaCollectionView.prototype.refresh = function(params) {
    var caption, content, i, itemChangedIdx, j, len, ref, ref1, ref2, ref3, tappy;
    if (params.data.content && this.options.data.content && params.data.content.length === this.options.data.content.length) {
      ref = params.data.content;
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        ref1 = ref[i], content = ref1.content, caption = ref1.caption;
        if (content && ((ref2 = this.options.data.content[i]) != null ? ref2.content : void 0) !== content || ((ref3 = this.options.data.content[i]) != null ? ref3.caption : void 0) !== caption) {
          itemChangedIdx = i;
        }
      }
    }
    MediaCollectionView.__super__.refresh.call(this, params);
    if ((itemChangedIdx != null) && (tappy = this.getEl("tappies").children[itemChangedIdx])) {
      return this.showDetails(tappy, false);
    }
  };

  return MediaCollectionView;

})(SlideView);

module.exports = MediaCollectionView;
});

;require.register("engine/missing-word/model.yaml", function(exports, require, module) {
module.exports = {"title":"missing-word","display":"Missing Word","category":"Concepts","links":{"academy":"https://academy.edapp.com/how-to-missing-word/"},"features":{"stars":true,"social":true},"model":{"title":{"type":"html","default":"Select the missing words in this sentence"},"words":{"min":1,"max":6,"type":[{"type":"html"}]},"answer":{"text":{"type":"html","default":"","display":"Answer Text"},"correct":{"type":"html","default":"That's correct!","display":"Correct Reinforcement"},"incorrect":{"type":"html","default":"Not quite...","display":"Incorrect Reinforcement"},"takeaway":{"type":"html","default":"","display":"Core Message"}},"game":{"timer":{"limit":{"type":"number","default":-1,"display":"Time Limit (seconds)"},"out-of-time-prompt":{"type":"html","display":"Out of time prompt"}}},"prompt":{"type":"html","default":"Drag in the missing words"},"doneText":{"type":"html","default":"Continue","display":"Done text"}},"examples":[{"subtype":"missing-word","title":"Fill in the important information about Product X","words":["important","old","Product X","Product Y"],"answer":{"text":"Use missing word to reinforce important messaging about Product X."}}]}
});

;require.register("engine/missing-word/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (Math, components, continueBtnText, doneText, game, hasNarration, hasPrompt, i18n, prompt, submitUp, undefined, words) {
if ( game && game.timer && game.timer.limit > 0 && !game.timer.isDisabled)
{
buf.push("<div class=\"full-screen\"><div class=\"game-stepper text-lg text-bold\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div></div>");
}
buf.push("<div class=\"content-fill\"><div class=\"content-md content-fill text-center\"><div class=\"row content-md-ver content-sm-ver content-fit\"><div class=\"col-md-10 col-md-offset-1 col-sm-12 block-v-md\"><h1 class=\"fade-in\">");
// iterate components
;(function(){
  var $$obj = components;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var word = $$obj[i];

var n = 9;
buf.push("<div" + (jade.cls(['word','slide-up',"delay-" + (n - Math.abs(-n + i % (n * 2))) + ""], [null,null,true])) + ">");
if ( word.incorrect)
{
buf.push("<div" + (jade.attr("data-name", word.incorrect, true, false)) + " class=\"droppy\"></div><span class=\"word-text\">" + (null == (jade_interp = word.replaces) ? "" : jade_interp) + "</span>");
}
else
{
buf.push(null == (jade_interp = word.replaces) ? "" : jade_interp);
}
buf.push("</div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var word = $$obj[i];

var n = 9;
buf.push("<div" + (jade.cls(['word','slide-up',"delay-" + (n - Math.abs(-n + i % (n * 2))) + ""], [null,null,true])) + ">");
if ( word.incorrect)
{
buf.push("<div" + (jade.attr("data-name", word.incorrect, true, false)) + " class=\"droppy\"></div><span class=\"word-text\">" + (null == (jade_interp = word.replaces) ? "" : jade_interp) + "</span>");
}
else
{
buf.push(null == (jade_interp = word.replaces) ? "" : jade_interp);
}
buf.push("</div>");
    }

  }
}).call(this);

buf.push("</h1></div><div class=\"col-sm-12 block-v-md\"><div class=\"block-v-lg block-h-md block-dk\">");
// iterate words 
;(function(){
  var $$obj = words ;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var word = $$obj[i];

buf.push("<div" + (jade.attr("data-name", word, true, false)) + (jade.cls(['draggy','btn','btn-sm','btn-solid','slide-up',"delay-" + (i) + ""], [null,null,null,null,null,true])) + ">" + (null == (jade_interp = word) ? "" : jade_interp) + "</div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var word = $$obj[i];

buf.push("<div" + (jade.attr("data-name", word, true, false)) + (jade.cls(['draggy','btn','btn-sm','btn-solid','slide-up',"delay-" + (i) + ""], [null,null,null,null,null,true])) + ">" + (null == (jade_interp = word) ? "" : jade_interp) + "</div>");
    }

  }
}).call(this);

buf.push("</div></div></div></div></div><div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"Math" in locals_for_with?locals_for_with.Math:typeof Math!=="undefined"?Math:undefined,"components" in locals_for_with?locals_for_with.components:typeof components!=="undefined"?components:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"game" in locals_for_with?locals_for_with.game:typeof game!=="undefined"?game:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined,"words" in locals_for_with?locals_for_with.words:typeof words!=="undefined"?words:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/missing-word/view.coffee", function(exports, require, module) {
var DraggyView, GameView, MissingWordView, convert,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

GameView = require("views/base/game");

DraggyView = require("views/components/draggy").DraggyView;

convert = require("lib/convert");

MissingWordView = (function(superClass) {
  extend(MissingWordView, superClass);

  function MissingWordView() {
    return MissingWordView.__super__.constructor.apply(this, arguments);
  }

  MissingWordView.prototype.template = require("./template");

  MissingWordView.prototype.events = {
    "iostap .btn-done": "endGame"
  };

  MissingWordView.prototype.serialize = function() {
    var component, data, escapedWord, filteredWords, i, incorrect, index, leftGroup, rightGroup, substringRegex, title, unescapedWord, word, words;
    data = MissingWordView.__super__.serialize.apply(this, arguments);
    title = data.title, words = data.words;
    title = convert.toText(title);
    words = words.map(function(w) {
      return convert.toText(w);
    });
    filteredWords = _.filter(words, function(item) {
      return item !== "";
    });
    words = (function() {
      var j, len, results;
      results = [];
      for (i = j = 0, len = filteredWords.length; j < len; i = ++j) {
        word = filteredWords[i];
        unescapedWord = word;
        escapedWord = word.replace(/\W/g, (function(w) {
          return "\\" + w;
        }));
        leftGroup = "([^A-Z]|^)";
        rightGroup = "([^A-Z]|$)";
        substringRegex = new RegExp("" + leftGroup + escapedWord + rightGroup, "i");
        if (title.match(substringRegex) != null) {
          incorrect = unescapedWord;
          title = title.replace(substringRegex, (function(_this) {
            return function(matched, leftCharacter, rightCharacter) {
              var leftSide, rightSide;
              leftSide = leftCharacter === ' ' ? leftCharacter : leftCharacter + " ";
              rightSide = rightCharacter === ' ' ? rightCharacter : " " + rightCharacter;
              return leftSide + ("{{" + i + "}}") + rightSide;
            };
          })(this));
        }
        results.push({
          replaces: word,
          incorrect: incorrect
        });
      }
      return results;
    }).call(this);
    data.components = (function() {
      var j, len, ref, ref1, ref2, ref3, results;
      ref = title.trim().split(" ");
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        component = ref[j];
        index = +((ref1 = component.match(/\{\{(\d+)\}\}/)) != null ? ref1[1] : void 0);
        results.push({
          incorrect: (ref2 = words[index]) != null ? ref2.incorrect : void 0,
          replaces: ((ref3 = words[index]) != null ? ref3.replaces : void 0) || component
        });
      }
      return results;
    })();
    data.words = _.shuffle(filteredWords);
    return data;
  };

  MissingWordView.prototype.show = function() {
    var draggy, el, i, j, len, ref;
    MissingWordView.__super__.show.apply(this, arguments);
    if (this.draggies) {
      ref = this.draggies;
      for (j = 0, len = ref.length; j < len; j++) {
        draggy = ref[j];
        draggy.undelegateEvents();
      }
    }
    this.draggies = (function() {
      var k, len1, ref1, results;
      ref1 = this.findAll(".draggy");
      results = [];
      for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {
        el = ref1[i];
        draggy = new DraggyView({
          el: el
        });
        this.listenTo(draggy, "drag", this.onDrag);
        this.listenTo(draggy, "drop", this.onDrop);
        results.push(draggy);
      }
      return results;
    }).call(this);
    this.droppies = this.getElements(".droppy", null);
    this.el.classList.add("ready");
    this.listenTo(this, "resize", this.onResize);
    return this.enterGame();
  };

  MissingWordView.prototype.onResize = function() {
    var bounds, draggy, droppy, height, id, j, left, len, ref, results, top, width, x, y;
    ref = this.droppies || [];
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      droppy = ref[j];
      results.push((function() {
        var k, len1, ref1, ref2, results1;
        ref1 = droppy.contains || [];
        results1 = [];
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          id = ref1[k];
          draggy = _.find(this.draggies, {
            cid: id
          });
          this.transition(draggy.el, "none");
          draggy.getOffset();
          bounds = droppy.el.getBoundingClientRect();
          ref2 = draggy.offset, left = ref2.left, top = ref2.top, width = ref2.width, height = ref2.height;
          x = Math.round(bounds.left + bounds.width / 2 - left - width / 2);
          y = Math.round(bounds.top + bounds.height / 2 - top - height / 2);
          draggy.setPosition({
            x: x,
            y: y
          });
          results1.push(this.transform(draggy.el, {
            x: x,
            y: y
          }));
        }
        return results1;
      }).call(this));
    }
    return results;
  };

  MissingWordView.prototype.getElements = function(selector, original) {
    var contains, el, i, j, k, len, len1, ref, ref1, results, results1;
    if (original) {
      results = [];
      for (j = 0, len = original.length; j < len; j++) {
        ref = original[j], el = ref.el, contains = ref.contains;
        results.push({
          el: el,
          contains: contains,
          bounds: el.getBoundingClientRect()
        });
      }
      return results;
    } else {
      ref1 = this.findAll(selector);
      results1 = [];
      for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {
        el = ref1[i];
        results1.push({
          el: el,
          bounds: el.getBoundingClientRect(),
          contains: []
        });
      }
      return results1;
    }
  };

  MissingWordView.prototype.onDrag = function(draggy, isInitialDrag) {
    var activeIndex, droppy, i, j, len, ref;
    if (isInitialDrag) {
      this.droppies = this.getElements(".droppy", this.droppies);
    }
    activeIndex = draggy.closest(_.pluck(this.droppies, "bounds"));
    ref = this.droppies;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      droppy = ref[i];
      droppy.el.classList.toggle("active", i === activeIndex);
      droppy.isActive = i === activeIndex;
    }
    if (isInitialDrag) {
      draggy.el.className = draggy.el.className.replace(/delay-\d/, "");
    }
    return this.transform(draggy.el, {
      x: draggy.x,
      y: draggy.y,
      transition: isInitialDrag ? "all 300ms" : "none"
    });
  };

  MissingWordView.prototype.onDrop = function(draggy) {
    var bounds, droppy, height, left, ref, top, width, x, y;
    ref = draggy.offset, left = ref.left, top = ref.top, width = ref.width, height = ref.height;
    droppy = ((function() {
      var j, len, ref1, results;
      ref1 = this.droppies;
      results = [];
      for (j = 0, len = ref1.length; j < len; j++) {
        droppy = ref1[j];
        if (droppy.isActive) {
          results.push(droppy);
        }
      }
      return results;
    }).call(this))[0];
    x = y = 0;
    if (droppy) {
      bounds = droppy.bounds;
      x = Math.round(bounds.left + bounds.width / 2 - left - width / 2);
      y = Math.round(bounds.top + bounds.height / 2 - top - height / 2);
    } else {
      draggy.isPositioned = false;
    }
    if (this.options.data.reject && (droppy != null ? droppy.el.dataset.name : void 0) !== draggy.el.dataset.name) {
      if (droppy != null) {
        droppy.isActive = false;
      }
      x = y = 0;
    }
    if (draggy.x !== x || draggy.y !== y) {
      draggy.reset({
        x: x,
        y: y
      });
    } else {
      this.transform(draggy.el, {
        x: draggy.x,
        y: draggy.y,
        transition: "all 300ms"
      });
      this.checkAnswer(draggy);
    }
    return this.setState(this.isTouched() ? "touched" : "prompt");
  };

  MissingWordView.prototype.checkAnswer = function(draggy) {
    var containsActive, droppy, j, len, ref, results, toReset;
    ref = this.droppies;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      droppy = ref[j];
      droppy.el.classList.remove("active");
      containsActive = _.include(droppy.contains, draggy.cid);
      if (droppy.isActive) {
        draggy.el.classList.add("is-positioned");
        draggy.isPositioned = true;
        toReset = this.getDraggyFromID(droppy.contains[0], draggy);
        if (droppy.contains.length > 0 && toReset) {
          droppy.isActive = false;
          this.resetDraggy(toReset);
        }
        results.push(droppy.contains = _.uniq(droppy.contains.concat(draggy.cid)));
      } else if (containsActive) {
        results.push(droppy.contains = _.without(droppy.contains, draggy.cid));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  MissingWordView.prototype.showAnswer = function() {
    var draggy, j, len, ref, results;
    ref = this.draggies;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      draggy = ref[j];
      results.push(draggy.lock());
    }
    return results;
  };

  MissingWordView.prototype.isTouched = function() {
    var droppy, touchedDroppies;
    touchedDroppies = (function() {
      var j, len, ref, results;
      ref = this.droppies;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        droppy = ref[j];
        if (droppy.contains.length > 0) {
          results.push(droppy);
        }
      }
      return results;
    }).call(this);
    return touchedDroppies.length === this.droppies.length;
  };

  MissingWordView.prototype.getDraggyFromID = function(cid, draggy) {
    return _.find(this.draggies, function(d) {
      return d !== draggy && d.cid === cid;
    });
  };

  MissingWordView.prototype.resetDraggy = function(draggy) {
    draggy.reset();
    draggy.el.classList.remove("is-positioned");
    return draggy.isPositioned = false;
  };

  MissingWordView.prototype.isCorrect = function() {
    return this.droppies.reduce((function(_this) {
      return function(isCorrect, d, i) {
        var ref, ref1, ref2;
        return isCorrect && ((ref = _this.getDraggyFromID(d.contains[0])) != null ? (ref1 = ref.el.dataset.name) != null ? ref1.toLowerCase() : void 0 : void 0) === ((ref2 = d.el.dataset.name) != null ? ref2.toLowerCase() : void 0);
      };
    })(this), true);
  };

  MissingWordView.prototype.answerDetails = function() {
    var details, questions;
    questions = this.options.strippedMetadata.questions || [];
    if (!(questions.length > 0)) {
      return [];
    }
    details = this.droppies.map((function(_this) {
      return function(d, i) {
        var answer, draggyId, isWordCorrect, questionDetails, ref, text;
        draggyId = d.contains[0];
        text = (ref = _this.getDraggyFromID(draggyId)) != null ? ref.el.dataset.name : void 0;
        isWordCorrect = d.el.dataset.name.toLowerCase() === text.toLowerCase();
        questionDetails = _.find(questions, function(q) {
          return q.question.content.toLowerCase() === text.toLowerCase();
        });
        answer = _.find(questionDetails.answers, function(a) {
          return a.correct === isWordCorrect;
        });
        answer.content = text;
        questions = _.reject(questions, function(q) {
          return q.question.id === questionDetails.question.id;
        });
        return {
          question: questionDetails.question,
          answer: answer
        };
      };
    })(this));
    return details;
  };

  MissingWordView.prototype.endGame = function() {
    MissingWordView.__super__.endGame.apply(this, arguments);
    return this.submit();
  };

  return MissingWordView;

})(GameView);

module.exports = MissingWordView;
});

;require.register("engine/multiple-choice-game/model.yaml", function(exports, require, module) {
module.exports = {"title":"multiple-choice-game","display":"Multiple Choice","category":"Multiple Choice","features":{"stars":true,"social":true},"description":"Select the correct answer(s)","model":{"title":{"default":"","types":["text","image","video","audio","iframe"]},"subtitle":{"type":"text","default":""},"selectable":{"display":"Number of selectable answers","default":1,"type":"number"},"randomize":{"default":true,"type":"boolean","help":"Shuffle the answers, with those containing \"the above\" at the bottom.\n"},"answers":{"min":2,"max":8,"type":[{"content":{"type":"html"},"correct":{"type":"boolean"}}]},"answer":{"text":{"type":"html","default":"","display":"Answer Text"},"correct":{"type":"html","default":"That's correct!","display":"Correct Reinforcement"},"incorrect":{"type":"html","default":"Not quite...","display":"Incorrect Reinforcement"},"takeaway":{"type":"html","default":"","display":"Core Message"}},"game":{"timer":{"limit":{"type":"number","default":-1,"display":"Time Limit (seconds)"},"out-of-time-prompt":{"type":"html","display":"Out of time prompt"}}},"additionalContent":{"display":"Additional Content","default":"","types":["text","image","video","audio","iframe"],"help":"This content displays beneath the multiple choice answers"},"prompt":{"type":"html","default":"Select the correct answer"},"doneText":{"type":"html","default":"Continue","display":"Done text"}},"examples":[{"subtype":"true-or-false","title":"Can I do a simple true or false question?","titleType":"text","answers":[{"content":"True","correct":true},{"content":"False"}],"randomize":false,"answer":{"text":"Definitely. True and false works exactly as you would expect.\n"},"additionalContent":"","additionalContentType":"text"},{"subtype":"one-of-three","title":"Does the template support verbose answers?","titleType":"text","answers":[{"correct":true,"content":"Yes, the answers can be long and will still display nicely."},{"content":"No, verbosity is not allowed as it complicates things."},{"content":"No, it's boring to have long answers. No one will read them."}],"answer":{"text":"We do of course support long answers. They are not always necessary, but sometimes it's important to be specific and we always want to support your needs.\n"},"additionalContent":"","additionalContentType":"text"},{"subtype":"subset-of-five","title":"Which countries start with \"A\"?","titleType":"text","selectable":5,"prompt":"Select the correct answers","answers":[{"content":"Australia","correct":true},{"content":"Afghanistan","correct":true},{"content":"Armenia","correct":true},{"content":"Africa"},{"content":"France"}],"answer":{"text":"Australia, Afghanistan and Armenia all start with an \"A\". Can you name the other eight countries?\n"},"game":{"timer":{"limit":10000}},"additionalContent":"","additionalContentType":"text"},{"subtype":"subset-of-four","title":"Which of these are true?","titleType":"text","answers":[{"content":"All of the above","correct":true},{"content":"This"},{"content":"That"},{"content":"The other"}],"answer":{"takeaway":"All of the above are true","text":"It's possible to show incorrect answers in the specific order followed by a correct answer. Any answer that contains \"the above\" will be placed at the bottom of the list, random or not.\n"},"additionalContent":"","additionalContentType":"text"}]}
});

;require.register("engine/multiple-choice-game/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (additionalContent, answers, config, continueBtnText, doneText, game, hasNarration, hasPrompt, i18n, obj, playinline, prompt, submitUp, subtitle, undefined) {
jade_mixins["video-stream"] = jade_interp = function(videoUrl, playsinline, controls, klass, poster){
var block = (this && this.block), attributes = (this && this.attributes) || {};
playinline = playinline || true
controls = controls || true
klass = klass || 'video vjs-fluid'
var cloudinaryVideoFolderUrl = config.CLOUDINARY_CDN_URL+config.CLOUDINARY_VIDEO_FOLDER
var streamUrl = ''
if ( videoUrl && videoUrl.indexOf(cloudinaryVideoFolderUrl) > -1)
{
streamUrl = videoUrl.replace(cloudinaryVideoFolderUrl, cloudinaryVideoFolderUrl+'sp_full_hd/')
streamUrl = streamUrl.replace('.mp4', '.m3u8')
}
buf.push("<video" + (jade.attr("webkit-playsinline", playsinline, true, false)) + (jade.attr("controls", controls, true, false)) + " preload=\"auto\"" + (jade.attr("dir", config.direction, true, false)) + (jade.attr("poster", poster, true, false)) + (jade.cls(['video-js',klass], [null,true])) + "><source" + (jade.attr("src", videoUrl, true, false)) + "/>");
if ( streamUrl)
{
buf.push("<source" + (jade.attr("src", streamUrl, true, false)) + "/>");
}
buf.push("</video>");
};
jade_mixins["image"] = jade_interp = function(imageUrl, klass){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<img" + (jade.attr("src", imageUrl, true, false)) + (jade.cls([klass], [true])) + "/>");
};
jade_mixins["multi-content"] = jade_interp = function(prop, obj){
var block = (this && this.block), attributes = (this && this.attributes) || {};
obj = obj || locals;
switch (obj[prop + "Type"]){
case "image":
buf.push("<div" + (jade.attr("data-content", obj.image, true, false)) + " class=\"multi-content-wrapper multi-content-wrapper-image block-md block-lt\"><div class=\"block-sm multi-content-media\">");
jade_mixins["image"](obj[prop], 'multi-content multi-content-image');
buf.push("</div></div>");
  break;
case "video":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-video block-md block-lt\"><div class=\"block-sm multi-content-media\">");
jade_mixins["video-stream"](obj[prop], true, true,"multi-content multi-content-video block-dk");
buf.push("</div></div>");
  break;
case "audio":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-audio block-md block-lt\"><div class=\"block-sm multi-content-media\"><audio" + (jade.attr("src", obj[prop], true, false)) + " playsinline=\"playsinline\" preload=\"auto\" controls=\"controls\"" + (jade.attr("dir", config.direction, true, false)) + " class=\"multi-content multi-content-audio block-dk\"></audio></div></div>");
  break;
case "iframe":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-iframe block-md block-lt\"><div class=\"block-sm multi-content-iframe\">");
var iframe = obj[prop].match(/<iframe[^<]*<\/iframe>/)
if ( iframe)
{
buf.push(null == (jade_interp = iframe[0].replace(/ (width|height)=["'\d\w]+/g, "")) ? "" : jade_interp);
}
buf.push("</div></div>");
  break;
default:
buf.push("<span class=\"multi-content multi-content-text\">" + (null == (jade_interp = obj[prop]) ? "" : jade_interp) + "</span>");
  break;
}
};
if ( game && game.timer && game.timer.limit > 0 && !game.timer.isDisabled)
{
buf.push("<div class=\"full-screen\"><div class=\"game-stepper text-lg text-bold\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div></div>");
}
buf.push("<div class=\"content-sm-scroll content-sm-ver content-md-ver content-fit block-v-md content-lg-fill\"><div class=\"inner-content content-lg-fill fade-in text-center\"><div class=\"row content-lg-fill\"><div class=\"col col-lg-6 col-sm-12 block-v-md\"><div class=\"slide-title text-xxl text-lg-right text-md-center text-sm-center fade-in\">");
jade_mixins["multi-content"]("title");
buf.push("</div>");
if ( subtitle)
{
obj = obj || locals;
buf.push("<div" + (jade.cls(['slide-subtitle','text-lg','text-md-center','text-sm-center','fade-in','delay-2',(!!obj && obj.titleType === "audio" ? "text-lg-center" : "text-lg-right")], [null,null,null,null,null,null,true])) + ">" + (null == (jade_interp = subtitle) ? "" : jade_interp) + "</div>");
}
buf.push("</div><div class=\"col col-lg-6 col-sm-12 block-v-md\"><div class=\"answers block-md block-dk fade-in\"><div class=\"block-h-sm\">");
// iterate answers
;(function(){
  var $$obj = answers;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var answer = $$obj[i];

buf.push("<div" + (jade.attr("data-answer-id", answer.id, true, false)) + (jade.cls(['selectable','block-v-sm','fade-in',answer.correct ? "correct" : "incorrect"], [null,null,null,true])) + "><div" + (jade.cls(['btn','btn-solid','btn-block','slide-up',(answer.isLong ? "btn-long" : "") + " delay-" + (i) + ""], [null,null,null,null,true])) + ">" + (null == (jade_interp = answer.content) ? "" : jade_interp) + "</div></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var answer = $$obj[i];

buf.push("<div" + (jade.attr("data-answer-id", answer.id, true, false)) + (jade.cls(['selectable','block-v-sm','fade-in',answer.correct ? "correct" : "incorrect"], [null,null,null,true])) + "><div" + (jade.cls(['btn','btn-solid','btn-block','slide-up',(answer.isLong ? "btn-long" : "") + " delay-" + (i) + ""], [null,null,null,null,true])) + ">" + (null == (jade_interp = answer.content) ? "" : jade_interp) + "</div></div>");
    }

  }
}).call(this);

buf.push("</div></div>");
if ( !!additionalContent)
{
buf.push("<div class=\"block-v-md slide-title text-xxl text-md-center text-sm-center fade-in\">");
jade_mixins["multi-content"]("additionalContent");
buf.push("</div>");
}
buf.push("</div></div></div></div><div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"additionalContent" in locals_for_with?locals_for_with.additionalContent:typeof additionalContent!=="undefined"?additionalContent:undefined,"answers" in locals_for_with?locals_for_with.answers:typeof answers!=="undefined"?answers:undefined,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"game" in locals_for_with?locals_for_with.game:typeof game!=="undefined"?game:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"obj" in locals_for_with?locals_for_with.obj:typeof obj!=="undefined"?obj:undefined,"playinline" in locals_for_with?locals_for_with.playinline:typeof playinline!=="undefined"?playinline:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"subtitle" in locals_for_with?locals_for_with.subtitle:typeof subtitle!=="undefined"?subtitle:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/multiple-choice-game/view.coffee", function(exports, require, module) {
var GameView, MultipleChoiceGameView, dpi,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  slice = [].slice,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

GameView = require("views/base/game");

dpi = require("lib/device").dpi;

MultipleChoiceGameView = (function(superClass) {
  extend(MultipleChoiceGameView, superClass);

  function MultipleChoiceGameView() {
    return MultipleChoiceGameView.__super__.constructor.apply(this, arguments);
  }

  MultipleChoiceGameView.prototype.template = require("./template");

  MultipleChoiceGameView.prototype.events = {
    "iostap .selectable": "selectAnswer",
    "iostap .btn-done": "endGame",
    "iostap .multi-content-wrapper-image": "showZoom"
  };

  MultipleChoiceGameView.prototype.serialize = function() {
    var answer, answers, bottomAnswers, data, isLong, longest, otherAnswers, ref, ref1, ref2;
    data = MultipleChoiceGameView.__super__.serialize.apply(this, arguments);
    answers = ((ref = data.metadata.questions) != null ? (ref1 = ref[0]) != null ? ref1.answers : void 0 : void 0) || [];
    answers = answers.filter(function(m) {
      return m.content != null;
    });
    longest = _.max(answers, function(answer) {
      var ref2;
      return ((ref2 = answer.content) != null ? ref2.length : void 0) || 0;
    });
    isLong = ((ref2 = longest.content) != null ? ref2.length : void 0) > Math.min(data.width / 16, 30);
    answers = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = answers.length; i < len; i++) {
        answer = answers[i];
        results.push(_.extend({}, answer, {
          isLong: isLong,
          bottom: /the above/i.test(answer.content)
        }));
      }
      return results;
    })();
    if (data.randomize) {
      answers = _.shuffle(answers);
    }
    bottomAnswers = _.where(answers, {
      bottom: true
    });
    otherAnswers = _.without.apply(_, [answers].concat(slice.call(bottomAnswers)));
    data.answers = otherAnswers.concat(bottomAnswers);
    return data;
  };

  MultipleChoiceGameView.prototype.render = function() {
    MultipleChoiceGameView.__super__.render.apply(this, arguments);
    this.setEl(this.findOne(".inner-content"), "innerContent");
    this.setEl(this.findAll(".selectable"), "answers");
    this.setEl([], "selected");
    this.onTimerChange(this.game.timer);
    return window.setTimeout(((function(_this) {
      return function() {
        return _this.getEl("innerContent").style.overflowY = "auto";
      };
    })(this)), 1500);
  };

  MultipleChoiceGameView.prototype.refresh = function() {
    MultipleChoiceGameView.__super__.refresh.apply(this, arguments);
    return this.showFocusImage();
  };

  MultipleChoiceGameView.prototype.show = function() {
    var el, i, len, ref;
    MultipleChoiceGameView.__super__.show.apply(this, arguments);
    this.setState("prompt");
    ref = this.getEl("answers") || [];
    for (i = 0, len = ref.length; i < len; i++) {
      el = ref[i];
      el.classList.remove("active");
    }
    this.enterGame();
    return this.showFocusImage();
  };

  MultipleChoiceGameView.prototype.showFocusImage = function() {
    var canFocusImage;
    canFocusImage = false;
    if (this.options.data.titleType === "image" || this.options.data.additionalContentType === "image") {
      return window.setTimeout((function(_this) {
        return function() {
          var i, img, imgRect, len, ref;
          ref = _this.findAll(".multi-content-image");
          for (i = 0, len = ref.length; i < len; i++) {
            img = ref[i];
            imgRect = img.getBoundingClientRect();
            canFocusImage = imgRect.height < (img.naturalHeight || img.height) || imgRect.width < (img.naturalWidth || img.width);
          }
          return _this.setState(canFocusImage, "image-focus");
        };
      })(this), 100);
    }
  };

  MultipleChoiceGameView.prototype.showZoom = function(e) {
    var img, rect;
    img = e.currentTarget.querySelector(".multi-content-image");
    rect = img.getBoundingClientRect();
    if (rect.height < (img.naturalHeight || img.height) || rect.width < (img.naturalWidth || img.width)) {
      this.photoswipe = new PhotoSwipe(document.querySelector("#photoswipe"), PhotoSwipeUI_Default, [
        {
          msrc: img.src,
          src: img.src,
          title: written.wrapInTag(this.options.data.subtitle || "", "h2"),
          w: (img.naturalWidth || img.width) / Math.min(dpi, 1.66),
          h: (img.naturalHeight || img.height) / Math.min(dpi, 1.66)
        }
      ], {
        focus: false,
        history: false,
        barsSize: {
          top: 0,
          bottom: 0
        },
        getThumbBoundsFn: function() {
          return {
            x: rect.left,
            y: rect.top,
            w: rect.width
          };
        }
      });
      this.photoswipe.listen("close", (function(_this) {
        return function() {
          return _this.setState(false, "focus");
        };
      })(this));
      return this.photoswipe.init();
    }
  };

  MultipleChoiceGameView.prototype.endGame = function() {
    MultipleChoiceGameView.__super__.endGame.apply(this, arguments);
    return this.submit();
  };

  MultipleChoiceGameView.prototype.selectAnswer = function(e) {
    var el, ref, selected;
    if (this.currentState.state === "complete") {
      return;
    }
    selected = this.getEl("selected");
    el = e.currentTarget;
    if (this.options.data.selectable === 1 && el.classList.contains("active")) {
      return;
    }
    el.classList.toggle("active");
    if (el.classList.contains("active")) {
      if (selected.length >= this.options.data.selectable) {
        if ((ref = selected.shift()) != null) {
          ref.classList.remove("active");
        }
      }
      selected.push(el);
    } else {
      selected = _.without(selected, el);
    }
    this.setEl(selected, "selected");
    return this.setState("touched");
  };

  MultipleChoiceGameView.prototype.noDifference = function(arr1, arr2) {
    return _.chain(arr1).difference(arr2).isEmpty().value();
  };

  MultipleChoiceGameView.prototype.answerDetails = function() {
    var answers, details, question, questions, selectedAnswerIds;
    questions = this.options.strippedMetadata.questions || [];
    if (!(questions.length > 0)) {
      return [];
    }
    question = questions[0];
    selectedAnswerIds = this.getEl("selected").map(function(e) {
      return this.$(e).data("answer-id");
    });
    answers = question.answers.filter(function(arg) {
      var id;
      id = arg.id;
      return indexOf.call(selectedAnswerIds, id) >= 0;
    });
    details = answers.map(function(a) {
      return {
        question: question.question,
        answer: a
      };
    });
    return details;
  };

  MultipleChoiceGameView.prototype.isCorrect = function() {
    var correct, selected;
    selected = this.getEl("selected");
    correct = _.chain(this.getEl("answers")).filter(function(el) {
      return el.classList.contains("correct");
    }).value();
    return this.noDifference(correct, selected) && this.noDifference(selected, correct);
  };

  return MultipleChoiceGameView;

})(GameView);

module.exports = MultipleChoiceGameView;
});

;require.register("engine/multiple-choice-survey/model.yaml", function(exports, require, module) {
module.exports = {"title":"multiple-choice-survey","display":"Multiple Choice","category":"Survey","description":"Ask a multiple choice question","features":{"social":true},"model":{"question":{"id":{"type":"uuid","hidden":true},"content":{"default":"","types":["text","image","video","audio","iframe"]}},"selectable":{"display":"Number of selectable answers","default":1,"type":"number"},"randomize":{"default":true,"type":"boolean","help":"Randomize the order of the answers to reduce response bias from your learners.\n"},"answers":{"min":2,"max":8,"type":[{"id":{"type":"uuid","hidden":true},"content":{"type":"html"}}]},"additionalContent":{"display":"Additional Content","default":"","types":["text","image","video","audio","iframe"],"help":"This content displays beneath the multiple choice answers"},"prompt":{"type":"html","default":"Select the best response"},"doneText":{"type":"html","default":"Continue","display":"Done text"}},"examples":[{"subtype":"yes-no","question":{"id":"#GENUUID#","content":"Have you learned something new with this lesson?","contentType":"text"},"selectable":1,"answers":[{"id":"#GENUUID#","content":"Yes"},{"id":"#GENUUID#","content":"No"}],"additionalContent":"","additionalContentType":"text"}]}
});

;require.register("engine/multiple-choice-survey/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (additionalContent, answers, config, continueBtnText, doneText, hasNarration, hasPrompt, i18n, playinline, prompt, submitUp, undefined) {
jade_mixins["video-stream"] = jade_interp = function(videoUrl, playsinline, controls, klass, poster){
var block = (this && this.block), attributes = (this && this.attributes) || {};
playinline = playinline || true
controls = controls || true
klass = klass || 'video vjs-fluid'
var cloudinaryVideoFolderUrl = config.CLOUDINARY_CDN_URL+config.CLOUDINARY_VIDEO_FOLDER
var streamUrl = ''
if ( videoUrl && videoUrl.indexOf(cloudinaryVideoFolderUrl) > -1)
{
streamUrl = videoUrl.replace(cloudinaryVideoFolderUrl, cloudinaryVideoFolderUrl+'sp_full_hd/')
streamUrl = streamUrl.replace('.mp4', '.m3u8')
}
buf.push("<video" + (jade.attr("webkit-playsinline", playsinline, true, false)) + (jade.attr("controls", controls, true, false)) + " preload=\"auto\"" + (jade.attr("dir", config.direction, true, false)) + (jade.attr("poster", poster, true, false)) + (jade.cls(['video-js',klass], [null,true])) + "><source" + (jade.attr("src", videoUrl, true, false)) + "/>");
if ( streamUrl)
{
buf.push("<source" + (jade.attr("src", streamUrl, true, false)) + "/>");
}
buf.push("</video>");
};
jade_mixins["image"] = jade_interp = function(imageUrl, klass){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<img" + (jade.attr("src", imageUrl, true, false)) + (jade.cls([klass], [true])) + "/>");
};
jade_mixins["multi-content"] = jade_interp = function(prop, obj){
var block = (this && this.block), attributes = (this && this.attributes) || {};
obj = obj || locals;
switch (obj[prop + "Type"]){
case "image":
buf.push("<div" + (jade.attr("data-content", obj.image, true, false)) + " class=\"multi-content-wrapper multi-content-wrapper-image block-md block-lt\"><div class=\"block-sm multi-content-media\">");
jade_mixins["image"](obj[prop], 'multi-content multi-content-image');
buf.push("</div></div>");
  break;
case "video":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-video block-md block-lt\"><div class=\"block-sm multi-content-media\">");
jade_mixins["video-stream"](obj[prop], true, true,"multi-content multi-content-video block-dk");
buf.push("</div></div>");
  break;
case "audio":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-audio block-md block-lt\"><div class=\"block-sm multi-content-media\"><audio" + (jade.attr("src", obj[prop], true, false)) + " playsinline=\"playsinline\" preload=\"auto\" controls=\"controls\"" + (jade.attr("dir", config.direction, true, false)) + " class=\"multi-content multi-content-audio block-dk\"></audio></div></div>");
  break;
case "iframe":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-iframe block-md block-lt\"><div class=\"block-sm multi-content-iframe\">");
var iframe = obj[prop].match(/<iframe[^<]*<\/iframe>/)
if ( iframe)
{
buf.push(null == (jade_interp = iframe[0].replace(/ (width|height)=["'\d\w]+/g, "")) ? "" : jade_interp);
}
buf.push("</div></div>");
  break;
default:
buf.push("<span class=\"multi-content multi-content-text\">" + (null == (jade_interp = obj[prop]) ? "" : jade_interp) + "</span>");
  break;
}
};
buf.push("<div class=\"block-v-lg content-fill content-fit\"><div class=\"row content-lg-fill content-sm-ver content-md-ver\"><div class=\"col-lg-6 col-sm-12 content-lg-ver block-v-md\"><h1 class=\"slide-title text-lg-right text-md-center text-sm-center fade-in\">");
jade_mixins["multi-content"]("title");
buf.push("</h1></div><div class=\"col col-lg-6 col-sm-12 block-v-md\"><div class=\"answers block-md block-dk fade-in\"><div class=\"block-h-sm\">");
// iterate answers
;(function(){
  var $$obj = answers;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var answer = $$obj[i];

buf.push("<div" + (jade.attr("data-answer-id", answer.id, true, false)) + " class=\"selectable block-v-sm fade-in\"><div" + (jade.cls(['btn','btn-solid','btn-block','slide-up',(answer.isLong ? "btn-long" : "") + " delay-" + (i) + ""], [null,null,null,null,true])) + ">" + (null == (jade_interp = answer.content) ? "" : jade_interp) + "</div></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var answer = $$obj[i];

buf.push("<div" + (jade.attr("data-answer-id", answer.id, true, false)) + " class=\"selectable block-v-sm fade-in\"><div" + (jade.cls(['btn','btn-solid','btn-block','slide-up',(answer.isLong ? "btn-long" : "") + " delay-" + (i) + ""], [null,null,null,null,true])) + ">" + (null == (jade_interp = answer.content) ? "" : jade_interp) + "</div></div>");
    }

  }
}).call(this);

buf.push("</div></div>");
if ( !!additionalContent)
{
buf.push("<div class=\"block-v-md slide-title text-xxl text-md-center text-sm-center fade-in\">");
jade_mixins["multi-content"]("additionalContent");
buf.push("</div>");
}
buf.push("</div></div></div><div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"additionalContent" in locals_for_with?locals_for_with.additionalContent:typeof additionalContent!=="undefined"?additionalContent:undefined,"answers" in locals_for_with?locals_for_with.answers:typeof answers!=="undefined"?answers:undefined,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"playinline" in locals_for_with?locals_for_with.playinline:typeof playinline!=="undefined"?playinline:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/multiple-choice-survey/view.coffee", function(exports, require, module) {
var InputView, MultipleChoiceSurveyView, dpi,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  slice = [].slice;

InputView = require("views/input");

dpi = require("lib/device").dpi;

MultipleChoiceSurveyView = (function(superClass) {
  extend(MultipleChoiceSurveyView, superClass);

  function MultipleChoiceSurveyView() {
    return MultipleChoiceSurveyView.__super__.constructor.apply(this, arguments);
  }

  MultipleChoiceSurveyView.prototype.template = require("./template");

  MultipleChoiceSurveyView.prototype.events = {
    "iostap .selectable": "selectAnswer",
    "iostap .btn-done": "nextSlide",
    "iostap .multi-content-wrapper-image": "showZoom"
  };

  MultipleChoiceSurveyView.prototype.serialize = function() {
    var answer, answers, bottomAnswers, data, isLong, longest, otherAnswers, ref;
    data = MultipleChoiceSurveyView.__super__.serialize.apply(this, arguments);
    data.title = data.question.content;
    data.titleType = data.question.contentType;
    data.hasPrompt = true;
    answers = _.filter(data.answers, "content");
    longest = _.max(answers, function(answer) {
      var ref;
      return ((ref = answer.content) != null ? ref.length : void 0) || 0;
    });
    isLong = ((ref = longest.content) != null ? ref.length : void 0) > Math.min(data.width / 16, 30);
    answers = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = answers.length; i < len; i++) {
        answer = answers[i];
        results.push(_.extend({}, answer, {
          isLong: isLong,
          bottom: /the above/i.test(answer.content)
        }));
      }
      return results;
    })();
    if (data.randomize) {
      answers = _.shuffle(answers);
    }
    bottomAnswers = _.where(answers, {
      bottom: true
    });
    otherAnswers = _.without.apply(_, [answers].concat(slice.call(bottomAnswers)));
    data.answers = otherAnswers.concat(bottomAnswers);
    return data;
  };

  MultipleChoiceSurveyView.prototype.render = function() {
    MultipleChoiceSurveyView.__super__.render.apply(this, arguments);
    this.setEl(this.findAll(".selectable"), "answers");
    return this.setEl([], "selected");
  };

  MultipleChoiceSurveyView.prototype.refresh = function() {
    MultipleChoiceSurveyView.__super__.refresh.apply(this, arguments);
    return this.showFocusImage();
  };

  MultipleChoiceSurveyView.prototype.show = function() {
    var el, i, len, ref;
    ref = this.getEl("answers") || [];
    for (i = 0, len = ref.length; i < len; i++) {
      el = ref[i];
      el.classList.remove("active");
    }
    return this.showFocusImage();
  };

  MultipleChoiceSurveyView.prototype.showFocusImage = function() {
    var canFocusImage;
    canFocusImage = false;
    return window.setTimeout((function(_this) {
      return function() {
        var i, img, imgRect, len, ref;
        ref = _this.findAll(".multi-content-image");
        for (i = 0, len = ref.length; i < len; i++) {
          img = ref[i];
          imgRect = img.getBoundingClientRect();
          canFocusImage = canFocusImage || imgRect.height < (img.naturalHeight || img.height) || imgRect.width < (img.naturalWidth || img.width);
        }
        return _this.setState(canFocusImage, "image-focus");
      };
    })(this), 100);
  };

  MultipleChoiceSurveyView.prototype.showZoom = function(e) {
    var img, rect;
    img = e.currentTarget.querySelector(".multi-content-image");
    rect = img.getBoundingClientRect();
    if (rect.height < (img.naturalHeight || img.height) || rect.width < (img.naturalWidth || img.width)) {
      this.photoswipe = new PhotoSwipe(document.querySelector("#photoswipe"), PhotoSwipeUI_Default, [
        {
          msrc: img.src,
          src: img.src,
          title: written.wrapInTag(this.options.data.subtitle || "", "h2"),
          w: (img.naturalWidth || img.width) / Math.min(dpi, 1.66),
          h: (img.naturalHeight || img.height) / Math.min(dpi, 1.66)
        }
      ], {
        focus: false,
        history: false,
        barsSize: {
          top: 0,
          bottom: 0
        },
        getThumbBoundsFn: function() {
          return {
            x: rect.left,
            y: rect.top,
            w: rect.width
          };
        }
      });
      this.photoswipe.listen("close", (function(_this) {
        return function() {
          return _this.setState(false, "focus");
        };
      })(this));
      return this.photoswipe.init();
    }
  };

  MultipleChoiceSurveyView.prototype.userInput = function(e) {
    var answer, question, selected;
    selected = $(this.getEl("selected"));
    question = {
      id: this.options.data.question.id,
      text: this.options.data.question.content
    };
    answer = {
      text: _.map(selected, function(el) {
        return $(el).text();
      }).join('|')
    };
    if (this.options.data.selectable === 1) {
      answer.id = selected.data('answer-id');
    }
    return {
      question: question,
      answer: answer
    };
  };

  MultipleChoiceSurveyView.prototype.selectAnswer = function(e) {
    var el, ref, selected;
    if (this.currentState.state === "complete") {
      return;
    }
    selected = this.getEl("selected");
    el = e.currentTarget;
    if (this.options.data.selectable === 1 && el.classList.contains("active")) {
      return;
    }
    el.classList.toggle("active");
    if (el.classList.contains("active")) {
      if (selected.length >= this.options.data.selectable) {
        if ((ref = selected.shift()) != null) {
          ref.classList.remove("active");
        }
      }
      selected.push(el);
    } else {
      selected = _.without(selected, el);
    }
    this.setEl(selected, "selected");
    if (selected.length === 0) {
      return this.setState("prompt");
    } else {
      return this.setState("touched");
    }
  };

  return MultipleChoiceSurveyView;

})(InputView);

module.exports = MultipleChoiceSurveyView;
});

;require.register("engine/number-picker/model.yaml", function(exports, require, module) {
module.exports = {"title":"number-picker","display":"Number Picker","category":"Numbers","features":{"stars":true,"social":true},"model":{"title":{"type":"html","default":"Input number 5 in this sentence","help":"Include the number or hashes (#) where the number will occur. The latter takes precendence.\n"},"number":{"digits":{"type":"int","default":2,"min":1,"max":4},"min":{"type":"int","default":0,"display":"Min. Value"},"max":{"type":"int","default":99,"display":"Max. Value"},"prefix":{"type":"html","default":""},"suffix":{"type":"html","default":""},"initial":{"display":"Starting Value","type":"int","default":0}},"answer":{"text":{"type":"html","default":"","display":"Answer Text"},"value":{"type":"number","default":5,"display":"Correct Value"},"correct":{"type":"html","default":"That's correct!","display":"Correct Reinforcement"},"incorrect":{"type":"html","default":"Not quite...","display":"Incorrect Reinforcement"},"takeaway":{"type":"html","default":"","display":"Core Message"}},"game":{"timer":{"limit":{"type":"number","default":-1,"display":"Time Limit (seconds)"},"out-of-time-prompt":{"type":"html","display":"Out of time prompt"}}},"prompt":{"type":"html","default":"Select the correct number"},"doneText":{"type":"html","default":"Continue","display":"Done text"}},"examples":[{"subtype":"integer","title":"Of the 3 top-selling brands, our portfolio has ##.","number":{"digits":2,"max":10,"min":0,"initial":0},"answer":{"value":3,"takeaway":"Our portfolio has 3 of the 3 top-selling brands"}},{"subtype":"money","title":"At a cost of $99, our product is the cheapest","number":{"digits":3,"max":147,"min":12,"initial":99,"prefix":"$","suffix":","},"answer":{"value":99,"takeaway":"The product costs $99.00"}}]}
});

;require.register("engine/number-picker/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (Array, after, before, continueBtnText, doneText, game, hasNarration, hasPrompt, i18n, isLong, number, prompt, submitUp, undefined) {
if ( game && game.timer && game.timer.limit > 0 && !game.timer.isDisabled)
{
buf.push("<div class=\"full-screen\"><div class=\"game-stepper text-lg text-bold\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div></div>");
}
buf.push("<div class=\"content-fill invisible\"><div class=\"content-fit block-v-xl content text-center\">");
if ( before)
{
buf.push("<div class=\"block-v-md\"><h1 class=\"number-picker-title slide-down\">" + (null == (jade_interp = before) ? "" : jade_interp) + "</h1></div>");
}
buf.push("<div" + (jade.cls(['number-pickers','scale-up','block-v-md',isLong ? "pickers-sm" : ""], [null,null,null,true])) + ">");
if ( number.prefix)
{
buf.push("<div class=\"number-picker-prefix text-right text-xxl\">" + (null == (jade_interp = number.prefix) ? "" : jade_interp) + "</div>");
}
// iterate (new Array(number.digits))
;(function(){
  var $$obj = (new Array(number.digits));
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var el = $$obj[i];

buf.push("<div class=\"number-picker block-dk\"><div class=\"btn btn-solid btn-block text-sm number-picker-arr-up\"><span class=\"icon icon-chevron-up text-lg\"></span></div><div class=\"number-picker-nums\"><div class=\"number-picker-nums-scroller\">");
// iterate new Array(11)
;(function(){
  var $$obj = new Array(11);
  if ('number' == typeof $$obj.length) {

    for (var j = 0, $$l = $$obj.length; j < $$l; j++) {
      var el = $$obj[j];

buf.push("<div class=\"number-picker-num block-h-md\"><div class=\"text-fixed\">" + (jade.escape(null == (jade_interp = j % 10) ? "" : jade_interp)) + "</div></div>");
    }

  } else {
    var $$l = 0;
    for (var j in $$obj) {
      $$l++;      var el = $$obj[j];

buf.push("<div class=\"number-picker-num block-h-md\"><div class=\"text-fixed\">" + (jade.escape(null == (jade_interp = j % 10) ? "" : jade_interp)) + "</div></div>");
    }

  }
}).call(this);

buf.push("</div></div><div class=\"btn btn-solid btn-block text-sm number-picker-arr-down\"><span class=\"icon icon-chevron-down text-lg\"></span></div></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var el = $$obj[i];

buf.push("<div class=\"number-picker block-dk\"><div class=\"btn btn-solid btn-block text-sm number-picker-arr-up\"><span class=\"icon icon-chevron-up text-lg\"></span></div><div class=\"number-picker-nums\"><div class=\"number-picker-nums-scroller\">");
// iterate new Array(11)
;(function(){
  var $$obj = new Array(11);
  if ('number' == typeof $$obj.length) {

    for (var j = 0, $$l = $$obj.length; j < $$l; j++) {
      var el = $$obj[j];

buf.push("<div class=\"number-picker-num block-h-md\"><div class=\"text-fixed\">" + (jade.escape(null == (jade_interp = j % 10) ? "" : jade_interp)) + "</div></div>");
    }

  } else {
    var $$l = 0;
    for (var j in $$obj) {
      $$l++;      var el = $$obj[j];

buf.push("<div class=\"number-picker-num block-h-md\"><div class=\"text-fixed\">" + (jade.escape(null == (jade_interp = j % 10) ? "" : jade_interp)) + "</div></div>");
    }

  }
}).call(this);

buf.push("</div></div><div class=\"btn btn-solid btn-block text-sm number-picker-arr-down\"><span class=\"icon icon-chevron-down text-lg\"></span></div></div>");
    }

  }
}).call(this);

if ( number.suffix)
{
buf.push("<div class=\"number-picker-suffix text-left text-xxl\">" + (null == (jade_interp = number.suffix) ? "" : jade_interp) + "</div>");
}
buf.push("</div>");
if ( after)
{
buf.push("<div class=\"block-v-md\"><h1 class=\"number-picker-title slide-up\">" + (null == (jade_interp = after) ? "" : jade_interp) + "</h1></div>");
}
buf.push("</div></div><div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"Array" in locals_for_with?locals_for_with.Array:typeof Array!=="undefined"?Array:undefined,"after" in locals_for_with?locals_for_with.after:typeof after!=="undefined"?after:undefined,"before" in locals_for_with?locals_for_with.before:typeof before!=="undefined"?before:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"game" in locals_for_with?locals_for_with.game:typeof game!=="undefined"?game:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"isLong" in locals_for_with?locals_for_with.isLong:typeof isLong!=="undefined"?isLong:undefined,"number" in locals_for_with?locals_for_with.number:typeof number!=="undefined"?number:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/number-picker/view.coffee", function(exports, require, module) {
var GameView, NumberPickerView, Picker,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

GameView = require("views/base/game");

Picker = require("views/components/picker");

NumberPickerView = (function(superClass) {
  extend(NumberPickerView, superClass);

  function NumberPickerView() {
    this.onResize = bind(this.onResize, this);
    return NumberPickerView.__super__.constructor.apply(this, arguments);
  }

  NumberPickerView.prototype.template = require("./template");

  NumberPickerView.prototype.events = {
    "iostap .btn-done": "endGame"
  };

  NumberPickerView.prototype.serialize = function() {
    var answer, bits, data, num, number, prefix, splitter, suffix, title;
    data = NumberPickerView.__super__.serialize.apply(this, arguments);
    title = data.title, number = data.number, answer = data.answer;
    prefix = number.prefix, suffix = number.suffix;
    if (/\W#+\W/.test(title)) {
      bits = title.split(/\W+#+\W+/);
    } else {
      num = "" + prefix + answer.value + suffix;
      num = num != null ? num.replace(/[\$\!]/g, function(w) {
        return "\\" + w;
      }) : void 0;
      splitter = new RegExp("\\s+" + num + "\\s+");
      bits = (title || "").split(splitter);
    }
    data.isLong = prefix.length + suffix.length > 5;
    data.before = bits[0];
    data.after = bits.slice(1).join("");
    return data;
  };

  NumberPickerView.prototype.show = function() {
    var debouncedOnResize, digits, el, i, initial, j, len, picker, ref, ref1;
    NumberPickerView.__super__.show.apply(this, arguments);
    this.isPickerClicked = false;
    this.timeout = 0;
    this.$el.find(".content-fill").addClass("invisible");
    this.setEl(this.findAll(".number-picker"), "pickers");
    ref = this.options.data.number, initial = ref.initial, digits = ref.digits;
    while (("" + initial).length < digits) {
      initial = " " + initial;
    }
    this.pickers = (function() {
      var j, len, ref1, results;
      ref1 = this.getEl("pickers");
      results = [];
      for (i = j = 0, len = ref1.length; j < len; i = ++j) {
        el = ref1[i];
        picker = new Picker({
          el: el,
          value: +("" + initial).charAt(i)
        });
        this.listenTo(picker, "change", this.onChange);
        results.push(picker);
      }
      return results;
    }).call(this);
    ref1 = this.pickers;
    for (j = 0, len = ref1.length; j < len; j++) {
      picker = ref1[j];
      this.onChange(picker, null, true);
    }
    this.enterGame();
    debouncedOnResize = _.debounce(((function(_this) {
      return function() {
        return _this.onResize();
      };
    })(this)), 100);
    $(window).on("resize.numberPickerView", debouncedOnResize);
    return this.onResize();
  };

  NumberPickerView.prototype.onChange = function(picker, diff, isFirstRun) {
    var cascade, isDecreasing, isIncreasing, reset;
    isIncreasing = diff > 0;
    isDecreasing = diff < 0;
    if (!this.isPickerClicked) {
      this.isPickerClicked = isIncreasing || isDecreasing;
    }
    this.getTotal();
    if (this.isPickerClicked) {
      this.setState("touched");
    }
    if (isFirstRun) {
      this.transform(picker.scroller, {
        y: picker.offset.height * -picker.value,
        transition: "all 300ms"
      });
    } else if ((picker.value === 0) && isIncreasing) {
      this.transform(picker.scroller, {
        y: picker.offset.height * -10,
        transition: "all 300ms"
      });
      cascade = 1;
    } else {
      if ((picker.value === 1) && isIncreasing) {
        reset = 0;
      }
      if ((picker.value === 9) && isDecreasing) {
        reset = picker.offset.height * -10;
        cascade = -1;
      }
      if (reset != null) {
        this.transform(picker.scroller, {
          y: reset,
          transition: "none"
        });
        picker.scroller.offsetWidth;
      }
      this.transform(picker.scroller, {
        y: picker.offset.height * -picker.value,
        transition: "all 300ms"
      });
    }
    if (cascade != null) {
      return this.cascadeFrom(picker, cascade);
    }
  };

  NumberPickerView.prototype.onResize = function() {
    if (this.$el.hasClass("visible")) {
      this.$el.removeClass("visible");
    }
    if (this.resizeTimeout) {
      window.clearTimeout(this.resizeTimeout);
    }
    return this.resizeTimeout = window.setTimeout(((function(_this) {
      return function() {
        var j, len, picker, ref;
        _this.$el.find(".content-fill").removeClass("invisible");
        ref = _this.pickers;
        for (j = 0, len = ref.length; j < len; j++) {
          picker = ref[j];
          picker.getOffset();
          picker.setBy(0);
        }
        _this.$el.addClass("visible");
        return _this.timeout = 300;
      };
    })(this)), this.timeout);
  };

  NumberPickerView.prototype.getTotal = function() {
    var diff, i, j, len, picker, ref, results;
    this.currentValue = +((function() {
      var j, len, ref, results;
      ref = this.pickers;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        picker = ref[j];
        results.push(picker.value);
      }
      return results;
    }).call(this)).join("");
    ref = this.pickers;
    results = [];
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      picker = ref[i];
      diff = Math.pow(10, this.pickers.length - i - 1);
      picker.toggleUp(this.currentValue + diff > this.options.data.number.max);
      results.push(picker.toggleDown(this.currentValue - diff < this.options.data.number.min));
    }
    return results;
  };

  NumberPickerView.prototype.cascadeFrom = function(picker, diff) {
    var index, ref;
    index = this.pickers.indexOf(picker);
    return (ref = this.pickers[index - 1]) != null ? ref.setBy(diff) : void 0;
  };

  NumberPickerView.prototype.isCorrect = function() {
    return this.currentValue === this.options.data.answer.value;
  };

  NumberPickerView.prototype.endGame = function() {
    NumberPickerView.__super__.endGame.apply(this, arguments);
    return this.submit();
  };

  NumberPickerView.prototype.answerDetails = function() {
    var answer, cleanedContent, correct, details, question, questions, ref, value;
    questions = ((ref = this.options.metadata) != null ? ref.questions : void 0) || [];
    if (!(questions.length > 0)) {
      return [];
    }
    question = questions[0];
    correct = this.isCorrect();
    value = parseInt(this.currentValue);
    cleanedContent = question.question.content.replace(/##/, '__').replace(/<br>/, ' ');
    question.question.content = cleanedContent;
    answer = _.find(question.answers, function(a) {
      return a.correct === correct;
    });
    details = {
      question: question.question,
      answer: answer
    };
    details.answer.content = value;
    return [details];
  };

  NumberPickerView.prototype.hide = function() {
    NumberPickerView.__super__.hide.apply(this, arguments);
    return $(window).off("resize.numberPickerView");
  };

  return NumberPickerView;

})(GameView);

module.exports = NumberPickerView;
});

;require.register("engine/number-sentence/components/digits.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (digits, undefined) {
// iterate digits
;(function(){
  var $$obj = digits;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var digit = $$obj[$index];

buf.push("<span" + (jade.attr("style", ([
      "opacity: " + (_.isNumber(digit.opacity) ? digit.opacity : 1) + "",
      "transform: translate3d(" + (digit.x || 0) + "px, " + (digit.y || 0) + "px, 0)"
    ]).join(";"), true, false)) + " class=\"digit\">" + (jade.escape(null == (jade_interp = digit.text) ? "" : jade_interp)) + "</span>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var digit = $$obj[$index];

buf.push("<span" + (jade.attr("style", ([
      "opacity: " + (_.isNumber(digit.opacity) ? digit.opacity : 1) + "",
      "transform: translate3d(" + (digit.x || 0) + "px, " + (digit.y || 0) + "px, 0)"
    ]).join(";"), true, false)) + " class=\"digit\">" + (jade.escape(null == (jade_interp = digit.text) ? "" : jade_interp)) + "</span>");
    }

  }
}).call(this);
}.call(this,"digits" in locals_for_with?locals_for_with.digits:typeof digits!=="undefined"?digits:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/number-sentence/components/wrapper.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (zero) {
buf.push("<span class=\"number-wrap\"><span class=\"number\">" + (jade.escape(null == (jade_interp = zero) ? "" : jade_interp)) + "</span>&nbsp;</span>");}.call(this,"zero" in locals_for_with?locals_for_with.zero:typeof zero!=="undefined"?zero:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/number-sentence/model.yaml", function(exports, require, module) {
module.exports = {"title":"number-sentence","display":"Number Sentence","category":"Numbers","features":{"stars":true,"social":true},"model":{"title":{"type":"html","default":"Input number 5 in this sentence","help":"Include hashes (#) where the number will occur.\n"},"numbers":{"min":2,"max":8,"type":[{"number":{"type":"number","default":0},"correct":{"type":"boolean","default":false}}]},"decimals":{"type":"int","min":0,"max":8,"default":0},"answer":{"text":{"type":"html","default":"","display":"Answer Text"},"correct":{"type":"html","default":"That's correct!","display":"Correct Reinforcement"},"incorrect":{"type":"html","default":"Not quite...","display":"Incorrect Reinforcement"},"takeaway":{"type":"html","default":"","display":"Core Message"}},"game":{"timer":{"limit":{"type":"number","default":-1,"display":"Time Limit (seconds)"},"out-of-time-prompt":{"type":"html","display":"Out of time prompt"}}},"prompt":{"type":"html","default":"Select the correct number"},"doneText":{"type":"html","default":"Continue","display":"Done text"}},"examples":[{"subtype":"integer","title":"We have sold<br>over ## units<br>around the world.\n","numbers":[{"number":100},{"number":1000},{"number":10000},{"number":100000},{"number":1000000,"correct":true}]},{"subtype":"fraction","title":"Our product has ##% market share.","decimals":1,"numbers":[{"number":20.6},{"number":16.2},{"number":12.6},{"number":32.8},{"number":26.6,"correct":true}]}]}
});

;require.register("engine/number-sentence/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (continueBtnText, doneText, game, hasNarration, hasPrompt, i18n, prompt, sentence, submitUp) {
if ( game && game.timer && game.timer.limit > 0 && !game.timer.isDisabled)
{
buf.push("<div class=\"full-screen\"><div class=\"game-stepper text-lg text-bold\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div></div>");
}
buf.push("<div class=\"content-fill\"><div class=\"content-ver text-center content-fit\"><div class=\"arrow btn-up block-md\"><div class=\"btn btn-muted btn-circular slide-down delay-2\"><span class=\"icon icon-chevron-up text-lg\"></span></div></div><div class=\"block-v-xl fade-in\"><div class=\"block-v-xl\"><div class=\"text-xxl slide-up\">" + (null == (jade_interp = sentence) ? "" : jade_interp) + "</div></div></div><div class=\"arrow btn-down block-md\"><div class=\"btn btn-muted btn-circular slide-up delay-2\"><span class=\"icon icon-chevron-down text-lg\"></span></div></div></div></div><div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"game" in locals_for_with?locals_for_with.game:typeof game!=="undefined"?game:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"sentence" in locals_for_with?locals_for_with.sentence:typeof sentence!=="undefined"?sentence:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/number-sentence/view.coffee", function(exports, require, module) {
var Easie, GameView, NumberPickerView, animate,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

GameView = require("views/base/game");

animate = require("lib/animate");

Easie = require("lib/easie");

NumberPickerView = (function(superClass) {
  extend(NumberPickerView, superClass);

  function NumberPickerView() {
    return NumberPickerView.__super__.constructor.apply(this, arguments);
  }

  NumberPickerView.prototype.templates = {
    "default": require("./template"),
    wrapper: require("./components/wrapper"),
    digits: require("./components/digits")
  };

  NumberPickerView.prototype.events = {
    "iostap   .btn-up": "increase",
    "iostap .btn-down": "decrease",
    "iostap .btn-done": "endGame"
  };

  NumberPickerView.prototype.serialize = function() {
    var answer, answers, data, decimals, i, j, len, numbers, question, ref, zero;
    data = NumberPickerView.__super__.serialize.apply(this, arguments);
    ref = data.metadata.questions[0], question = ref.question, answers = ref.answers;
    decimals = data.decimals, numbers = data.numbers;
    data.correct = _.find(numbers, 'correct');
    for (i = j = 0, len = answers.length; j < len; i = ++j) {
      answer = answers[i];
      if (answer.content === '') {
        answers[i].content = 0;
      }
    }
    data.answers = _.sortBy(answers, function(arg) {
      var content;
      content = arg.content;
      return parseFloat(content) || 0;
    });
    zero = 0..toFixed(decimals || 0);
    data.sentence = question.content.replace(/#+/, this.templates.wrapper({
      zero: zero
    }));
    return data;
  };

  NumberPickerView.prototype.onRefresh = function() {
    this.beforeShow();
    return NumberPickerView.__super__.onRefresh.apply(this, arguments);
  };

  NumberPickerView.prototype.beforeShow = function() {
    this.setEl(this.findOne(".btn-up"), "up");
    this.setEl(this.findOne(".btn-down"), "down");
    this.setEl(this.findOne(".number"), "number");
    this.currentIndex = _.random(this.options.metadata.questions[0].answers.length - 1);
    this.animateChange(0);
    return this.trigger("ui", {
      flexibleHeight: true
    });
  };

  NumberPickerView.prototype.beforeHide = function() {
    return this.trigger("ui", {
      flexibleHeight: false
    });
  };

  NumberPickerView.prototype.show = function() {
    NumberPickerView.__super__.show.apply(this, arguments);
    return this.enterGame();
  };

  NumberPickerView.prototype.increase = function() {
    var prev, values;
    values = this.serialize().answers;
    prev = values[this.currentIndex].content;
    this.currentIndex = Math.min(values.length - 1, this.currentIndex + 1);
    this.animateChange(prev);
    return this.setState("touched");
  };

  NumberPickerView.prototype.decrease = function() {
    var prev, values;
    values = this.serialize().answers;
    prev = values[this.currentIndex].content;
    this.currentIndex = Math.max(0, this.currentIndex - 1);
    this.animateChange(prev, null, -1);
    return this.setState("touched");
  };

  NumberPickerView.prototype.animateChange = function(prev, next, dir) {
    var answers, d1, d2, decimals, draw, dur, el, limit, nStr, nb, pStr, ref, ref1, ref2, shouldInterpolateDecimalPlaces, w1, w2, xDist, yDist;
    if (dir == null) {
      dir = 1;
    }
    ref = this.serialize(), answers = ref.answers, decimals = ref.decimals;
    el = this.getEl("number");
    limit = answers.length - 1;
    if (next == null) {
      next = answers[this.currentIndex].content;
    }
    if (decimals === 0) {
      next = Math.round(next);
      prev = Math.round(prev);
    }
    w1 = el.offsetWidth;
    nb = el.innerHTML;
    el.innerHTML = written.prettyNumber(next, ",", decimals);
    w2 = el.offsetWidth;
    el.innerHTML = nb;
    this.getEl("down").classList.toggle("disabled", this.currentIndex === 0);
    this.getEl("up").classList.toggle("disabled", this.currentIndex === limit);
    if (decimals == null) {
      shouldInterpolateDecimalPlaces = true;
      d1 = prev.toString().replace(/\d+\.{0,1}/, "").length;
      d2 = next.toString().replace(/\d+\.{0,1}/, "").length;
    }
    pStr = written.prettyNumber(prev, ",", decimals);
    nStr = written.prettyNumber(next, ",", decimals);
    dur = 0.66;
    yDist = -4;
    xDist = 0;
    draw = (function(_this) {
      return function(d) {
        var clamp, diff, digits, eez, i, j, k, l, ln, m, n, num, ref1, ref2, ref3, ref4, start, str, yDiff;
        eez = Easie.quartInOut(d, 0, 1, 1);
        num = new window.Big(next).minus(prev).times(eez).plus(prev);
        if (decimals === 0) {
          num = num.round();
        }
        if (shouldInterpolateDecimalPlaces) {
          decimals = Math.round(d1 + (d2 - d1) * d);
          if (d === 1) {
            decimals = d2;
          }
        }
        str = written.prettyNumber(num, ",", decimals);
        str = str.slice(0, Math.max(nStr.length, pStr.length));
        digits = (function() {
          var j, len, results;
          results = [];
          for (i = j = 0, len = str.length; j < len; i = ++j) {
            k = str[i];
            ln = str.length;
            start = i / ln * (1 - dur);
            clamp = _.limit(d - start, dur);
            yDiff = Easie.quartIn(Math.sin(clamp / dur * Math.PI), 0, 1, 1);
            results.push({
              text: k,
              y: yDiff * yDist * dir
            });
          }
          return results;
        })();
        if (d < 1) {
          if (str.length < pStr.length) {
            diff = pStr.length - str.length - 1;
            for (i = j = ref1 = diff; ref1 <= 0 ? j <= 0 : j >= 0; i = ref1 <= 0 ? ++j : --j) {
              digits.unshift({
                text: pStr[i]
              });
            }
          } else if (str.length < nStr.length) {
            diff = nStr.length - str.length - 1;
            for (i = l = ref2 = diff; ref2 <= 0 ? l <= 0 : l >= 0; i = ref2 <= 0 ? ++l : --l) {
              digits.unshift({
                text: nStr[i]
              });
            }
          }
          if (nStr.length > pStr.length) {
            diff = nStr.length - pStr.length;
            for (i = m = 0, ref3 = diff; 0 <= ref3 ? m < ref3 : m > ref3; i = 0 <= ref3 ? ++m : --m) {
              digits[i].opacity = d;
              digits[i].x = (1 - eez) * xDist * (1 - i / diff);
            }
          }
          if (pStr.length > nStr.length) {
            diff = pStr.length - nStr.length;
            for (i = n = 0, ref4 = diff; 0 <= ref4 ? n < ref4 : n > ref4; i = 0 <= ref4 ? ++n : --n) {
              digits[i].opacity = 1 - d;
              digits[i].x = eez * xDist * (1 - i / diff);
            }
          }
        }
        return el.innerHTML = _this.templates.digits({
          digits: digits
        });
      };
    })(this);
    if ((ref1 = this.animation) != null) {
      ref1.cancel();
    }
    return this.animation = animate(draw, ((ref2 = this.currentState) != null ? ref2.refresh : void 0) ? 0 : 900);
  };

  NumberPickerView.prototype.isCorrect = function() {
    var answer, ref;
    answer = this.serialize().answers[this.currentIndex];
    return (answer != null ? answer.correct : void 0) || answer.content === ((ref = this.serialize().correct) != null ? ref.number : void 0);
  };

  NumberPickerView.prototype.endGame = function() {
    var next, numbers, prev, ref;
    NumberPickerView.__super__.endGame.apply(this, arguments);
    this.submit();
    if (!this.isCorrect()) {
      numbers = this.serialize().numbers;
      prev = numbers[this.currentIndex].number;
      next = (ref = _.find(numbers, {
        correct: true
      })) != null ? ref.number : void 0;
      return this.animateChange(prev, next);
    }
  };

  NumberPickerView.prototype.answerDetails = function() {
    var questions, ref;
    questions = ((ref = this.options.metadata) != null ? ref.questions : void 0) || [];
    if (!(questions.length > 0)) {
      return [];
    }
    return [
      {
        question: questions[0].question,
        answer: this.serialize().answers[this.currentIndex],
        correct: this.isCorrect()
      }
    ];
  };

  return NumberPickerView;

})(GameView);

module.exports = NumberPickerView;
});

;require.register("engine/parallax/model.yaml", function(exports, require, module) {
module.exports = {"title":"parallax","display":"Parallax Motion","category":"Content","features":{"narration":true,"social":true},"description":"Create the illusion of 3-dimensions","model":{"images":{"min":1,"max":10,"type":[{"type":"image"}],"help":"Separate each layer of your design onto it’s own image. Images overlay each other, with the first positioned at the back. Those nearer the back or front of the stack will move more than images in the middle.\n"},"caption":{"type":"html","default":""},"background":{"type":"string","default":"","display":"Background Color"}},"examples":[{"subtype":"multiple","caption":"## The EdApp experience is available on **mobile & desktop**\n","images":["img/examples/parallax-1.png","img/examples/parallax-2.png","img/examples/parallax-3.png"]}]}
});

;require.register("engine/parallax/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (background, caption, continueBtnText, doneText, hasNarration, hasPrompt, i18n, images, prompt, submitUp, undefined) {
jade_mixins["image"] = jade_interp = function(imageUrl, klass){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<img" + (jade.attr("src", imageUrl, true, false)) + (jade.cls([klass], [true])) + "/>");
};
buf.push("<div class=\"parallax-container content-fill text-center\"><div class=\"parallax-images fade-in delay-4 content-fill\">");
// iterate images
;(function(){
  var $$obj = images;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var src = $$obj[i];

jade_mixins["image"](src, "parallax-img content parallax-img-#{i}");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var src = $$obj[i];

jade_mixins["image"](src, "parallax-img content parallax-img-#{i}");
    }

  }
}).call(this);

if ( caption)
{
buf.push("<div" + (jade.attr("style", "background: " + (background) + "", true, false)) + (jade.cls(['caption','block-v-lg','text-center','slide-up',background ? "block-h-lg" : ""], [null,null,null,null,true])) + ">" + (null == (jade_interp = caption) ? "" : jade_interp) + "</div>");
}
buf.push("</div></div><div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"background" in locals_for_with?locals_for_with.background:typeof background!=="undefined"?background:undefined,"caption" in locals_for_with?locals_for_with.caption:typeof caption!=="undefined"?caption:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"images" in locals_for_with?locals_for_with.images:typeof images!=="undefined"?images:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/parallax/view.coffee", function(exports, require, module) {
var ParallaxView, Preloader, SlideView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SlideView = require("views/slide");

Preloader = require("lib/preload");

ParallaxView = (function(superClass) {
  extend(ParallaxView, superClass);

  function ParallaxView() {
    return ParallaxView.__super__.constructor.apply(this, arguments);
  }

  ParallaxView.prototype.template = require("./template");

  ParallaxView.prototype.useMouseEvent = true;

  ParallaxView.prototype.events = function() {
    return {
      "iostap .btn-done": "next",
      "mousemove": "onMouseMove"
    };
  };

  ParallaxView.prototype.serialize = function() {
    var data;
    data = ParallaxView.__super__.serialize.apply(this, arguments);
    data.images = _.compact(data.images);
    return data;
  };

  ParallaxView.prototype.beforeShow = function() {
    return Preloader.load(this.options.data.images, (function(_this) {
      return function() {
        return _this.onRotate({
          beta: 0,
          gamma: 0
        });
      };
    })(this));
  };

  ParallaxView.prototype.show = function() {
    this.setEl(this.findAll(".parallax-img"), "images");
    this.setEl(this.findOne(".caption"), "caption");
    if (this.options.data.background) {
      this.trigger("ui", {
        lightbox: this.options.data.background,
        minimal: false
      });
    }
    if (window.Promise == null) {
      return;
    }
    this.gn = new GyroNorm();
    return this.gn.init({
      frequency: 150
    })["catch"](function() {
      return typeof console !== "undefined" && console !== null ? console.log("DeviceOrientation not available in this context") : void 0;
    }).then((function(_this) {
      return function() {
        return _this.gn.start(function(data) {
          if (!_this.useMouseEvent || _this.gn.isAvailable().deviceOrientationAvailable) {
            _this.useMouseEvent = false;
            return _this.onRotate(data["do"], "all 300ms");
          }
        });
      };
    })(this));
  };

  ParallaxView.prototype.hide = function() {
    var ref;
    return (ref = this.gn) != null ? ref.end() : void 0;
  };

  ParallaxView.prototype.onRefresh = function() {
    var ref;
    if ((ref = this.gn) != null) {
      ref.end();
    }
    this.show();
    if (!this.options.data.background) {
      return this.trigger("ui", {
        lightbox: false
      });
    }
  };

  ParallaxView.prototype.undelegateEvents = function() {
    $(window).off("." + this.cid);
    return ParallaxView.__super__.undelegateEvents.apply(this, arguments);
  };

  ParallaxView.prototype.onMouseMove = function(e) {
    var beta, gamma, pageX, pageY, ref, ref1;
    if (!this.useMouseEvent) {
      return;
    }
    if (typeof e.stopImmediatePropagation === "function") {
      e.stopImmediatePropagation();
    }
    ref1 = ((ref = e.touches) != null ? ref[0] : void 0) || e, pageX = ref1.pageX, pageY = ref1.pageY;
    gamma = (pageX / this.el.offsetWidth - 0.5) * 90;
    beta = (pageY / this.el.offsetHeight - 0.5) * 90;
    return this.onRotate({
      beta: beta,
      gamma: gamma
    });
  };

  ParallaxView.prototype.onRotate = function(arg, transition) {
    var b, beta, dampenX, dampenY, g, gamma, i, images, img, j, len, length, offsetY, ref, results;
    beta = arg.beta, gamma = arg.gamma;
    if (transition == null) {
      transition = "";
    }
    images = this.getEl("images");
    if (!images) {
      return;
    }
    length = images.length - (1 - images.length % 2);
    dampenX = 0.3;
    dampenY = 0.25;
    g = dampenX * gamma;
    b = dampenY * beta;
    offsetY = -((ref = this.getEl("caption")) != null ? ref.offsetHeight : void 0) / 2 || 0;
    results = [];
    for (i = j = 0, len = images.length; j < len; i = ++j) {
      img = images[i];
      results.push(this.transform(img, {
        x: g * (-length / 2 + i + 1) - img.offsetWidth / 2,
        y: b * (-length / 2 + i + 1) - img.offsetHeight / 2 + offsetY,
        transition: transition
      }));
    }
    return results;
  };

  return ParallaxView;

})(SlideView);

module.exports = ParallaxView;
});

;require.register("engine/peer-authoring/actions.coffee", function(exports, require, module) {
var Actions, Constants;

Constants = require("./constants");

exports.Actions = Actions = (function() {
  function Actions(lessonId, slideId) {
    this.lessonId = lessonId;
    this.slideId = slideId;
  }

  Actions.prototype.dispatch = function(arg) {
    var payload, type;
    type = arg.type, payload = arg.payload;
    return Application.publish("event:" + type)(payload);
  };

  Actions.prototype.uploadMediaFromSource = function(source, mediaType) {
    return this.dispatch({
      type: Constants.UPLOAD_MEDIA_FROM_SOURCE,
      payload: {
        lessonId: this.lessonId,
        slideId: this.slideId,
        source: source,
        type: mediaType
      }
    });
  };

  Actions.prototype.getMediaForSlide = function() {
    return this.dispatch({
      type: Constants.GET_MEDIA_FOR_SLIDE,
      payload: {
        lessonId: this.lessonId,
        slideId: this.slideId
      }
    });
  };

  Actions.prototype.postMediaForSlide = function(arg) {
    var title, url;
    url = arg.url, title = arg.title;
    return this.dispatch({
      type: Constants.POST_MEDIA_FOR_SLIDE,
      payload: {
        lessonId: this.lessonId,
        slideId: this.slideId,
        url: url,
        title: title
      }
    });
  };

  Actions.prototype.unsetAutoOpenComment = function() {
    return this.dispatch({
      type: Constants.UNSET_AUTO_OPEN_COMMENT,
      payload: {}
    });
  };

  return Actions;

})();
});

;require.register("engine/peer-authoring/constants.coffee", function(exports, require, module) {
exports.UPLOAD_MEDIA_FROM_SOURCE = 'UPLOAD_MEDIA_FROM_SOURCE';

exports.UPLOAD_MEDIA_FROM_SOURCE_SUCCESS = 'UPLOAD_MEDIA_FROM_SOURCE_SUCCESS';

exports.UPLOAD_MEDIA_FROM_SOURCE_FAILURE = 'UPLOAD_MEDIA_FROM_SOURCE_FAILURE';

exports.UPLOAD_MEDIA_FROM_SOURCE_PROGRESS = 'UPLOAD_MEDIA_FROM_SOURCE_PROGRESS';

exports.UPLOAD_MEDIA_FROM_SOURCE_PREVIEW = 'UPLOAD_MEDIA_FROM_SOURCE_PREVIEW';

exports.POST_MEDIA_FOR_SLIDE = 'POST_MEDIA_FOR_SLIDE';

exports.POST_MEDIA_FOR_SLIDE_SUCCESS = 'POST_MEDIA_FOR_SLIDE_SUCCESS';

exports.POST_MEDIA_FOR_SLIDE_FAILURE = 'POST_MEDIA_FOR_SLIDE_FAILURE';

exports.GET_MEDIA_FOR_SLIDE = 'GET_MEDIA_FOR_SLIDE';

exports.GET_MEDIA_FOR_SLIDE_SUCCESS = 'GET_MEDIA_FOR_SLIDE_SUCCESS';

exports.GET_MEDIA_FOR_SLIDE_FAILURE = 'GET_MEDIA_FOR_SLIDE_FAILURE';

exports.COMMENT_ADDED = 'COMMENT_ADDED';

exports.UNSET_AUTO_OPEN_COMMENT = 'UNSET_AUTO_OPEN_COMMENT';
});

;require.register("engine/peer-authoring/data.coffee", function(exports, require, module) {
exports.getMediaForSlideSuccessData = function() {
  return {
    totalCount: 2,
    items: [
      {
        lessonId: "1",
        slideId: "1",
        id: "1",
        title: "Techniques we've used",
        description: "It's great",
        url: "video/example.mp4"
      }, {
        lessonId: "2",
        slideId: "2",
        id: "2",
        title: "Try this other technique",
        description: "It's great",
        url: "video/example.mp4"
      }, {
        lessonId: "2",
        slideId: "2",
        id: "2",
        title: "How about this?",
        description: "It's great",
        url: "video/example.mp4"
      }, {
        lessonId: "2",
        slideId: "2",
        id: "2",
        title: "This is the best one",
        description: "It's great",
        url: "video/example.mp4"
      }
    ]
  };
};

exports.getNoMediaForSlideData = function() {
  return {
    totalCount: 0,
    items: []
  };
};
});

;require.register("engine/peer-authoring/media-item.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (config, item, obj, playinline) {
jade_mixins["video-stream"] = jade_interp = function(videoUrl, playsinline, controls, klass, poster){
var block = (this && this.block), attributes = (this && this.attributes) || {};
playinline = playinline || true
controls = controls || true
klass = klass || 'video vjs-fluid'
var cloudinaryVideoFolderUrl = config.CLOUDINARY_CDN_URL+config.CLOUDINARY_VIDEO_FOLDER
var streamUrl = ''
if ( videoUrl && videoUrl.indexOf(cloudinaryVideoFolderUrl) > -1)
{
streamUrl = videoUrl.replace(cloudinaryVideoFolderUrl, cloudinaryVideoFolderUrl+'sp_full_hd/')
streamUrl = streamUrl.replace('.mp4', '.m3u8')
}
buf.push("<video" + (jade.attr("webkit-playsinline", playsinline, true, false)) + (jade.attr("controls", controls, true, false)) + " preload=\"auto\"" + (jade.attr("dir", config.direction, true, false)) + (jade.attr("poster", poster, true, false)) + (jade.cls(['video-js',klass], [null,true])) + "><source" + (jade.attr("src", videoUrl, true, false)) + "/>");
if ( streamUrl)
{
buf.push("<source" + (jade.attr("src", streamUrl, true, false)) + "/>");
}
buf.push("</video>");
};
switch (item.type){
case "image":
buf.push("<li" + (jade.attr("data-content", obj.image, true, false)) + " class=\"multi-content-wrapper multi-content-wrapper-image block-md\"><div class=\"block-sm multi-content-media\"><img" + (jade.attr("src", item.url, true, false)) + " class=\"multi-content multi-content-image\"/></div></li>");
  break;
case "video":
buf.push("<li" + (jade.attr("data-id", item.id, true, false)) + " class=\"multi-content-wrapper multi-content-wrapper-video block-md\"><div class=\"block-sm multi-content-media block-lt\">");
jade_mixins["video-stream"](item.url, true, true, "multi-content multi-content-video", item.thumbmail);
buf.push("</div><div class=\"video-info\"><div class=\"video-actions\"><span class=\"icon-group\"><span class=\"icon-group-entry js-like-button hidden\"><span class=\"icon icon-heart js-like-button\"></span><span class=\"video-like-count text-light\">" + (jade.escape(null == (jade_interp = '10') ? "" : jade_interp)) + "</span></span><span class=\"icon-group-entry js-comment-button\">");
if ( item.commentCount > 0 )
{
buf.push("<span class=\"icon icon-chat-count\"></span>");
}
else
{
buf.push("<span class=\"icon icon-chat\"></span>");
}
buf.push("<span class=\"video-comment-count text-light js-video-comment-count\">" + (jade.escape(null == (jade_interp = item.commentCount || 0) ? "" : jade_interp)) + "</span></span></span><span class=\"icon icon-flag js-flag-button hidden\"></span></div><span class=\"video-title\">" + (null == (jade_interp = item.title) ? "" : jade_interp) + "</span></div></li>");
  break;
}}.call(this,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined,"item" in locals_for_with?locals_for_with.item:typeof item!=="undefined"?item:undefined,"obj" in locals_for_with?locals_for_with.obj:typeof obj!=="undefined"?obj:undefined,"playinline" in locals_for_with?locals_for_with.playinline:typeof playinline!=="undefined"?playinline:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/peer-authoring/model.yaml", function(exports, require, module) {
module.exports = {"title":"peer-authoring","display":"Peer Authoring","category":"Content","description":"Accept video contributions and comment on peer submissions","visible":true,"features":{"narration":false,"stars":false},"help":"This template enables learners to upload videos and leave comments. This preview is the initial screen that learners will view. Once a video(s) is uploaded, learners will be able to scroll through what their peers have contributed. </br></br>If you would like to view contributions, click <a href=\"/peer-authoring\" style=\"font-weight: bold\" >here</a>.\n","model":{"title":{"type":"html","default":"Peer Authoring","display":"Slide title","required":false},"noMediaUploaded":{"type":"html","default":"No videos have been uploaded yet.","required":false,"display":"No media uploaded message"},"buttonText":{"type":"html","default":"Upload","display":"Upload button label"},"prompt":{"type":"html","default":"Scroll to see more"},"doneText":{"type":"html","default":"Continue","display":"Done text"}},"examples":[{"title":"Peer Authoring","subtype":"peer-authoring","buttonText":"Upload now"}]}
});

;require.register("engine/peer-authoring/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (buttonText, continueBtnText, doneText, hasNarration, hasPrompt, i18n, noMediaUploaded, prompt, submitUp, title) {
buf.push("<div class=\"row text-center upload-view js-upload-view hidden\"><h1 class=\"js-progress\">" + (null == (jade_interp = i18n("peer-authoring.uploading")) ? "" : jade_interp) + "</h1><div class=\"loading-indicator js-loading-indicator\"><div></div><div></div><div></div><div></div></div><div class=\"upload-progress-indicator upload-progress-indicator--hidden js-progress-indicator\"><div class=\"upload-progress-text\">100%</div></div><div class=\"upload-form js-upload-form\"><label class=\"text-xxl text-xl-video\">" + (null == (jade_interp = i18n("peer-authoring.video-title")) ? "" : jade_interp) + "</label><input type=\"text\"" + (jade.attr("placeholder", i18n("peer-authoring.title-placeholder"), true, false)) + " class=\"text-xxl js-title-input\"/><div class=\"btn btn-pale btn-next slide-up submit-button js-submit-button\">" + (null == (jade_interp = i18n("peer-authoring.submit")) ? "" : jade_interp) + "</div></div></div><div class=\"content-scroll fade-in js-content-view\"><div class=\"content-scroll-inner hide-overflow block-v-lg block-box-sizing\"><div class=\"row\"><div class=\"col-sm-12 col-lg-8 col-lg-offset-2\"><h1 class=\"text-center\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"block-v-md text-center text-lg js-loading-view hidden\">" + (null == (jade_interp = "Loading...") ? "" : jade_interp) + "</div><div class=\"block-v-md text-center text-lg js-no-media-view hidden\">" + (null == (jade_interp = noMediaUploaded) ? "" : jade_interp) + "</div><ul class=\"slide-content text-md js-item-list\"></ul></div></div></div><button class=\"btn btn-solid btn-upload js-upload hidden\">" + (null == (jade_interp = buttonText) ? "" : jade_interp) + "</button></div><div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"buttonText" in locals_for_with?locals_for_with.buttonText:typeof buttonText!=="undefined"?buttonText:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"noMediaUploaded" in locals_for_with?locals_for_with.noMediaUploaded:typeof noMediaUploaded!=="undefined"?noMediaUploaded:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/peer-authoring/view.coffee", function(exports, require, module) {
var Actions, Constants, Data, Model, PeerAuthoringView, Preloader, ScrollableView, dpi, platform, ref,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ScrollableView = require("../scrollable/view");

Preloader = require("lib/preload");

ref = require("lib/device"), dpi = ref.dpi, platform = ref.platform;

Constants = require("./constants");

Actions = require("./actions").Actions;

Data = require("./data");

Model = require("./model");

PeerAuthoringView = (function(superClass) {
  extend(PeerAuthoringView, superClass);

  function PeerAuthoringView() {
    this.showSlideFooter = bind(this.showSlideFooter, this);
    this.hideSlideFooter = bind(this.hideSlideFooter, this);
    this.showContentView = bind(this.showContentView, this);
    this.showUploadView = bind(this.showUploadView, this);
    this.onLike = bind(this.onLike, this);
    this.onTitleInputBlur = bind(this.onTitleInputBlur, this);
    this.onTitleInputFocus = bind(this.onTitleInputFocus, this);
    this.onComment = bind(this.onComment, this);
    this.onSubmit = bind(this.onSubmit, this);
    this.onUpload = bind(this.onUpload, this);
    this.handleCommentAdded = bind(this.handleCommentAdded, this);
    this.exitSocialLearning = bind(this.exitSocialLearning, this);
    this.postMediaForSlideSuccess = bind(this.postMediaForSlideSuccess, this);
    this.uploadMediaFromSourceFailure = bind(this.uploadMediaFromSourceFailure, this);
    this.uploadMediaFromSourceSuccess = bind(this.uploadMediaFromSourceSuccess, this);
    this.uploadMediaFromSourceProgress = bind(this.uploadMediaFromSourceProgress, this);
    this.uploadMediaFromSourcePreview = bind(this.uploadMediaFromSourcePreview, this);
    this.autoOpenComment = bind(this.autoOpenComment, this);
    this.getMediaForSlideSuccess = bind(this.getMediaForSlideSuccess, this);
    this.renderItem = bind(this.renderItem, this);
    return PeerAuthoringView.__super__.constructor.apply(this, arguments);
  }

  PeerAuthoringView.prototype.template = require("./template");

  PeerAuthoringView.prototype.mediaItemTemplate = require("./media-item");

  PeerAuthoringView.prototype.ignoreStateOnRefresh = true;

  PeerAuthoringView.prototype.initialize = function() {
    PeerAuthoringView.__super__.initialize.apply(this, arguments);
    if (window.ED_LMS_PREVIEW || window.ED_PUBLIC_PREVIEW || ((typeof __ !== "undefined" && __ !== null ? __.slidedeck : void 0) == null)) {
      this.actions = new Actions("", "");
    } else {
      this.actions = new Actions(__.slidedeck.id, this.id);
    }
    this.media = [];
    return this.upload = {
      progress: 0,
      uri: null,
      isUploading: false
    };
  };

  PeerAuthoringView.prototype.events = function() {
    return _.extend(PeerAuthoringView.__super__.events.apply(this, arguments), {
      "iostap .btn-done": "next",
      "iostap .js-upload": "onUpload",
      "iostap .js-submit-button": "onSubmit",
      "iostap .js-like-button": "onLike",
      "click .js-comment-button": "onComment",
      "focus .js-title-input": "onTitleInputFocus",
      "focusout .js-title-input": "onTitleInputBlur"
    });
  };

  PeerAuthoringView.prototype.renderItem = function(item) {
    var videoThumbnail;
    videoThumbnail = item.thumbnail;
    if (!videoThumbnail && item.url && /cloudinary.*\..{3,4}$/.test(item.url)) {
      videoThumbnail = item.url.replace(/\..{3,4}$/, ".jpg");
    }
    item = {
      id: item.id,
      type: 'video',
      url: item.url,
      title: item.title,
      commentCount: item.commentCount,
      thumbnail: videoThumbnail
    };
    return this.mediaItemTemplate({
      item: item,
      config: this.options.config()
    });
  };

  PeerAuthoringView.prototype.prependItem = function(item) {
    return this.getEl("item_list").prepend(this.renderItem(item));
  };

  PeerAuthoringView.prototype.getMediaForSlide = function() {
    if (window.ED_LMS_PREVIEW || window.ED_PUBLIC_PREVIEW) {
      return this.getMediaForSlideSuccess(Data.getNoMediaForSlideData());
    } else {
      this.actions.getMediaForSlide();
      this.getEl("loading_view").removeClass("hidden");
      this.getEl("item_list").addClass("hidden");
      return this.getEl("no_media_view").addClass("hidden");
    }
  };

  PeerAuthoringView.prototype.getMediaForSlideSuccess = function(payload) {
    var items, totalCount, videoId;
    items = payload.items;
    totalCount = payload.totalCount;
    videoId = payload.videoId;
    this.getEl("loading_view").addClass("hidden");
    if (totalCount === 0) {
      this.getEl("no_media_view").removeClass("hidden");
      return this.getEl("item_list").addClass("hidden");
    } else {
      this.media = items;
      this.getEl("no_media_view").addClass("hidden");
      this.getEl("item_list").removeClass("hidden").html(this.media.map(this.renderItem).join(""));
      window.setTimeout(((function(_this) {
        return function() {
          return _this.preloadMedia();
        };
      })(this)), 1000);
      if (payload.openComment) {
        return window.setTimeout(((function(_this) {
          return function() {
            return _this.autoOpenComment(videoId);
          };
        })(this)), 2000);
      }
    }
  };

  PeerAuthoringView.prototype.autoOpenComment = function(videoId) {
    var button, commentItem;
    commentItem = $("ul.slide-content").find("[data-id=\'" + videoId + "\']");
    button = $(commentItem).find('.js-comment-button');
    return button.trigger('click');
  };

  PeerAuthoringView.prototype.uploadMediaFromSourcePreview = function(arg) {
    var uri;
    uri = arg.uri;
    this.upload.uri = uri;
    return this.getEl("loading_indicator").removeClass("hidden");
  };

  PeerAuthoringView.prototype.uploadMediaFromSourceProgress = function(arg) {
    var percent;
    percent = arg.percent;
    this.upload.percent = percent;
    if (typeof percent === "number") {
      if (percent === 1) {
        return this.getEl("progress").html("Processing...");
      } else {
        return this.getEl("progress").html("Uploaded " + ((percent * 100).toFixed()) + "%");
      }
    }
  };

  PeerAuthoringView.prototype.uploadMediaFromSourceSuccess = function(arg) {
    var uri;
    uri = arg.uri;
    this.upload = {
      uri: uri,
      progress: void 0,
      isUploading: false
    };
    this.getEl("progress").html(i18n("peer-authoring.upload-complete"));
    this.getEl("upload_form").removeClass("hidden");
    this.getEl("loading_indicator").addClass("hidden");
    return this.getEl("upload_complete_indicator").removeClass("upload-progress-indicator--hidden");
  };

  PeerAuthoringView.prototype.uploadMediaFromSourceFailure = function(arg) {
    var message;
    message = arg.message;
    this.upload = {
      uri: void 0,
      progress: void 0,
      isUploading: false
    };
    return this.showContentView();
  };

  PeerAuthoringView.prototype.postMediaForSlideSuccess = function(payload) {
    var $li, contentScroll;
    this.prependItem(payload);
    this.getEl("loading_view").addClass("hidden");
    this.getEl("content_view").removeClass("hidden");
    this.$(".js-no-media-view").addClass("hidden");
    this.$(".js-item-list").removeClass("hidden");
    window.setTimeout(((function(_this) {
      return function() {
        return _this.preloadMedia();
      };
    })(this)), 400);
    contentScroll = this.findOne(".content-scroll");
    $li = this.$("[data-id=" + payload.id + "]");
    return window.setTimeout(((function(_this) {
      return function() {
        return contentScroll.scrollTo({
          top: $li[0].offsetTop + 10,
          behavior: "smooth"
        });
      };
    })(this)), 1000);
  };

  PeerAuthoringView.prototype.exitSocialLearning = function(e) {
    return this.$(".selected").removeClass("selected");
  };

  PeerAuthoringView.prototype.handleCommentAdded = function(e) {
    var commentCount, commentCountString, contentId;
    contentId = e.payload.contentId;
    commentCount = $("[data-id='" + contentId + "']").find(".js-video-comment-count");
    commentCountString = commentCount.text();
    if (commentCountString) {
      return commentCount.text((parseInt(commentCountString, 10)) + 1);
    }
  };

  PeerAuthoringView.prototype.show = function() {
    PeerAuthoringView.__super__.show.apply(this, arguments);
    this.setEl(this.$(".js-item-list"), "item_list");
    this.setEl(this.$(".js-upload-view"), "upload_view");
    this.setEl(this.$(".js-content-view"), "content_view");
    this.setEl(this.$(".js-loading-view"), "loading_view");
    this.setEl(this.$(".js-no-media-view"), "no_media_view");
    this.setEl(this.$(".js-title-input"), "title_input");
    this.setEl(this.$(".js-progress"), "progress");
    this.setEl(this.$(".js-upload-form"), "upload_form");
    this.setEl(this.$(".js-upload"), "upload_button");
    this.setEl(this.$(".js-loading-indicator"), "loading_indicator");
    this.setEl($("#slides"), "slides");
    this.setEl($(".slide-footer"), "slide_footer");
    this.setEl(this.$(".js-progress-indicator"), "upload_complete_indicator");
    this.getMediaForSlide();
    if (platform !== "browser") {
      this.getEl("upload_button").removeClass("hidden");
    }
    return this.delegateEventsOnShow();
  };

  PeerAuthoringView.prototype.delegateEventsOnShow = function() {
    this.listenTo(Backbone.Events, Constants.COMMENT_ADDED, this.handleCommentAdded);
    this.listenTo(Backbone.Events, Constants.GET_MEDIA_FOR_SLIDE_SUCCESS, this.getMediaForSlideSuccess);
    this.listenTo(Backbone.Events, Constants.UPLOAD_MEDIA_FROM_SOURCE_PREVIEW, this.uploadMediaFromSourcePreview);
    this.listenTo(Backbone.Events, Constants.UPLOAD_MEDIA_FROM_SOURCE_PROGRESS, this.uploadMediaFromSourceProgress);
    this.listenTo(Backbone.Events, Constants.UPLOAD_MEDIA_FROM_SOURCE_SUCCESS, this.uploadMediaFromSourceSuccess);
    this.listenTo(Backbone.Events, Constants.UPLOAD_MEDIA_FROM_SOURCE_FAILURE, this.uploadMediaFromSourceFailure);
    this.listenTo(Backbone.Events, Constants.POST_MEDIA_FOR_SLIDE_SUCCESS, this.postMediaForSlideSuccess);
    return this.listenTo(Backbone.Events, "social-learning:exit", this.exitSocialLearning);
  };

  PeerAuthoringView.prototype.onScroll = function(e) {
    var scrollTop, uploadBtn;
    PeerAuthoringView.__super__.onScroll.apply(this, arguments);
    if (platform !== "browser") {
      scrollTop = e.srcElement.scrollTop;
      uploadBtn = this.getEl("upload_button");
      if (scrollTop > 40 && !uploadBtn.hasClass("btn-upload--hidden")) {
        uploadBtn.addClass("btn-upload--hidden");
        return _.delay((function() {
          return uploadBtn.addClass("hidden");
        }), 550);
      } else if (scrollTop <= 40 && uploadBtn.hasClass("btn-upload--hidden")) {
        uploadBtn.removeClass("hidden");
        return _.delay((function() {
          return uploadBtn.removeClass("btn-upload--hidden");
        }), 5);
      }
    }
  };

  PeerAuthoringView.prototype.onUpload = function() {
    if (window.ED_LMS_PREVIEW || window.ED_PUBLIC_PREVIEW || platform === "browser") {
      return;
    }
    this.upload.isUploading = true;
    this.showUploadView();
    return this.actions.uploadMediaFromSource("library", "video");
  };

  PeerAuthoringView.prototype.onSubmit = function(e) {
    e.preventDefault();
    this.showContentView();
    this.actions.postMediaForSlide({
      url: this.upload.uri,
      title: this.getEl("title_input").val()
    });
    return false;
  };

  PeerAuthoringView.prototype.onComment = function(e) {
    var $li, contentScroll, id;
    if (window.ED_LMS_PREVIEW || window.ED_PUBLIC_PREVIEW) {
      return;
    }
    $li = $(e.currentTarget).parents("li");
    $li.addClass("selected");
    contentScroll = this.findOne(".content-scroll");
    window.setTimeout(function() {
      return contentScroll.scrollTo({
        top: $li[0].offsetTop + 10,
        behavior: "smooth"
      });
    }, 600);
    id = $li.data("id").toString();
    Backbone.Events.trigger("open-social-learning", {
      slide: this,
      peerAuthoring: true,
      contentId: id
    });
    return this.actions.unsetAutoOpenComment();
  };

  PeerAuthoringView.prototype.onTitleInputFocus = function() {
    return this.getEl("upload_complete_indicator").addClass("upload-progress-indicator--hidden");
  };

  PeerAuthoringView.prototype.onTitleInputBlur = function() {
    return this.getEl("upload_complete_indicator").removeClass("upload-progress-indicator--hidden");
  };

  PeerAuthoringView.prototype.onLike = function() {};

  PeerAuthoringView.prototype.showUploadView = function() {
    this.getEl("progress").html(i18n("peer-authoring.uploading"));
    this.getEl("upload_form").addClass("hidden");
    this.getEl("loading_indicator").removeClass("hidden");
    this.getEl("upload_button").addClass("hidden");
    this.getEl("content_view").addClass("hidden");
    this.getEl("upload_view").removeClass("hidden");
    this.getEl("title_input").val("");
    this.getEl("upload_complete_indicator").addClass("upload-progress-indicator--hidden");
    return this.hideSlideFooter();
  };

  PeerAuthoringView.prototype.showContentView = function() {
    this.getEl("upload_view").addClass("hidden");
    this.getEl("upload_form").addClass("hidden");
    this.getEl("upload_button").removeClass("hidden");
    this.getEl("content_view").removeClass("hidden");
    return this.showSlideFooter();
  };

  PeerAuthoringView.prototype.hideSlideFooter = function() {
    this.getEl("slide_footer").css("display", "none");
    return this.getEl("slides").css("border-bottom", "none");
  };

  PeerAuthoringView.prototype.showSlideFooter = function() {
    this.getEl("slide_footer").css("display", "block");
    return this.getEl("slides").css("border-bottom", "solid 1px currentColor");
  };

  PeerAuthoringView.prototype.hide = function() {
    return this.showSlideFooter();
  };

  return PeerAuthoringView;

})(ScrollableView);

module.exports = PeerAuthoringView;
});

;require.register("engine/pie-chart/model.yaml", function(exports, require, module) {
module.exports = {"title":"pie-chart","display":"Pie Chart","category":"Numbers","features":{"stars":true,"social":true},"model":{"title":{"type":"html","default":"Ask a question"},"pie":{"min":{"type":"number","default":0,"display":"Min. Value"},"max":{"type":"number","default":100,"display":"Max. Value"},"prefix":{"type":"html","default":""},"suffix":{"type":"html","default":"%"},"increment":{"type":"number","default":1}},"answer":{"text":{"type":"html","default":"","display":"Answer Text"},"value":{"type":"number","default":5,"display":"Correct Value"},"correct":{"type":"html","default":"That's correct!","display":"Correct Reinforcement"},"incorrect":{"type":"html","default":"Not quite...","display":"Incorrect Reinforcement"},"takeaway":{"type":"html","default":"","display":"Core Message"}},"game":{"timer":{"limit":{"type":"number","default":-1,"display":"Time Limit (seconds)"},"out-of-time-prompt":{"type":"html","display":"Out of time prompt"}}},"prompt":{"type":"html","default":"Drag to set the correct value"},"doneText":{"type":"html","default":"Continue","display":"Done text"}},"examples":[{"subtype":"pie-chart","title":"What percentage of the market belongs to the product?","pie":{"min":0,"max":100,"labels":4,"prefix":"","suffix":"%","increment":1},"answer":{"value":26,"takeaway":"The product holds 26% market share","text":"With so much market share held by this product, it's obviously the only choice for consumers in the know.\n"}}]}
});

;require.register("engine/pie-chart/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (config, continueBtnText, doneText, game, hasNarration, hasPrompt, i18n, prompt, submitUp, title) {
if ( game && game.timer && game.timer.limit > 0 && !game.timer.isDisabled)
{
buf.push("<div class=\"full-screen\"><div class=\"game-stepper text-lg text-bold\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div></div>");
}
buf.push("<div class=\"content-fill\"><div class=\"content-fit block-v-xl content-lg-fill content-sm-ver content-md-ver\"><div class=\"row content-lg-fill\"><div class=\"col-lg-6 col-sm-12 content-lg-ver block-v-md\"><h1 class=\"text-lg-right text-md-center text-sm-center fade-in\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1></div><div class=\"col-lg-6 col-sm-12 content-lg-ver text-center block-v-md\">");
if ( config.direction === "rtl")
{
var circle = "M5,0 a-5,-5 0 0,0 0,10 a-5,-5 0 0,0 0,-10 z";
}
else
{
var circle = "M5,0 a5,5 0 0,1 0,10 a5,5 0 0,1 0,-10 z";
}
buf.push("<div class=\"pie scale-up\"><svg viewbox=\"0,0,10,10\" class=\"pie-ring-svg\"><path" + (jade.attr("d", circle, true, false)) + " class=\"pie-ring\"></path><path" + (jade.attr("d", circle, true, false)) + " class=\"pie-ring pie-ring-input\"></path><path" + (jade.attr("d", circle, true, false)) + " class=\"pie-ring pie-ring-answer\"></path></svg><div class=\"pie-ring-value text-xxl text-bold content-ver\"><div class=\"text-sm\"><div class=\"text-sm\">" + (jade.escape((jade_interp = i18n("pie-chart.touch-to-begin")) == null ? '' : jade_interp)) + "</div></div></div></div></div></div></div></div><div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"game" in locals_for_with?locals_for_with.game:typeof game!=="undefined"?game:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/pie-chart/view.coffee", function(exports, require, module) {
var DraggyView, GameView, PieChartView, Prefix,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

GameView = require("views/base/game");

Prefix = require("lib/prefix");

DraggyView = require("views/components/draggy").DraggyView;

PieChartView = (function(superClass) {
  extend(PieChartView, superClass);

  function PieChartView() {
    return PieChartView.__super__.constructor.apply(this, arguments);
  }

  PieChartView.prototype.template = require("./template");

  PieChartView.prototype.events = {
    "iostap .btn-done": "submit"
  };

  PieChartView.prototype.show = function() {
    PieChartView.__super__.show.apply(this, arguments);
    this.setEl(this.findOne(".pie"), "pie");
    this.setEl(this.findOne(".pie-ring-input"), "knob-input");
    this.setEl(this.findOne(".pie-ring-value"), "knob-value");
    this.setEl(this.findOne(".pie-ring-answer"), "knob-answer");
    this.resetDashOffset(this.getEl("knob-input"));
    this.resetDashOffset(this.getEl("knob-answer"));
    this.createDraggy();
    return this.enterGame();
  };

  PieChartView.prototype.createDraggy = function() {
    this.draggy = new DraggyView({
      el: this.getEl("pie"),
      radius: this.getEl("pie").offsetWidth / 2,
      isParent: true
    });
    this.listenTo(this.draggy, "drag", this.onDrag);
    return this.listenTo(this.draggy, "drop", this.onDrop);
  };

  PieChartView.prototype.onDrag = function(draggy, isInitialDrag) {
    this.currentValue = this.roundValue(draggy);
    this.labelEl(this.getEl("knob-value"), this.currentValue);
    this.transition(this.getEl("knob-input"), isInitialDrag ? "all 300ms" : "none");
    return this.offsetStrokeDash(this.getEl("knob-input"), draggy.t);
  };

  PieChartView.prototype.onDrop = function(draggy, isReset) {
    if (!isReset) {
      return draggy.reset({
        t: this.roundPos(draggy)
      });
    } else {
      this.transition(this.getEl("knob-input"), "all 300ms");
      this.offsetStrokeDash(this.getEl("knob-input"), draggy.t);
      if (this.currentValue != null) {
        return this.setState("touched");
      }
    }
  };

  PieChartView.prototype.resetDashOffset = function(path) {
    var c;
    c = 10 * Math.PI;
    path.style.strokeDashoffset = c;
    path.style.strokeDasharray = [c, c].join(" ");
    return this.circumference = c;
  };

  PieChartView.prototype.offsetStrokeDash = function(path, t) {
    var offset, percent;
    if (this.options.config().direction === "rtl") {
      t = Math.PI * 2 - t;
    }
    percent = -(t - Math.PI * 2) / (Math.PI * 2);
    offset = this.circumference * percent;
    return path.style.strokeDashoffset = offset + "px";
  };

  PieChartView.prototype.roundValue = function(draggy) {
    var increment, max, min, ref, value;
    ref = this.options.data.pie, min = ref.min, max = ref.max, increment = ref.increment;
    value = Big(max - min).mul(this.roundPercent(draggy)).div(increment).round().mul(increment).plus(min);
    if (this.options.config().direction === "rtl") {
      return Big(max - value);
    } else {
      return value;
    }
  };

  PieChartView.prototype.roundPos = function(draggy) {
    return (Math.PI * 2) * this.roundPercent(draggy);
  };

  PieChartView.prototype.roundPercent = function(draggy) {
    var increment, max, min, percent, ref, steps;
    ref = this.options.data.pie, increment = ref.increment, min = ref.min, max = ref.max;
    max = Big(max).sub(min).div(increment).round().mul(increment).plus(min);
    percent = _.limit(draggy.t / (Math.PI * 2), 0, 1);
    steps = Big(max).sub(min).div(increment).valueOf();
    return Big(steps).mul(percent).round().div(steps);
  };

  PieChartView.prototype.labelEl = function(el, value) {
    var prefix, ref, suffix;
    ref = this.options.data.pie, prefix = ref.prefix, suffix = ref.suffix;
    return el.innerHTML = "" + prefix + value + suffix;
  };

  PieChartView.prototype.showAnswer = function() {
    this.offsetStrokeDash(this.getEl("knob-answer"), this.draggy.t);
    return this.animateAnswerKnob(this.getEl("knob-answer"));
  };

  PieChartView.prototype.isCorrect = function() {
    var ref;
    return (this.currentValue != null) && ((ref = this.currentValue) != null ? ref.eq(this.options.data.answer.value) : void 0);
  };

  PieChartView.prototype.animateAnswerKnob = function(el) {
    var answer, increment, max, min, percent, pie, ref;
    ref = this.options.data, answer = ref.answer, pie = ref.pie;
    increment = pie.increment, min = pie.min, max = pie.max;
    max = Big(max).sub(min).div(increment).round().mul(increment).plus(min);
    percent = (answer.value - min) / (max - min);
    if (this.options.config().direction === "rtl") {
      percent = 1 - percent;
    }
    el.offsetWidth;
    this.transition(el, "all 600ms");
    return this.offsetStrokeDash(el, percent * Math.PI * 2);
  };

  PieChartView.prototype.endGame = function() {
    PieChartView.__super__.endGame.apply(this, arguments);
    return this.submit();
  };

  PieChartView.prototype.answerDetails = function() {
    var answer, correct, details, question, questions, ref, value;
    questions = ((ref = this.options.metadata) != null ? ref.questions : void 0) || [];
    if (!(questions.length > 0)) {
      return [];
    }
    question = questions[0];
    correct = this.isCorrect();
    value = parseInt(this.currentValue);
    answer = _.find(question.answers, function(a) {
      return a.correct === correct;
    });
    details = {
      question: question.question,
      answer: answer
    };
    details.answer.content = value;
    return [details];
  };

  return PieChartView;

})(GameView);

module.exports = PieChartView;
});

;require.register("engine/quadrant-survey/model.yaml", function(exports, require, module) {
module.exports = {"title":"quadrant-survey","display":"Quadrant","category":"Survey","description":"Quadrant input for user feedback","model":{"question":{"id":{"type":"uuid","hidden":true},"content":{"type":"html"}},"zones":{"min":4,"max":4,"type":[{"xAxis":{"type":"html","display":"x axis","default":"X Axis"},"yAxis":{"type":"html","display":"y axis","default":"Y Axis"}}]},"words":{"min":1,"max":8,"type":[{"name":{"type":"html"},"short":{"type":"html"}}]},"prompt":{"type":"html","default":"Drag the words into the appropriate zone"},"doneText":{"type":"html","default":"Continue","display":"Done text"}},"examples":[{"subtype":"quadrant","question":{"id":"#GENUUID#","content":"How do you feel about each topic that was presented to you in this lesson?"},"zones":[{"xAxis":"Confident","yAxis":"Applicable"},{"xAxis":"Not Confident","yAxis":"Applicable"},{"xAxis":"Not Confident","yAxis":"Not Applicable"},{"xAxis":"Confident","yAxis":"Not Applicable"}],"words":[{"name":"Topic X","short":"X"},{"name":"Topic Y","short":"Y"},{"name":"Topic Z","short":"Z"}]}]}
});

;require.register("engine/quadrant-survey/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (continueBtnText, doneText, hasNarration, hasPrompt, i18n, prompt, question, submitUp, undefined, words, zones) {
buf.push("<div class=\"slide-content content-fill text-center\"><div class=\"scroller content-fill js-scroller\"><div class=\"slide-page js-slide-page slide-page--active slide-page--title\"><h2>" + (null == (jade_interp = question.content) ? "" : jade_interp) + "</h2><div class=\"block-v-md\"><div class=\"btn btn-muted btn-circular btn-down\"><span class=\"icon icon-chevron-down text-lg\"></span></div></div></div><div class=\"slide-page js-slide-page\"><div class=\"btn btn-muted btn-circular btn-up\"><span class=\"icon icon-chevron-up text-lg\"></span></div><ul class=\"quadrant\"><li" + (jade.attr("data-name", "" + (zones[0].yAxis) + "-" + (zones[0].xAxis) + "", true, false)) + " class=\"quadrant-zone droppy\"><span class=\"zone-title zone-title--left\">" + (jade.escape(null == (jade_interp = zones[0].yAxis) ? "" : jade_interp)) + "</span><span class=\"zone-title zone-title--top\">" + (jade.escape(null == (jade_interp = zones[0].xAxis) ? "" : jade_interp)) + "</span></li><li" + (jade.attr("data-name", "" + (zones[1].xAxis) + "-" + (zones[1].yAxis) + "", true, false)) + " class=\"quadrant-zone droppy\"><span class=\"zone-title zone-title--top\">" + (jade.escape(null == (jade_interp = zones[1].xAxis) ? "" : jade_interp)) + "</span><span class=\"zone-title zone-title--right\">" + (jade.escape(null == (jade_interp = zones[1].yAxis) ? "" : jade_interp)) + "</span></li><li" + (jade.attr("data-name", "" + (zones[2].yAxis) + "-" + (zones[2].xAxis) + "", true, false)) + " class=\"quadrant-zone droppy\"><span class=\"zone-title zone-title--left\">" + (jade.escape(null == (jade_interp = zones[2].yAxis) ? "" : jade_interp)) + "</span><span class=\"zone-title zone-title--bottom\">" + (jade.escape(null == (jade_interp = zones[2].xAxis) ? "" : jade_interp)) + "</span></li><li" + (jade.attr("data-name", "" + (zones[3].xAxis) + "-" + (zones[3].yAxis) + "", true, false)) + " class=\"quadrant-zone droppy\"><span class=\"zone-title zone-title--bottom\">" + (jade.escape(null == (jade_interp = zones[3].xAxis) ? "" : jade_interp)) + "</span><span class=\"zone-title zone-title--right\">" + (jade.escape(null == (jade_interp = zones[3].yAxis) ? "" : jade_interp)) + "</span></li></ul><div class=\"details\"><h2>" + (null == (jade_interp = question.content) ? "" : jade_interp) + "</h2><div class=\"block-v-md\"><div class=\"js-words words\">");
// iterate words 
;(function(){
  var $$obj = words ;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var word = $$obj[i];

buf.push("<div" + (jade.attr("data-name", word.name, true, false)) + (jade.attr("data-short", word.short, true, false)) + (jade.cls(['draggy','btn','btn-sm','btn-solid','slide-up',"delay-" + (i) + ""], [null,null,null,null,null,true])) + ">" + (null == (jade_interp = word.name) ? "" : jade_interp) + "</div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var word = $$obj[i];

buf.push("<div" + (jade.attr("data-name", word.name, true, false)) + (jade.attr("data-short", word.short, true, false)) + (jade.cls(['draggy','btn','btn-sm','btn-solid','slide-up',"delay-" + (i) + ""], [null,null,null,null,null,true])) + ">" + (null == (jade_interp = word.name) ? "" : jade_interp) + "</div>");
    }

  }
}).call(this);

buf.push("</div></div></div></div></div></div><div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"question" in locals_for_with?locals_for_with.question:typeof question!=="undefined"?question:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined,"words" in locals_for_with?locals_for_with.words:typeof words!=="undefined"?words:undefined,"zones" in locals_for_with?locals_for_with.zones:typeof zones!=="undefined"?zones:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/quadrant-survey/view.coffee", function(exports, require, module) {
var DraggyView, InputView, QuadrantSurveyView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

InputView = require("views/input");

DraggyView = require("views/components/draggy").DraggyView;

QuadrantSurveyView = (function(superClass) {
  extend(QuadrantSurveyView, superClass);

  function QuadrantSurveyView() {
    return QuadrantSurveyView.__super__.constructor.apply(this, arguments);
  }

  QuadrantSurveyView.prototype.template = require("./template");

  QuadrantSurveyView.prototype.isScrolledDown = false;

  QuadrantSurveyView.prototype.events = function() {
    return {
      "iostap .btn-done": "nextSlide",
      "iostap .btn-up": "scrollUp",
      "iostap .btn-down": "scrollDown"
    };
  };

  QuadrantSurveyView.prototype.refresh = function(params) {
    var currentData, isQuestionChanged, isWordsChanged, isZonesChanged, nextData;
    currentData = this.options.data;
    nextData = params.data;
    isQuestionChanged = !_.isMatch(currentData.question, nextData.question);
    isZonesChanged = function() {
      return _.some(currentData.zones, function(zone, i) {
        return !_.isMatch(zone, nextData.zones[i]);
      });
    };
    isWordsChanged = function() {
      return (currentData.words.length !== nextData.words.length) || _.some(currentData.words, function(word, i) {
        return !_.isMatch(word, nextData.words[i]);
      });
    };
    QuadrantSurveyView.__super__.refresh.call(this, params);
    if (isQuestionChanged && this.isScrolledDown) {
      this.scrollDown(false);
      return this.scrollUp();
    } else if (isZonesChanged() || isWordsChanged()) {
      if (this.isScrolledDown) {
        return this.scrollDown(false);
      } else {
        return this.scrollDown(true);
      }
    }
  };

  QuadrantSurveyView.prototype.show = function() {
    var draggy, el, i, k, len, ref;
    this.listenTo(this, "resize", this.onResize);
    if (this.draggies) {
      ref = this.draggies;
      for (k = 0, len = ref.length; k < len; k++) {
        draggy = ref[k];
        draggy.undelegateEvents();
      }
    }
    this.draggies = (function() {
      var l, len1, ref1, results;
      ref1 = this.findAll(".draggy");
      results = [];
      for (i = l = 0, len1 = ref1.length; l < len1; i = ++l) {
        el = ref1[i];
        draggy = new DraggyView({
          el: el
        });
        this.listenTo(draggy, "drag", this.onDrag);
        this.listenTo(draggy, "drop", this.onDrop);
        results.push(draggy);
      }
      return results;
    }).call(this);
    this.droppies = this.getElements(".droppy", null);
    return this.el.classList.add("ready");
  };

  QuadrantSurveyView.prototype.getElements = function(selector, original) {
    var contains, el, i, k, l, len, len1, ref, ref1, results, results1;
    if (original) {
      results = [];
      for (k = 0, len = original.length; k < len; k++) {
        ref = original[k], el = ref.el, contains = ref.contains;
        results.push({
          el: el,
          contains: contains,
          bounds: el.getBoundingClientRect()
        });
      }
      return results;
    } else {
      ref1 = this.findAll(selector);
      results1 = [];
      for (i = l = 0, len1 = ref1.length; l < len1; i = ++l) {
        el = ref1[i];
        results1.push({
          el: el,
          bounds: el.getBoundingClientRect(),
          contains: []
        });
      }
      return results1;
    }
  };

  QuadrantSurveyView.prototype.onDrag = function(draggy, isInitialDrag) {
    var activeIndex, droppy, i, k, len, ref;
    if (isInitialDrag) {
      this.droppies = this.getElements(".droppy", this.droppies);
    }
    activeIndex = draggy.closest(_.pluck(this.droppies, "bounds"));
    ref = this.droppies;
    for (i = k = 0, len = ref.length; k < len; i = ++k) {
      droppy = ref[i];
      droppy.el.classList.toggle("active", i === activeIndex);
      droppy.isActive = i === activeIndex;
    }
    if (isInitialDrag) {
      draggy.el.className = draggy.el.className.replace(/delay-\d/, "");
    }
    $(draggy.el).html(draggy.el.dataset.name);
    return this.transform(draggy.el, {
      x: draggy.x,
      y: draggy.y,
      transition: isInitialDrag ? "all 300ms" : "none"
    });
  };

  QuadrantSurveyView.prototype.onDrop = function(draggy) {
    var droppy, dropzone, i, isComplete, k, len, ref;
    droppy = ((function() {
      var k, len, ref, results;
      ref = this.droppies;
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        droppy = ref[k];
        if (droppy.isActive) {
          results.push(droppy);
        }
      }
      return results;
    }).call(this))[0];
    if (droppy && droppy.el) {
      ref = this.droppies;
      for (i = k = 0, len = ref.length; k < len; i = ++k) {
        dropzone = ref[i];
        dropzone.contains = dropzone.contains.filter(function(drag) {
          return drag !== draggy;
        });
      }
      droppy.contains.push(draggy);
    } else {
      draggy.resetPosition();
      this.transform(draggy.el, {
        x: draggy.x,
        y: draggy.y,
        transition: "all 300ms"
      });
    }
    this.renderZones();
    if (this.$('.js-words').is(':empty')) {
      isComplete = "touched";
      this.formatValue();
    } else {
      isComplete = "prompt";
    }
    return this.setState(isComplete);
  };

  QuadrantSurveyView.prototype.renderZones = function() {
    var draggy, droppy, el, i, j, k, len, ref, results;
    ref = this.droppies;
    results = [];
    for (i = k = 0, len = ref.length; k < len; i = ++k) {
      droppy = ref[i];
      results.push((function() {
        var l, len1, ref1, results1;
        ref1 = droppy.contains;
        results1 = [];
        for (j = l = 0, len1 = ref1.length; l < len1; j = ++l) {
          draggy = ref1[j];
          el = draggy.el;
          draggy.resetPosition();
          this.transform(el, {
            x: 0,
            y: 0,
            transition: "none"
          });
          $(el).html(el.dataset.short);
          results1.push($(el).detach().appendTo(droppy.el));
        }
        return results1;
      }).call(this));
    }
    return results;
  };

  QuadrantSurveyView.prototype.scrollUp = function(transition) {
    var $scroller;
    if (transition == null) {
      transition = true;
    }
    $('#lesson-header').show();
    $(this.el).find('.js-slide-page').removeClass('slide-page--active');
    $scroller = $(this.el).find('.js-scroller');
    this.transform($scroller[0], {
      x: 0,
      y: 0,
      transition: transition ? "all 300ms" : "none"
    });
    $(this.el).find('.btn-up').hide();
    return this.isScrolledDown = false;
  };

  QuadrantSurveyView.prototype.scrollDown = function(transition) {
    var $firstPage;
    if (transition == null) {
      transition = true;
    }
    $firstPage = $(this.el).find('.js-slide-page').first();
    $firstPage.next().addClass('slide-page--active');
    $('#lesson-header').hide();
    this.onResize(transition);
    $(this.el).find('.btn-up').show();
    return this.isScrolledDown = true;
  };

  QuadrantSurveyView.prototype.onResize = function(transition) {
    var $firstPage, $scroller, pageHeight;
    if (transition == null) {
      transition = false;
    }
    $scroller = $(this.el).find('.js-scroller');
    $firstPage = $(this.el).find('.js-slide-page').first();
    if ($firstPage.next().hasClass('slide-page--active')) {
      pageHeight = $firstPage.height() + parseInt($firstPage.css('margin-bottom'));
      return this.transform($scroller[0], {
        x: 0,
        y: "-" + pageHeight + "px",
        transition: transition ? "all 300ms" : "none"
      });
    }
  };

  QuadrantSurveyView.prototype.formatValue = function() {
    var droppy, i, k, len, names, ref, zoneName;
    this.value = '';
    ref = this.droppies;
    for (i = k = 0, len = ref.length; k < len; i = ++k) {
      droppy = ref[i];
      names = droppy.contains.map(function(draggy) {
        return draggy.el.dataset.name;
      });
      zoneName = droppy.el.dataset.name;
      this.value += i === 0 ? zoneName + ":" + (names.join(',')) : "|" + zoneName + ":" + (names.join(','));
    }
    return console.log(this.value);
  };

  QuadrantSurveyView.prototype.userInput = function() {
    return {
      quadrantResponse: this.value,
      question: {
        content: this.options.data.question.content,
        id: this.options.data.question.id
      }
    };
  };

  QuadrantSurveyView.prototype.submit = function(e) {
    $('#lesson-header').show();
    return QuadrantSurveyView.__super__.submit.apply(this, arguments);
  };

  return QuadrantSurveyView;

})(InputView);

module.exports = QuadrantSurveyView;
});

;require.register("engine/question-pool/model.yaml", function(exports, require, module) {
module.exports = {"title":"question-pool","display":"Question Pool","category":"Advanced","visible":false,"description":"Ask questions from a pool of questions","model":{"content":{"type":"slides","display":"Question Slides","help":"Add the slides that will be shown in this question pool.","allows":["Multiple Choice","Numbers","Concepts","Relationships","import-slides"]},"showAllSlidesInOrder":{"type":"boolean","default":false,"display":"Display all slides"},"nbQuestionsToAsk":{"type":"number","default":1,"display":"Number of questions to present"},"scoringMethod":{"type":"select","display":"Scoring Method","default":"Slide","enum":["Slide","Answer","Slide Negative Marking","Answer Negative Marking","Answer Negative Marking II"]}},"examples":[{"subtype":"pool","content":[{"type":"number-picker","templateName":"Number Picker","data":{"answer":{"takeaway":"The product costs $99.00","value":99,"incorrect":"Not quite...","correct":"That's correct!","text":""},"number":{"suffix":",","prefix":"$","initial":99,"min":12,"max":147,"digits":3},"title":"At a cost of $99, our product is the cheapest","game":{"timer":{"limit":-1}},"prompt":"Select the correct number"},"name":0,"displayIndex":1},{"type":"slider","templateName":"Slider","data":{"answer":{"value":98,"text":"A huge amount of responses were contributed to the survey.","takeaway":"","incorrect":"Not quite...","correct":"That's correct!"},"slider":{"labels":4,"suffix":"%","max":100,"min":85,"decimals":0,"increment":1,"prefix":""},"title":"What percent of customers responded in the survey?","game":{"timer":{"limit":-1}},"prompt":"Slide to the correct value"},"name":1,"displayIndex":2},{"type":"dial","templateName":"Dial","data":{"answer":{"text":"We're a true market leader with 10 states.","takeaway":"There are 10 states with over 10% market share","value":10,"incorrect":"Not quite...","correct":"That's correct!"},"dial":{"suffix":"","prefix":"","labels":4,"max":20,"min":0,"decimals":0,"increment":1},"title":"How many states have over 10% market share?","game":{"timer":{"limit":-1}},"prompt":"Drag to set the correct value"},"name":2,"displayIndex":3}]}]}
});

;require.register("engine/question-pool/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (continueBtnText, doneText, hasNarration, hasPrompt, i18n, prompt, submitUp, title) {
buf.push("<div class=\"content content-scroll block-h-xl pull-left\"><div class=\"block-v-xl\"><h1 class=\"slide-up\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1></div></div><div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/question-pool/view.coffee", function(exports, require, module) {
var QuestionPoolView, SlideView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SlideView = require("views/slide");

QuestionPoolView = (function(superClass) {
  extend(QuestionPoolView, superClass);

  function QuestionPoolView() {
    return QuestionPoolView.__super__.constructor.apply(this, arguments);
  }

  QuestionPoolView.prototype.template = require("./template");

  QuestionPoolView.prototype.events = {
    "iostap .btn-done": "submit"
  };

  return QuestionPoolView;

})(SlideView);

module.exports = QuestionPoolView;
});

;require.register("engine/ratio/model.yaml", function(exports, require, module) {
module.exports = {"title":"ratio","display":"Ratio","category":"Numbers","features":{"stars":true,"social":true},"model":{"title":{"type":"html","default":"Choose the correct ratios"},"ratio":{"bars":{"min":1,"max":4,"type":[{"title":{"type":"html"},"value":{"type":"number","default":0}}]},"total":{"type":"number","default":100,"display":"Total Value of All Bars"},"prefix":{"type":"html","default":""},"suffix":{"type":"html","default":"%"},"increment":{"type":"number","default":1},"independent":{"type":"boolean","default":false,"display":"Allow bars to move freely and total any number"}},"answer":{"text":{"type":"html","default":"","display":"Answer Text"},"correct":{"type":"html","default":"That's correct!","display":"Correct Reinforcement"},"incorrect":{"type":"html","default":"Not quite...","display":"Incorrect Reinforcement"},"takeaway":{"type":"html","default":"","display":"Core Message"}},"game":{"timer":{"limit":{"type":"number","default":-1,"display":"Time Limit (seconds)"},"out-of-time-prompt":{"type":"html","display":"Out of time prompt"}}},"prompt":{"type":"html","default":"Drag to set the correct value"},"doneText":{"type":"html","default":"Continue","display":"Done text"}},"examples":[{"subtype":"multiple-independent","title":"What is the price of each product?","ratio":{"increment":1,"prefix":"$5.","suffix":"0","total":9,"independent":true,"bars":[{"title":"Product X","value":7},{"title":"Product Y","value":2},{"title":"Product Z","value":5}]},"answer":{"text":"Ratio can be used to ask the same number question for several different items at once.\n"}},{"subtype":"single","title":"What are the reported satisfaction levels for users of Product Z?","ratio":{"independent":true,"increment":20,"bars":[{"title":"Satisfaction levels","value":80}]},"answer":{"text":"Ratio can be used to ask a basic number question."}},{"subtype":"multiple-dependant","title":"When making Product Y, what ratio of milk to water should you use?","ratio":{"suffix":"ml","total":30,"increment":10,"bars":[{"title":"Milk","value":20},{"title":"Water","value":10}]},"answer":{"text":"You can use Ratio to ask questions about the ratio of one value in relation to another.\n"}}]}
});

;require.register("engine/ratio/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (continueBtnText, doneText, game, hasNarration, hasPrompt, i18n, prompt, ratio, submitUp, title, undefined) {
if ( game && game.timer && game.timer.limit > 0 && !game.timer.isDisabled)
{
buf.push("<div class=\"full-screen\"><div class=\"game-stepper text-lg text-bold\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div></div>");
}
buf.push("<div class=\"content-fill\"><div class=\"content-fit block-v-xl content-lg-fill content-md-ver content-sm-ver\"><div class=\"row content-md-fill\"><div class=\"col-lg-6 col-sm-12 content-lg-ver block-v-sm\"><h1 class=\"text-lg-right text-md-center text-sm-center fade-in\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1></div><div class=\"col-lg-6 col-sm-12 content-lg-ver\">");
// iterate ratio.bars
;(function(){
  var $$obj = ratio.bars;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var bar = $$obj[i];

buf.push("<div" + (jade.cls(['text-lg','block-v-sm','slide-up',"delay-" + (i + 1) + ""], [null,null,null,true])) + "><div class=\"ratio-title pull-left block-v-sm\">" + (null == (jade_interp = bar.title) ? "" : jade_interp) + "</div><div" + (jade.attr("data-answer-id", i, true, false)) + " class=\"ratio\"><div class=\"ratio-bar-container block-dk\"><div class=\"ratio-bar\"></div></div><div class=\"ratio-value\"><div class=\"ratio-value-amount pull-right\">&hellip;</div></div></div></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var bar = $$obj[i];

buf.push("<div" + (jade.cls(['text-lg','block-v-sm','slide-up',"delay-" + (i + 1) + ""], [null,null,null,true])) + "><div class=\"ratio-title pull-left block-v-sm\">" + (null == (jade_interp = bar.title) ? "" : jade_interp) + "</div><div" + (jade.attr("data-answer-id", i, true, false)) + " class=\"ratio\"><div class=\"ratio-bar-container block-dk\"><div class=\"ratio-bar\"></div></div><div class=\"ratio-value\"><div class=\"ratio-value-amount pull-right\">&hellip;</div></div></div></div>");
    }

  }
}).call(this);

buf.push("</div></div></div></div><div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"game" in locals_for_with?locals_for_with.game:typeof game!=="undefined"?game:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"ratio" in locals_for_with?locals_for_with.ratio:typeof ratio!=="undefined"?ratio:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/ratio/view.coffee", function(exports, require, module) {
var DraggyView, GameView, RatioView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

GameView = require("views/base/game");

DraggyView = require("views/components/draggy").DraggyView;

RatioView = (function(superClass) {
  extend(RatioView, superClass);

  function RatioView() {
    return RatioView.__super__.constructor.apply(this, arguments);
  }

  RatioView.prototype.template = require("./template");

  RatioView.prototype.events = {
    "iostap .btn-done": "endGame"
  };

  RatioView.prototype.show = function() {
    RatioView.__super__.show.apply(this, arguments);
    this.listenTo(this, "resize", this.onResize);
    this.setEl(this.findAll(".ratio"), "bars");
    this.createDraggies();
    return this.enterGame();
  };

  RatioView.prototype.onResize = function() {
    var ref;
    if (!(((ref = this.draggies) != null ? ref.length : void 0) > 0)) {
      return;
    }
    window.clearTimeout(this.timeout);
    return this.timeout = window.setTimeout(((function(_this) {
      return function() {
        var draggy, i, initialX, j, len, ref1, results, totalWidth;
        if (_this.currentState.state === "prompt") {
          totalWidth = _this.getEl("bars").item(0).offsetWidth;
          initialX = _this.options.data.ratio.independent ? totalWidth / 2 : totalWidth / _this.getEl("bars").length;
        }
        ref1 = _this.draggies;
        results = [];
        for (i = j = 0, len = ref1.length; j < len; i = ++j) {
          draggy = ref1[i];
          draggy.getOffset();
          draggy.options.maxX = draggy.offset.totalWidth;
          if (initialX) {
            results.push(draggy.reset({
              x: initialX
            }));
          } else {
            results.push(void 0);
          }
        }
        return results;
      };
    })(this)), 600);
  };

  RatioView.prototype.serialize = function() {
    var answers, data, increment, ref, total;
    data = RatioView.__super__.serialize.apply(this, arguments);
    ref = data.ratio, total = ref.total, increment = ref.increment;
    data.ratio.total = parseFloat(total, 10) || 100;
    data.ratio.increment = parseFloat(increment, 10) || 1;
    data.ratio.bars = _.filter(data.ratio.bars, function(b) {
      return (b != null ? b.title : void 0) && (b != null ? b.value : void 0);
    });
    if (data.ratio.bars.length === 1) {
      data.ratio.independent = true;
    }
    answers = data.metadata.questions.map(function(q) {
      return q.answers.map(function(a) {
        return {
          content: a.content,
          correct: a.correct,
          id: a.id
        };
      });
    });
    data.answers = answers;
    return data;
  };

  RatioView.prototype.createDraggies = function() {
    var draggy, el, initialX, totalWidth;
    totalWidth = this.getEl("bars").item(0).offsetWidth || this.serialize().width;
    initialX = this.options.data.ratio.independent ? totalWidth / 2 : totalWidth / this.getEl("bars").length;
    this.draggies = (function() {
      var j, len, ref, results;
      ref = this.getEl("bars");
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        el = ref[j];
        draggy = new DraggyView({
          el: el,
          minX: 0,
          maxX: totalWidth,
          isParent: true,
          barElement: el.querySelector(".ratio-bar"),
          valElement: el.querySelector(".ratio-value-amount")
        });
        this.listenTo(draggy, "drag", this.onDrag);
        this.listenTo(draggy, "drop", this.onDrop);
        draggy.reset({
          x: initialX,
          y: 0
        });
        results.push(draggy);
      }
      return results;
    }).call(this);
    return this.snapBars();
  };

  RatioView.prototype.onDrag = function(draggy, isInitial) {
    this.currentDraggy = draggy;
    this.setState("touched");
    this.renderDraggy(draggy, isInitial);
    if (!this.options.data.ratio.independent) {
      return this.updateDraggies(draggy, isInitial);
    }
  };

  RatioView.prototype.onDrop = function(draggy, isReset) {
    if (isReset) {
      return this.renderDraggy(draggy, true);
    } else {
      return this.snapBars();
    }
  };

  RatioView.prototype.getPercent = function(draggy) {
    var percent;
    if (draggy == null) {
      draggy = this.draggies[0];
    }
    percent = Math.max(Math.min((draggy.x / draggy.offset.width) || 0, 1), 0.0001);
    if (this.options.config().direction === "rtl") {
      percent = 1 - percent;
    }
    return percent;
  };

  RatioView.prototype.getLabel = function(draggy) {
    var prefix, ref, suffix;
    ref = this.options.data.ratio, prefix = ref.prefix, suffix = ref.suffix;
    return "" + prefix + (this.getValue(draggy)) + suffix;
  };

  RatioView.prototype.getValue = function(draggy) {
    var increment, percent, ref, total;
    ref = this.options.data.ratio, total = ref.total, increment = ref.increment;
    percent = this.getPercent(draggy);
    return Math.round(total * percent / increment) * increment;
  };

  RatioView.prototype.renderDraggy = function(draggy, transition) {
    this.transform(draggy.options.barElement, {
      scale: (this.getPercent(draggy)) + ", 1",
      transition: transition ? "all 300ms" : ""
    });
    return draggy.options.valElement.innerHTML = this.getLabel(draggy);
  };

  RatioView.prototype.updateDraggies = function(draggy, transition) {
    var current, currentTotal, i, j, len, otherDraggies, otherDraggy, percent, remainder, results, x;
    remainder = 1 - this.getPercent(draggy);
    otherDraggies = _.filter(this.draggies, function(d) {
      return d !== draggy;
    });
    currentTotal = _.reduce(otherDraggies, ((function(_this) {
      return function(m, d) {
        return m + _this.getPercent(d);
      };
    })(this)), 0);
    results = [];
    for (i = j = 0, len = otherDraggies.length; j < len; i = ++j) {
      otherDraggy = otherDraggies[i];
      current = this.getPercent(otherDraggy);
      percent = current / currentTotal * remainder;
      if (this.options.config().direction === "rtl") {
        percent = 1 - percent;
      }
      x = percent * otherDraggy.offset.width;
      otherDraggy.reset({
        x: x
      }, {
        silent: true
      });
      results.push(this.renderDraggy(otherDraggy, transition));
    }
    return results;
  };

  RatioView.prototype.snapBars = function() {
    var draggy, i, j, len, percent, ref, results, subtotal, total, value, x;
    subtotal = 0;
    total = this.options.data.ratio.total;
    ref = this.draggies;
    results = [];
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      draggy = ref[i];
      value = this.getValue(draggy);
      subtotal += value;
      if (i === this.draggies.length - 1 && !this.options.data.ratio.independent) {
        value -= subtotal - total;
      }
      percent = value / total;
      if (this.options.config().direction === "rtl") {
        percent = 1 - percent;
      }
      x = Math.floor(percent * draggy.offset.width);
      results.push(draggy.reset({
        x: x
      }));
    }
    return results;
  };

  RatioView.prototype.isCorrect = function() {
    return _.chain(this.options.data.ratio.bars).filter((function(_this) {
      return function(b, i) {
        return b.value !== _this.getValue(_this.draggies[i]);
      };
    })(this)).isEmpty().value();
  };

  RatioView.prototype.showAnswer = function() {
    var bars, draggy, i, isCorrect, j, len, percent, ref, results, total, value;
    ref = this.options.data.ratio, bars = ref.bars, total = ref.total;
    results = [];
    for (i = j = 0, len = bars.length; j < len; i = ++j) {
      value = bars[i].value;
      draggy = this.draggies[i];
      isCorrect = this.getValue(draggy) === value;
      percent = value / total;
      if (this.options.config().direction === "rtl") {
        percent = 1 - percent;
      }
      draggy.el.parentNode.classList.toggle("correct", isCorrect);
      draggy.el.parentNode.classList.toggle("incorrect", !isCorrect);
      results.push(draggy.reset({
        x: draggy.offset.width * percent
      }));
    }
    return results;
  };

  RatioView.prototype.answerDetails = function() {
    var answer, correct, correctAnswer, details, j, len, q, questionDetails, questions, ref, selectedDraggy, selectedRatioElement, value;
    questions = ((ref = this.options.metadata) != null ? ref.questions : void 0) || [];
    if (!(questions.length > 0)) {
      return [];
    }
    details = [];
    for (j = 0, len = questions.length; j < len; j++) {
      q = questions[j];
      selectedRatioElement = _.find(this.$(".ratio"), function(r) {
        return this.$(r).data("answer-id") === questions.indexOf(q);
      });
      selectedDraggy = _.find(this.draggies, function(d) {
        return d.el === selectedRatioElement;
      });
      value = this.getValue(selectedDraggy);
      correctAnswer = _.find(q.answers, function(a) {
        return a.correct;
      });
      correct = correctAnswer.content === value;
      answer = _.find(q.answers, function(a) {
        return a.correct === correct;
      });
      questionDetails = {
        question: q.question,
        answer: answer
      };
      questionDetails.answer.content = value;
      details.push(questionDetails);
    }
    return details;
  };

  RatioView.prototype.endGame = function() {
    RatioView.__super__.endGame.apply(this, arguments);
    return this.submit();
  };

  return RatioView;

})(GameView);

module.exports = RatioView;
});

;require.register("engine/reorder/model.yaml", function(exports, require, module) {
module.exports = {"title":"reorder","display":"Reorder","category":"Relationships","features":{"stars":true,"social":true},"model":{"title":{"default":"Rank these items","types":["text","image","video","audio"]},"list":{"display":"List items","type":[{"type":"html"}],"min":2,"max":6},"answer":{"text":{"type":"html","default":"","display":"Answer Text"},"correct":{"type":"html","default":"That's correct!","display":"Correct Reinforcement"},"incorrect":{"type":"html","default":"Not quite...","display":"Incorrect Reinforcement"},"takeaway":{"type":"html","default":"","display":"Core Message"}},"game":{"timer":{"limit":{"type":"number","default":-1,"display":"Time Limit (seconds)"},"out-of-time-prompt":{"type":"html","display":"Out of time prompt"}}},"prompt":{"type":"html","default":"Put the items in the correct order"},"doneText":{"type":"html","default":"Continue","display":"Done text"}},"examples":[{"subtype":"cities","title":"Rank these cities by population","titleType":"text","list":["Tokyo","New York","Sydney","Paris"],"answer":{"text":"Tokyo has almost nine million inhabitants in the city alone, and 13 million in the Greater Tokyo region. In fact, the number of residents in the Japanese capital is greater then the combined population of the next three largest cities Yokohama, Osaka and Nagoya.\n"}},{"subtype":"brands","title":"Order these brands by market share","titleType":"text","list":["Nike","Adidas","Reebok"],"answer":{"text":"According to several sources, Nike has more than 30% market share.\n"}}]}
});

;require.register("engine/reorder/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (config, continueBtnText, doneText, game, hasNarration, hasPrompt, i18n, isLong, list, playinline, prompt, shuffledList, submitUp, undefined) {
jade_mixins["video-stream"] = jade_interp = function(videoUrl, playsinline, controls, klass, poster){
var block = (this && this.block), attributes = (this && this.attributes) || {};
playinline = playinline || true
controls = controls || true
klass = klass || 'video vjs-fluid'
var cloudinaryVideoFolderUrl = config.CLOUDINARY_CDN_URL+config.CLOUDINARY_VIDEO_FOLDER
var streamUrl = ''
if ( videoUrl && videoUrl.indexOf(cloudinaryVideoFolderUrl) > -1)
{
streamUrl = videoUrl.replace(cloudinaryVideoFolderUrl, cloudinaryVideoFolderUrl+'sp_full_hd/')
streamUrl = streamUrl.replace('.mp4', '.m3u8')
}
buf.push("<video" + (jade.attr("webkit-playsinline", playsinline, true, false)) + (jade.attr("controls", controls, true, false)) + " preload=\"auto\"" + (jade.attr("dir", config.direction, true, false)) + (jade.attr("poster", poster, true, false)) + (jade.cls(['video-js',klass], [null,true])) + "><source" + (jade.attr("src", videoUrl, true, false)) + "/>");
if ( streamUrl)
{
buf.push("<source" + (jade.attr("src", streamUrl, true, false)) + "/>");
}
buf.push("</video>");
};
jade_mixins["image"] = jade_interp = function(imageUrl, klass){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<img" + (jade.attr("src", imageUrl, true, false)) + (jade.cls([klass], [true])) + "/>");
};
jade_mixins["multi-content"] = jade_interp = function(prop, obj){
var block = (this && this.block), attributes = (this && this.attributes) || {};
obj = obj || locals;
switch (obj[prop + "Type"]){
case "image":
buf.push("<div" + (jade.attr("data-content", obj.image, true, false)) + " class=\"multi-content-wrapper multi-content-wrapper-image block-md block-lt\"><div class=\"block-sm multi-content-media\">");
jade_mixins["image"](obj[prop], 'multi-content multi-content-image');
buf.push("</div></div>");
  break;
case "video":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-video block-md block-lt\"><div class=\"block-sm multi-content-media\">");
jade_mixins["video-stream"](obj[prop], true, true,"multi-content multi-content-video block-dk");
buf.push("</div></div>");
  break;
case "audio":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-audio block-md block-lt\"><div class=\"block-sm multi-content-media\"><audio" + (jade.attr("src", obj[prop], true, false)) + " playsinline=\"playsinline\" preload=\"auto\" controls=\"controls\"" + (jade.attr("dir", config.direction, true, false)) + " class=\"multi-content multi-content-audio block-dk\"></audio></div></div>");
  break;
case "iframe":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-iframe block-md block-lt\"><div class=\"block-sm multi-content-iframe\">");
var iframe = obj[prop].match(/<iframe[^<]*<\/iframe>/)
if ( iframe)
{
buf.push(null == (jade_interp = iframe[0].replace(/ (width|height)=["'\d\w]+/g, "")) ? "" : jade_interp);
}
buf.push("</div></div>");
  break;
default:
buf.push("<span class=\"multi-content multi-content-text\">" + (null == (jade_interp = obj[prop]) ? "" : jade_interp) + "</span>");
  break;
}
};
if ( game && game.timer && game.timer.limit > 0 && !game.timer.isDisabled)
{
buf.push("<div class=\"full-screen\"><div class=\"game-stepper text-lg text-bold\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div></div>");
}
buf.push("<div class=\"content-fill\"><div class=\"content-fit content-fill block-v-lg\"><div class=\"row content-lg-fill content-sm-ver content-md-ver\"><div class=\"col-lg-6 col-sm-12 content-lg-ver block-v-md\"><h1 class=\"text-lg-right text-md-center text-sm-center fade-in\">");
jade_mixins["multi-content"]("title");
buf.push("</h1></div><div class=\"col-lg-6 col-sm-12 text-center content-lg-ver block-v-md\"><div class=\"draggy-container fade-in block-md block-dk\"><div class=\"draggies\">");
// iterate shuffledList
;(function(){
  var $$obj = shuffledList;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var item = $$obj[$index];

buf.push("<div" + (jade.attr("data-index", list.indexOf(item), true, false)) + (jade.attr("data-content", item, true, false)) + " class=\"draggy block-sm\"><div" + (jade.cls(['btn','btn-solid','btn-block',((isLong ? "btn-long" : "") +
                         (list.length > 4 ? " btn-sm" : ""))], [null,null,null,true])) + ">" + (null == (jade_interp = item) ? "" : jade_interp) + "</div></div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var item = $$obj[$index];

buf.push("<div" + (jade.attr("data-index", list.indexOf(item), true, false)) + (jade.attr("data-content", item, true, false)) + " class=\"draggy block-sm\"><div" + (jade.cls(['btn','btn-solid','btn-block',((isLong ? "btn-long" : "") +
                         (list.length > 4 ? " btn-sm" : ""))], [null,null,null,true])) + ">" + (null == (jade_interp = item) ? "" : jade_interp) + "</div></div>");
    }

  }
}).call(this);

buf.push("</div></div></div></div></div></div><div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"game" in locals_for_with?locals_for_with.game:typeof game!=="undefined"?game:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"isLong" in locals_for_with?locals_for_with.isLong:typeof isLong!=="undefined"?isLong:undefined,"list" in locals_for_with?locals_for_with.list:typeof list!=="undefined"?list:undefined,"playinline" in locals_for_with?locals_for_with.playinline:typeof playinline!=="undefined"?playinline:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"shuffledList" in locals_for_with?locals_for_with.shuffledList:typeof shuffledList!=="undefined"?shuffledList:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/reorder/view.coffee", function(exports, require, module) {
var DraggyView, GameView, Prefix, ReorderView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

GameView = require("views/base/game");

Prefix = require("lib/prefix");

DraggyView = require("views/components/draggy").DraggyView;

ReorderView = (function(superClass) {
  extend(ReorderView, superClass);

  function ReorderView() {
    return ReorderView.__super__.constructor.apply(this, arguments);
  }

  ReorderView.prototype.template = require("./template");

  ReorderView.prototype.events = {
    "iostap .btn-done": "endGame"
  };

  ReorderView.prototype.serialize = function() {
    var data, longest;
    data = ReorderView.__super__.serialize.apply(this, arguments);
    longest = _.chain(data.list).sortBy("length").last().value();
    data.isLong = (longest != null ? longest.length : void 0) > Math.min(data.width / 16, 30);
    data.shuffledList = _.shuffle(data.list || []);
    return data;
  };

  ReorderView.prototype.show = function() {
    var draggies, draggy, el, i, j, len1, ref;
    ReorderView.__super__.show.apply(this, arguments);
    this.listenTo(this, "resize", this.onResize);
    if (this.draggies) {
      ref = this.draggies;
      for (j = 0, len1 = ref.length; j < len1; j++) {
        draggy = ref[j];
        draggy.undelegateEvents();
      }
      this.draggies = null;
    }
    draggies = this.findAll(".draggy");
    this.setEl(this.findOne(".draggy-container"), "container");
    this.draggies = (function() {
      var k, len2, results;
      results = [];
      for (i = k = 0, len2 = draggies.length; k < len2; i = ++k) {
        el = draggies[i];
        el.style.position = "absolute";
        draggy = new DraggyView({
          el: el,
          lock: "x",
          minY: 0
        });
        this.listenTo(draggy, "drag", this.onDrag);
        this.listenTo(draggy, "drop", this.onDrop);
        results.push(draggy);
      }
      return results;
    }).call(this);
    this.onResize();
    this.resetDraggies(this.draggies);
    return this.enterGame();
  };

  ReorderView.prototype.hide = function() {
    this.el.classList.remove("ready");
    return ReorderView.__super__.hide.apply(this, arguments);
  };

  ReorderView.prototype.onDrag = function(draggy, isInitialDrag) {
    var isActive, rank;
    isActive = false;
    rank = this.getRanking(draggy);
    this.resetDraggies(this.draggiesInOrder(this.draggies), draggy);
    return this.transform(draggy.el, {
      y: draggy.y,
      scale: 1.05,
      transition: isInitialDrag ? "all 300ms" : "none"
    });
  };

  ReorderView.prototype.onDrop = function(draggy, isReset) {
    var height, left, rank, ref, top, width;
    ref = draggy.offset, left = ref.left, top = ref.top, width = ref.width, height = ref.height;
    rank = this.getRanking(draggy);
    if (isReset) {
      return this.transform(draggy.el, {
        y: draggy.y,
        transition: "all 300ms"
      });
    } else {
      this.resetDraggies(this.draggiesInOrder(this.draggies));
      return this.setState("touched");
    }
  };

  ReorderView.prototype.draggiesInOrder = function(draggies) {
    var height, ref;
    if (draggies && (height = (ref = draggies[0]) != null ? ref.el.parentNode.offsetHeight : void 0)) {
      return _.clone(draggies).sort(function(a, b) {
        return (a.y + a.y / height * a.offset.height) - (b.y + b.y / height * b.offset.height);
      });
    }
  };

  ReorderView.prototype.getRanking = function(draggy) {
    var len, num;
    len = this.options.data.list.length;
    num = Math.floor(draggy.y / draggy.options.maxY * len);
    return _.limit(num, 0, len - 1);
  };

  ReorderView.prototype.getDraggyFromIndex = function(index) {
    var draggy;
    return ((function() {
      var j, len1, ref, results;
      ref = this.draggies;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        draggy = ref[j];
        if (draggy.el.dataset.index === index) {
          results.push(draggy);
        }
      }
      return results;
    }).call(this))[0];
  };

  ReorderView.prototype.getElements = function(selector) {
    var el, j, len1, ref, results;
    ref = this.findAll(selector);
    results = [];
    for (j = 0, len1 = ref.length; j < len1; j++) {
      el = ref[j];
      results.push({
        el: el,
        bounds: el.getBoundingClientRect()
      });
    }
    return results;
  };

  ReorderView.prototype.resetDraggy = function(draggy) {
    draggy.reset();
    return draggy.el.classList.remove("is-positioned");
  };

  ReorderView.prototype.resetDraggies = function(draggies, draggy) {
    var i, j, len1, other, ref, results, y;
    y = 0;
    ref = draggies || [];
    results = [];
    for (i = j = 0, len1 = ref.length; j < len1; i = ++j) {
      other = ref[i];
      if (other !== draggy) {
        other.reset({
          y: y
        });
      }
      results.push(y += other.offset.height);
    }
    return results;
  };

  ReorderView.prototype.isCorrect = function() {
    return _.chain(this.draggiesInOrder(this.draggies)).filter(function(d, i) {
      return +d.el.dataset.index === i;
    }).each(function(d) {
      return d.el.classList.add("correct");
    }).size().value() === this.options.data.list.length;
  };

  ReorderView.prototype.showAnswer = function() {
    return this.resetDraggies(_.sortBy(this.draggies, function(d) {
      return +d.el.dataset.index;
    }));
  };

  ReorderView.prototype.onResize = function() {
    var fontSize, height, reducer, ref;
    if (!(((ref = this.draggies) != null ? ref.length : void 0) > 0)) {
      return;
    }
    reducer = function(m, arg) {
      var el;
      el = arg.el;
      return m + el.offsetHeight;
    };
    height = _.reduce(this.draggies, reducer, 0);
    fontSize = parseInt(window.getComputedStyle(this.el).fontSize);
    this.getEl("container").firstChild.style.height = (height / fontSize) + "em";
    return this.fitText((function(_this) {
      return function() {
        var draggy, i, j, len1, ref1;
        height = _.reduce(_this.draggies, reducer, 0);
        _this.getEl("container").firstChild.style.height = height + "px";
        ref1 = _this.draggies;
        for (i = j = 0, len1 = ref1.length; j < len1; i = ++j) {
          draggy = ref1[i];
          draggy.options.maxY = height - draggy.el.offsetHeight;
          draggy.getOffset();
        }
        _this.resetDraggies(_this.draggiesInOrder(_this.draggies));
        return _this.el.classList.add("ready");
      };
    })(this));
  };

  ReorderView.prototype.answerDetails = function() {
    var answer, answerContent, details, isCorrect, question, questions, ref;
    questions = ((ref = this.options.metadata) != null ? ref.questions : void 0) || [];
    if (!(questions.length > 0)) {
      return [];
    }
    question = questions[0];
    isCorrect = this.isCorrect();
    answer = _.find(question.answers, function(a) {
      return a.correct === isCorrect;
    });
    answerContent = _.map(this.draggiesInOrder(this.draggies), function(d) {
      return d.$el.data("content");
    });
    answer.content = answerContent.join(", ");
    details = {
      question: questions[0].question,
      answer: answer
    };
    return [details];
  };

  ReorderView.prototype.endGame = function() {
    ReorderView.__super__.endGame.apply(this, arguments);
    return this.submit();
  };

  return ReorderView;

})(GameView);

module.exports = ReorderView;
});

;require.register("engine/reveal/model.yaml", function(exports, require, module) {
module.exports = {"title":"reveal","display":"Reveal","category":"Content","description":"Flip cards to reveal more details","features":{"narration":true,"social":true},"model":{"title":{"type":"html","default":"Explore our range"},"content":{"min":1,"max":4,"type":[{"title":{"type":"html"},"description":{"type":"html"}}]},"focus":{"type":"boolean","default":false,"help":"Only reveal one piece of content at a time.\n"},"prompt":{"type":"html","default":"Select each item to find out more"},"doneText":{"type":"html","default":"Continue","display":"Done text"}},"examples":[{"subtype":"reveal","title":"Learn more about our product range","focus":true,"content":[{"title":"Product X","description":"Our brilliant new sleek design allows the user to have unparalleled comfort when using the device.\n"},{"title":"Product Y","description":"Crystal clear display performs better than any of our competitors.\n"},{"title":"Product Z","description":"The newest feature offers a new level of feedback for the user.\n"}]}]}
});

;require.register("engine/reveal/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (Math, content, continueBtnText, doneText, hasNarration, hasPrompt, i18n, isInternetExplorer, prompt, submitUp, title, undefined, written) {
buf.push("<div class=\"content-fit content-md-fill content-sm-ver\"><div class=\"content-md-ver text-center\"><h1 class=\"fade-in delay-3\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"content-pieces row text-center\">");
// iterate content
;(function(){
  var $$obj = content;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var piece = $$obj[i];

var col = Math.floor(12 / content.length);
if ( content.length === 1)
{
var klass = "col-md-8";
}
else
{
var klass = "col-md-" + col * 2 + " col-lg-" + col
}
klass += " delay-" + (i + 3);
buf.push("<div" + (jade.cls(['content-piece','slide-up','col-sm-12','block-v-sm',klass], [null,null,null,null,true])) + "><div" + (jade.attr("data-index", i, true, false)) + " class=\"btn-reveal\"><div" + (jade.cls(['btn-reveal-title','btn','btn-solid',isInternetExplorer ? "ie" : "flippable"], [null,null,null,true])) + "><h2 class=\"tight content-ver break-word\">" + (null == (jade_interp = written.hyphenate(piece.title)) ? "" : jade_interp) + "</h2></div><div" + (jade.cls(['btn-reveal-desc','block-v-md','block-h-lg','btn','btn-solid',isInternetExplorer ? "ie" : "flippable"], [null,null,null,null,null,true])) + ">" + (null == (jade_interp = written.hyphenate(piece.description) || "&nbsp;") ? "" : jade_interp) + "</div></div></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var piece = $$obj[i];

var col = Math.floor(12 / content.length);
if ( content.length === 1)
{
var klass = "col-md-8";
}
else
{
var klass = "col-md-" + col * 2 + " col-lg-" + col
}
klass += " delay-" + (i + 3);
buf.push("<div" + (jade.cls(['content-piece','slide-up','col-sm-12','block-v-sm',klass], [null,null,null,null,true])) + "><div" + (jade.attr("data-index", i, true, false)) + " class=\"btn-reveal\"><div" + (jade.cls(['btn-reveal-title','btn','btn-solid',isInternetExplorer ? "ie" : "flippable"], [null,null,null,true])) + "><h2 class=\"tight content-ver break-word\">" + (null == (jade_interp = written.hyphenate(piece.title)) ? "" : jade_interp) + "</h2></div><div" + (jade.cls(['btn-reveal-desc','block-v-md','block-h-lg','btn','btn-solid',isInternetExplorer ? "ie" : "flippable"], [null,null,null,null,null,true])) + ">" + (null == (jade_interp = written.hyphenate(piece.description) || "&nbsp;") ? "" : jade_interp) + "</div></div></div>");
    }

  }
}).call(this);

buf.push("</div></div></div><div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"Math" in locals_for_with?locals_for_with.Math:typeof Math!=="undefined"?Math:undefined,"content" in locals_for_with?locals_for_with.content:typeof content!=="undefined"?content:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"isInternetExplorer" in locals_for_with?locals_for_with.isInternetExplorer:typeof isInternetExplorer!=="undefined"?isInternetExplorer:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined,"written" in locals_for_with?locals_for_with.written:typeof written!=="undefined"?written:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/reveal/view.coffee", function(exports, require, module) {
var RevealView, SlideView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SlideView = require("views/slide");

RevealView = (function(superClass) {
  extend(RevealView, superClass);

  function RevealView() {
    return RevealView.__super__.constructor.apply(this, arguments);
  }

  RevealView.prototype.template = require("./template");

  RevealView.prototype.events = {
    "iostap .btn-reveal": "toggleContent",
    "iostap .btn-done": "submit"
  };

  RevealView.prototype.serialize = function() {
    var data;
    data = RevealView.__super__.serialize.apply(this, arguments);
    data.hasPrompt = true;
    data.isInternetExplorer = navigator.userAgent.indexOf('MSIE') !== -1 || navigator.appVersion.indexOf('Trident/') > -1;
    return data;
  };

  RevealView.prototype.show = function(ms) {
    if (ms == null) {
      ms = 300;
    }
    this.listenTo(this, "resize", function() {
      return this.resetButtons;
    });
    this.setEl(this.findAll(".btn-reveal"), "buttons");
    return this.selectedIndexes = [];
  };

  RevealView.prototype.refresh = function(params) {
    var changed, description, i, j, len, ref, ref1;
    ref = params.data.content;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      description = ref[i].description;
      if (((ref1 = this.options.data.content[i]) != null ? ref1.description : void 0) !== description) {
        changed = i;
      }
    }
    RevealView.__super__.refresh.apply(this, arguments);
    this.selectedIndexes = [];
    return this.resetButtons(changed);
  };

  RevealView.prototype.resetButtons = function(activeIndex) {
    var el, i, j, len, ref, results;
    this.setEl(this.findAll(".btn-reveal"), "buttons");
    if (activeIndex != null) {
      el = this.getEl("buttons").item(activeIndex);
      this.transition(el, "none", true);
      el.classList.add("active");
    }
    ref = this.getEl("buttons");
    results = [];
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      el = ref[i];
      el.style.height = "";
      el.offsetHeight;
      results.push(this.transition(el, ""));
    }
    return results;
  };

  RevealView.prototype.resizeButtons = function() {
    var el, height, j, len, ref, results;
    height = _.reduce(this.getEl("buttons"), function(m, el) {
      return Math.max(el.offsetHeight, el.firstChild.firstChild.offsetHeight, m);
    }, 0);
    ref = this.getEl("buttons");
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      el = ref[j];
      results.push(el.style.height = height + "px");
    }
    return results;
  };

  RevealView.prototype.toggleContent = function(e) {
    var el, index, j, len, other, ref;
    el = e.currentTarget;
    index = el.dataset.index;
    this.selectedIndexes = _.uniq(this.selectedIndexes.concat(index));
    if (this.selectedIndexes.length === this.serialize().content.length) {
      this.setState("touched");
    }
    if (this.options.data.focus) {
      ref = this.getEl("buttons");
      for (j = 0, len = ref.length; j < len; j++) {
        other = ref[j];
        if (other !== el) {
          other.classList.remove("active");
        }
      }
    }
    return el.classList.toggle("active");
  };

  return RevealView;

})(SlideView);

module.exports = RevealView;
});

;require.register("engine/scorm/model.yaml", function(exports, require, module) {
module.exports = {"title":"scorm","display":"SCORM","category":"Advanced","description":"Play a SCORM Package","hideFrom":["freemium","sponsor"],"features":{"stars":true},"model":{"package":{"type":"scorm","default":"scorm/scorm.zip","display":"SCORM File","help":"Upload your SCORM package."},"isRequiredForLessonCompletion":{"type":"boolean","display":"Required Content","default":true,"help":"The learner must complete the SCORM content before the lesson is marked as complete.\n"},"background":{"type":"string","default":"","display":"Background Color","help":"This color (eg. \"orange\", \"#f90\", \"rgb(255,160,0)\") will be used for the background of the entire screen in lightbox mode.\n"},"button":{"text":{"type":"text","default":"Continue","display":"Done text"},"position":{"type":"select","enum":["Below","Overlay Bottom","Overlay Top","None"],"default":"Below","help":"Choose the best position based on your content. If you choose not to display the button, your SCORM content must allow the learner to exit, or they will not be able to continue.\n"}}}}
});

;require.register("engine/scorm/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (allowedSandboxedFeatures, button, i18n) {
buf.push("<div class=\"full-screen content-fill hide-overflow\"><iframe type=\"text/html\" frameborder=\"0\"" + (jade.attr("sandbox", allowedSandboxedFeatures, true, false)) + " class=\"scorm-object\"></iframe><div class=\"exit-btn btn\">" + (jade.escape(null == (jade_interp = (button && button.text) || i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");}.call(this,"allowedSandboxedFeatures" in locals_for_with?locals_for_with.allowedSandboxedFeatures:typeof allowedSandboxedFeatures!=="undefined"?allowedSandboxedFeatures:undefined,"button" in locals_for_with?locals_for_with.button:typeof button!=="undefined"?button:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/scorm/view.coffee", function(exports, require, module) {
var Device, Lesson, SCORMView, ScormAttempt, Session, SlideView, ref,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SlideView = require("views/slide");

ScormAttempt = require("models/scormAttempt");

Device = require("lib/device");

ref = Application.actions(), Session = ref.Session, Lesson = ref.Lesson;

SCORMView = (function(superClass) {
  extend(SCORMView, superClass);

  function SCORMView() {
    return SCORMView.__super__.constructor.apply(this, arguments);
  }

  SCORMView.prototype.template = require("./template");

  SCORMView.prototype.events = function() {
    return {
      "iostap .exit-btn": "stopSCORM"
    };
  };

  SCORMView.prototype.initialize = function() {
    SCORMView.__super__.initialize.apply(this, arguments);
    Session.get((function(_this) {
      return function(err, arg) {
        var email, firstName, id, lastName, name, studentName;
        firstName = arg.firstName, lastName = arg.lastName, email = arg.email, name = arg.name, id = arg.id;
        studentName = ((firstName || '') + ' ' + (lastName || '')).trim() || name || email || '';
        return _this.scormAttempt = new ScormAttempt("lessonId", false, studentName, id, _this.options.previousAttempt);
      };
    })(this));
    return this.isLastSlide = this.options.isLastSlide;
  };

  SCORMView.prototype.processIframeMessage = function(event) {
    var ref1;
    if (event != null ? (ref1 = event.data) != null ? typeof ref1.match === "function" ? ref1.match("window.SCORMED") : void 0 : void 0 : void 0) {
      return eval(event.data);
    }
  };

  SCORMView.prototype.beforeShow = function() {
    var position, ref1, ref2;
    position = ((ref1 = this.options.data.button) != null ? (ref2 = ref1.position) != null ? ref2.toLowerCase() : void 0 : void 0) || "none";
    this.setState(written.hyphenCase(position), "exit-btn");
    this.trigger("ui", {
      lightbox: this.options.data.background || true,
      fullscreen: true
    });
    return this.onResize();
  };

  SCORMView.prototype.beforeHide = function() {
    return this.trigger("ui", {
      lightbox: false,
      fullscreen: false
    });
  };

  SCORMView.prototype.show = function() {
    var position, ref1, ref2;
    this.stopped = false;
    position = ((ref1 = this.options.data.button) != null ? (ref2 = ref1.position) != null ? ref2.toLowerCase() : void 0 : void 0) || "none";
    this.setState(written.hyphenCase(position), "exit-btn");
    this.listenTo(this, "resize", this.onResize);
    if (!this.options.notInteractable) {
      this.initSCORM();
    }
    return window.addEventListener("message", this.processIframeMessage, false);
  };

  SCORMView.prototype.onRefresh = function() {
    this.beforeShow();
    return SCORMView.__super__.onRefresh.apply(this, arguments);
  };

  SCORMView.prototype.onResize = function() {
    var button, iframe;
    if (this.currentState["exit-btn"] === "below") {
      button = this.findOne(".exit-btn");
      iframe = this.findOne(".scorm-object");
      iframe.style.bottom = button.offsetHeight + "px";
      return iframe.style.height = (iframe.parentNode.offsetHeight - button.offsetHeight) + "px";
    }
  };

  SCORMView.prototype.stopSCORM = function() {
    var attemptData, raw, ref1, ref2, ref3, score, tot;
    if (this.stopped) {
      return;
    }
    this.stopped = true;
    if ((ref1 = window.API) != null) {
      ref1.LMSFinish();
    }
    window.removeEventListener("message", this.processIframeMessage, false);
    attemptData = this.scormAttempt.attemptData();
    raw = attemptData != null ? (ref2 = attemptData["cmi.core.score.raw"]) != null ? ref2.value : void 0 : void 0;
    tot = attemptData != null ? (ref3 = attemptData["cmi.core.score.max"]) != null ? ref3.value : void 0 : void 0;
    score = raw && tot ? parseInt(raw) * 1.0 / parseInt(tot) : (attemptData != null ? attemptData.success : void 0) ? 1 : 0;
    return Session.get((function(_this) {
      return function(err, arg) {
        var attempt, interaction, ref4;
        attempt = arg.attempt;
        interaction = {
          id: _this.options.id,
          name: _this.options.name,
          type: _this.options.type,
          slideData: _this.options.data,
          scormData: attemptData,
          attempt: attempt,
          correct: attemptData != null ? attemptData.success : void 0,
          answerDetails: [],
          metadata: _this.options.metadata,
          isScormAttempt: true,
          score: score,
          isCompleted: attemptData != null ? attemptData.success : void 0,
          isRequiredForLessonCompletion: _this.options.data.isRequiredForLessonCompletion,
          configuration: (ref4 = _this.options.data) != null ? ref4.challenge_configuration : void 0
        };
        _this.lesson.processInteraction(interaction);
        if (window.ED_LMS_PREVIEW || window.ED_PUBLIC_PREVIEW) {

        } else if (_this.isLastSlide) {
          Lesson.complete();
          return _this.exit();
        } else {
          return _this.next();
        }
      };
    })(this));
  };

  SCORMView.prototype.serialize = function() {
    var data, sandboxedFeatures;
    data = SCORMView.__super__.serialize.apply(this, arguments);
    sandboxedFeatures = ["allow-scripts", "allow-same-origin", "allow-modals", "allow-popups", "allow-popups-to-escape-sandbox", "allow-forms", "allow-downloads"];
    data.allowedSandboxedFeatures = sandboxedFeatures.join(" ");
    return data;
  };

  SCORMView.prototype.initSCORMResource = function() {
    var data, resource;
    data = this.serialize();
    resource = data["package"];
    if (!resource || resource === "scorm/scorm.zip") {
      return;
    }
    this.findOne(".scorm-object").src = resource;
    return window.SCORMED = {
      LMSFinish: (function(_this) {
        return function(data) {
          _this.scormAttempt.processScormPlayerData(data);
          return _this.stopSCORM();
        };
      })(this)
    };
  };

  SCORMView.prototype.initSCORM = function() {
    var callbacks, scormAPI, scormData;
    scormData = this.scormAttempt.initialData();
    callbacks = {
      success: (function(_this) {
        return function(success) {
          if (success) {
            return _this.initSCORMResource();
          }
        };
      })(this)
    };
    scormAPI = new ScormAPI("lesson", "LID", scormData, callbacks);
    window.API = scormAPI;
    return window.API_1484_11 = scormAPI;
  };

  return SCORMView;

})(SlideView);

module.exports = SCORMView;
});

;require.register("engine/scratch-to-reveal/model.yaml", function(exports, require, module) {
module.exports = {"title":"scratch-to-reveal","display":"Scratch to Reveal","category":"Content","features":{"narration":true,"social":true},"model":{"title":{"type":"html"},"before":{"content":{"type":"image"},"label":{"type":"text"}},"after":{"content":{"types":["text","image"]},"label":{"type":"text"}},"canvasBackground":{"display":"Background Color","type":"string","help":"This color (eg. \"orange\", \"#f90\", \"rgb(255,160,0)\") will be used to fill in the transparent area of the front image\n"},"prompt":{"type":"html","default":"Scratch to reveal the content"},"doneText":{"type":"html","default":"Continue","display":"Done text"}},"examples":[{"subtype":"scratch-to-reveal","title":"Product X vs. Product Y","before":{"content":"img/examples/product-phone.png","contentType":"image","label":"**Product X**\n\nBrilliant. In every way.\n"},"after":{"content":"img/examples/product-laptop.png","contentType":"image","label":"**Product Y**\n\nMore power. More performance.\n"}}]}
});

;require.register("engine/scratch-to-reveal/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (after, before, config, continueBtnText, doneText, hasNarration, hasPrompt, i18n, playinline, prompt, submitUp, title) {
jade_mixins["video-stream"] = jade_interp = function(videoUrl, playsinline, controls, klass, poster){
var block = (this && this.block), attributes = (this && this.attributes) || {};
playinline = playinline || true
controls = controls || true
klass = klass || 'video vjs-fluid'
var cloudinaryVideoFolderUrl = config.CLOUDINARY_CDN_URL+config.CLOUDINARY_VIDEO_FOLDER
var streamUrl = ''
if ( videoUrl && videoUrl.indexOf(cloudinaryVideoFolderUrl) > -1)
{
streamUrl = videoUrl.replace(cloudinaryVideoFolderUrl, cloudinaryVideoFolderUrl+'sp_full_hd/')
streamUrl = streamUrl.replace('.mp4', '.m3u8')
}
buf.push("<video" + (jade.attr("webkit-playsinline", playsinline, true, false)) + (jade.attr("controls", controls, true, false)) + " preload=\"auto\"" + (jade.attr("dir", config.direction, true, false)) + (jade.attr("poster", poster, true, false)) + (jade.cls(['video-js',klass], [null,true])) + "><source" + (jade.attr("src", videoUrl, true, false)) + "/>");
if ( streamUrl)
{
buf.push("<source" + (jade.attr("src", streamUrl, true, false)) + "/>");
}
buf.push("</video>");
};
jade_mixins["image"] = jade_interp = function(imageUrl, klass){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<img" + (jade.attr("src", imageUrl, true, false)) + (jade.cls([klass], [true])) + "/>");
};
jade_mixins["multi-content"] = jade_interp = function(prop, obj){
var block = (this && this.block), attributes = (this && this.attributes) || {};
obj = obj || locals;
switch (obj[prop + "Type"]){
case "image":
buf.push("<div" + (jade.attr("data-content", obj.image, true, false)) + " class=\"multi-content-wrapper multi-content-wrapper-image block-md block-lt\"><div class=\"block-sm multi-content-media\">");
jade_mixins["image"](obj[prop], 'multi-content multi-content-image');
buf.push("</div></div>");
  break;
case "video":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-video block-md block-lt\"><div class=\"block-sm multi-content-media\">");
jade_mixins["video-stream"](obj[prop], true, true,"multi-content multi-content-video block-dk");
buf.push("</div></div>");
  break;
case "audio":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-audio block-md block-lt\"><div class=\"block-sm multi-content-media\"><audio" + (jade.attr("src", obj[prop], true, false)) + " playsinline=\"playsinline\" preload=\"auto\" controls=\"controls\"" + (jade.attr("dir", config.direction, true, false)) + " class=\"multi-content multi-content-audio block-dk\"></audio></div></div>");
  break;
case "iframe":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-iframe block-md block-lt\"><div class=\"block-sm multi-content-iframe\">");
var iframe = obj[prop].match(/<iframe[^<]*<\/iframe>/)
if ( iframe)
{
buf.push(null == (jade_interp = iframe[0].replace(/ (width|height)=["'\d\w]+/g, "")) ? "" : jade_interp);
}
buf.push("</div></div>");
  break;
default:
buf.push("<span class=\"multi-content multi-content-text\">" + (null == (jade_interp = obj[prop]) ? "" : jade_interp) + "</span>");
  break;
}
};
buf.push("<div class=\"content-fill\"><div class=\"content-ver text-center block-v-lg\"><div class=\"row\"><div class=\"col-sm-12 col-md-8 col-md-offset-2\"><div class=\"block-v-md slide-title\"><h1 class=\"slide-down\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1></div><div class=\"block-v-lg fade-in delay-3\"><div class=\"slider\"><div class=\"slider-items\"><div class=\"slider-item content-fill slider-item-0\"><div class=\"slider-content content-fill\">");
jade_mixins["multi-content"]("content", before);
buf.push("</div></div><div class=\"slider-item content-fill slider-item-1\"><div" + (jade.cls(['slider-content','content-fill',(after.contentType === "text" ? 
                    "multi-content-wrapper block-lt" : ""
                  )], [null,null,true])) + ">");
jade_mixins["multi-content"]("content", after);
buf.push("</div></div></div><div class=\"btn-replay btn btn-muted\"><span class=\"icon icon-replay\"></span></div></div></div><div class=\"slider-labels text-md slide-up\"><div class=\"slider-label slider-label-before\">" + (null == (jade_interp = before.label) ? "" : jade_interp) + "</div><div class=\"slider-label slider-label-after\">" + (null == (jade_interp = after.label) ? "" : jade_interp) + "</div></div></div></div></div></div><div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"after" in locals_for_with?locals_for_with.after:typeof after!=="undefined"?after:undefined,"before" in locals_for_with?locals_for_with.before:typeof before!=="undefined"?before:undefined,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"playinline" in locals_for_with?locals_for_with.playinline:typeof playinline!=="undefined"?playinline:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/scratch-to-reveal/view.coffee", function(exports, require, module) {
var DraggyView, Preloader, ScratchToRevealView, SlideView, SmoothLine, dpi,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SlideView = require("views/slide");

DraggyView = require("views/components/draggy").DraggyView;

SmoothLine = require("lib/draw/smooth-line");

Preloader = require("lib/preload");

dpi = require("lib/device").dpi;

ScratchToRevealView = (function(superClass) {
  extend(ScratchToRevealView, superClass);

  function ScratchToRevealView() {
    return ScratchToRevealView.__super__.constructor.apply(this, arguments);
  }

  ScratchToRevealView.prototype.template = require("./template");

  ScratchToRevealView.prototype.events = function() {
    return {
      "iostap .btn-done": "submit",
      "iostap .btn-replay": "restart"
    };
  };

  ScratchToRevealView.prototype.serialize = function() {
    var data;
    data = ScratchToRevealView.__super__.serialize.apply(this, arguments);
    data.before.contentType = "image";
    return data;
  };

  ScratchToRevealView.prototype.beforeShow = function() {
    var images;
    images = this.findAll("img");
    this.setEl(this.findOne(".slider"), "slider");
    this.setEl(this.findOne(".slider-knob"), "knob");
    this.setEl(this.findAll(".slider-item"), "items");
    this.draggy = null;
    delete this.draggy;
    if (images.length > 0) {
      return Preloader.load(_.pluck(images, "src"), (function(_this) {
        return function() {
          return _this.sizeContent();
        };
      })(this));
    } else {
      return this.sizeContent();
    }
  };

  ScratchToRevealView.prototype.restart = function() {
    this.points = [];
    this.setState("prompt");
    return this.sizeContent();
  };

  ScratchToRevealView.prototype.show = function() {
    this.createDraggy();
    return this.points = [];
  };

  ScratchToRevealView.prototype.createDraggy = function() {
    var width;
    width = this.getEl("slider").offsetWidth;
    this.draggy = new DraggyView({
      el: this.findOne(".slider-item-0 .multi-content-media"),
      minX: 0,
      maxX: width,
      isParent: true
    });
    this.listenTo(this, "resize", this.onResize);
    this.listenTo(this.draggy, "drag", this.onDrag);
    return this.listenTo(this.draggy, "drop", this.onDrop);
  };

  ScratchToRevealView.prototype.onResize = function() {
    var i, j, len, point, ref, results, set;
    this.sizeContent();
    ref = this.points;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      set = ref[j];
      results.push((function() {
        var k, len1, results1;
        results1 = [];
        for (i = k = 0, len1 = set.length; k < len1; i = ++k) {
          point = set[i];
          results1.push(this.draw(set.slice(i, i + 2)));
        }
        return results1;
      }).call(this));
    }
    return results;
  };

  ScratchToRevealView.prototype.onDrag = function(draggy, isInitial) {
    if (isInitial) {
      this.points.push([]);
    }
    _.last(this.points).push({
      x: draggy.x * dpi,
      y: draggy.y * dpi
    });
    return this.draw(_.last(this.points).slice(-2));
  };

  ScratchToRevealView.prototype.onDrop = function() {
    var alphaPixels, data;
    data = this.context.getImageData(0, 0, this.context.canvas.width, this.context.canvas.height).data;
    alphaPixels = _.filter(data, function(e, i) {
      return i % 4 === 3;
    });
    if (_.average(alphaPixels) / 255 < 0.2) {
      return this.setState("touched");
    }
  };

  ScratchToRevealView.prototype.draw = function(arg) {
    var d, diffM, diffX, diffY, i, j, p1, p2, radius, ref, x, y;
    p1 = arg[0], p2 = arg[1];
    radius = 30 * dpi;
    if (p2 == null) {
      p2 = p1;
    }
    diffX = p2.x - p1.x;
    diffY = p2.y - p1.y;
    diffM = Math.max(Math.abs(diffX), Math.abs(diffY), 1);
    this.context.fillStyle = "#000";
    this.context.beginPath();
    for (i = j = 0, ref = diffM; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
      d = i / diffM;
      x = p1.x + diffX * d;
      y = p1.y + diffY * d;
      this.context.arc(x, y, radius, 0, Math.PI * 2);
    }
    this.context.fill();
    if (_.chain(this.points).pluck("length").sum().value() > 120) {
      return this.setState("touched");
    }
  };

  ScratchToRevealView.prototype.sizeContent = function() {
    var availableSpace, cHeight, cWidth, canvas, containerHeight, els, height, iHeight, iWidth, img, labels, padding, size, slideTitle, sliderParent;
    this.setState(false, "sized");
    els = this.findAll(".multi-content-wrapper");
    labels = this.findOne(".slider-labels");
    img = this.findOne(".slider-item-0 img");
    canvas = this.findOne("canvas");
    slideTitle = this.findOne(".slide-title");
    sliderParent = this.getEl("slider").parentNode;
    containerHeight = this.el.offsetHeight;
    size = _.reduce(els, function(m, el) {
      return {
        h: Math.max(m.h, el.offsetHeight),
        w: Math.max(m.w, el.offsetWidth)
      };
    }, {
      h: 80,
      w: 0
    });
    if (!canvas) {
      canvas = document.createElement("canvas");
      canvas.style.position = "absolute";
      canvas.style.top = "0";
      canvas.style.left = "0";
      img.insertAdjacentElement("afterEnd", canvas);
    }
    padding = parseFloat(window.getComputedStyle(img.parentNode).paddingLeft);
    cWidth = img.parentNode.offsetWidth;
    cHeight = Math.max(img.parentNode.offsetHeight, size.h - padding * 2);
    iWidth = img.offsetWidth;
    iHeight = img.offsetHeight;
    canvas.style.width = cWidth + "px";
    canvas.style.height = cHeight + "px";
    canvas.width = cWidth * dpi;
    canvas.height = cHeight * dpi;
    this.context = canvas.getContext("2d");
    this.context.fillStyle = this.options.data.canvasBackground || "white";
    this.context.rect(0, 0, canvas.width, canvas.height);
    this.context.fill();
    this.context.drawImage(img, (cWidth - iWidth) / 2 * dpi, (cHeight - iHeight) / 2 * dpi, iWidth * dpi, iHeight * dpi);
    this.context.globalCompositeOperation = "destination-out";
    this.getEl("slider").style.height = "";
    this.getEl("slider").style.width = "";
    this.getEl("slider").style.height = size.h + "px";
    this.getEl("slider").style.width = size.w + "px";
    availableSpace = containerHeight - sliderParent.offsetHeight - slideTitle.offsetHeight - 8;
    height = _.reduce(labels.children, function(m, el) {
      return Math.min(Math.max(m, el.offsetHeight), availableSpace);
    }, 0);
    labels.style.height = height + "px";
    this.setState(true, "sized");
    if (this.draggy != null) {
      this.draggy.options.maxX = size.w;
      return this.draggy.getOffset();
    }
  };

  ScratchToRevealView.prototype.onRefresh = function() {
    this.beforeShow();
    return ScratchToRevealView.__super__.onRefresh.apply(this, arguments);
  };

  ScratchToRevealView.prototype.refresh = function(params) {
    var isAfter;
    isAfter = !_.isEqual(params.data.after, this.options.data.after);
    ScratchToRevealView.__super__.refresh.apply(this, arguments);
    if (isAfter) {
      return this.setState("touched");
    }
  };

  return ScratchToRevealView;

})(SlideView);

module.exports = ScratchToRevealView;
});

;require.register("engine/scrollable/model.yaml", function(exports, require, module) {
module.exports = {"title":"scrollable","display":"Scrollable","category":"Content","features":{"narration":true,"social":true},"description":"Display a long amount of content","model":{"title":{"type":"html","default":""},"content":{"type":"html","default":""},"prompt":{"type":"html","default":"Scroll to see more"},"doneText":{"type":"html","default":"Continue","display":"Done text"}},"examples":[{"subtype":"scrolling-content","title":"Scrolling Content","content":"\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus\nquis lectus metus, at posuere neque. Sed pharetra nibh eget orci\nconvallis at posuere leo convallis. Sed blandit augue vitae augue\nscelerisque bibendum. Vivamus sit amet libero turpis, non venenatis\nurna. In blandit, odio convallis suscipit venenatis, ante ipsum cursus\naugue.\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus\nquis lectus metus, at posuere neque. Sed pharetra nibh eget orci\nconvallis at posuere leo convallis. Sed blandit augue vitae augue\nscelerisque bibendum. Vivamus sit amet libero turpis, non venenatis\nurna. In blandit, odio convallis suscipit venenatis, ante ipsum cursus\naugue.\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus\nquis lectus metus, at posuere neque. Sed pharetra nibh eget orci\nconvallis at posuere leo convallis. Sed blandit augue vitae augue\nscelerisque bibendum. Vivamus sit amet libero turpis, non venenatis\nurna. In blandit, odio convallis suscipit venenatis, ante ipsum cursus\naugue.\n"}]}
});

;require.register("engine/scrollable/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (content, continueBtnText, doneText, hasNarration, hasPrompt, i18n, prompt, submitUp, title) {
buf.push("<div class=\"content-md content-fill\"><div class=\"content-scroll content-sm-scroll content-md-scroll block-v-lg fade-in\"><div class=\"content-scroll-inner hide-overflow\"><div class=\"row\"><div class=\"col-sm-12 col-lg-10 col-lg-offset-1\"><h1 class=\"text-center slide-down\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"text-md\">" + (null == (jade_interp = content) ? "" : jade_interp) + "</div></div></div></div></div></div><div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"content" in locals_for_with?locals_for_with.content:typeof content!=="undefined"?content:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/scrollable/view.coffee", function(exports, require, module) {
var ScrollableView, SlideView, device,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SlideView = require("views/slide");

device = require("lib/device");

ScrollableView = (function(superClass) {
  extend(ScrollableView, superClass);

  function ScrollableView() {
    return ScrollableView.__super__.constructor.apply(this, arguments);
  }

  ScrollableView.prototype.template = require("./template");

  ScrollableView.prototype.ignoreStateOnRefresh = true;

  ScrollableView.prototype.buffer = 40;

  ScrollableView.prototype.events = function() {
    return {
      "iostap .btn-done": "submit"
    };
  };

  ScrollableView.prototype.serialize = function() {
    var data;
    data = ScrollableView.__super__.serialize.apply(this, arguments);
    data.hasPrompt = true;
    return data;
  };

  ScrollableView.prototype.beforeShow = function() {
    return this.trigger("ui", {
      flexibleHeight: true
    });
  };

  ScrollableView.prototype.beforeHide = function() {
    return this.trigger("ui", {
      flexibleHeight: false
    });
  };

  ScrollableView.prototype.show = function() {
    this.setHeight();
    return this.listenTo(this, "resize", this.onResize);
  };

  ScrollableView.prototype.onScroll = function(e) {
    ScrollableView.__super__.onScroll.apply(this, arguments);
    if (e.currentTarget.scrollTop >= this.scrollLimit) {
      return this.setState("touched");
    }
  };

  ScrollableView.prototype.onResize = function() {
    return this.setHeight();
  };

  ScrollableView.prototype.setHeight = function(narrationIsComplete, y) {
    var el, hasNarration, innerHeight, outerHeight, ref, ref1;
    el = this.findOne(".content-scroll");
    if (y != null) {
      el.scrollTop = y;
    }
    outerHeight = this.el.offsetHeight;
    innerHeight = el.firstChild.offsetHeight;
    this.scrollLimit = innerHeight - outerHeight - this.buffer;
    hasNarration = !narrationIsComplete && ((ref = this.options.data.narration) != null ? ref.audio_file : void 0) && ((ref1 = this.options.data.narration) != null ? ref1.can_not_be_skipped : void 0);
    if (innerHeight - this.buffer <= outerHeight) {
      if (!hasNarration) {
        this.setState("touched");
      }
      this.transform(el.firstChild, {
        y: (outerHeight - (innerHeight - this.buffer)) / 2
      });
    } else {
      this.transform(el.firstChild, {
        y: 0,
        transition: "all 300ms"
      });
      if (!hasNarration) {
        this.setState("prompt");
      }
    }
    if (el.scrollTop >= this.scrollLimit) {
      if (!hasNarration) {
        this.setState("prompt");
      }
      if (!hasNarration) {
        this.setState("touched");
      }
    }
    if (el.offsetHeight < el.scrollHeight && device.platform === "iOS") {
      el.style.paddingBottom = "2px";
      el.scrollTop = 1;
      return window.setTimeout(function() {
        el.offsetTop;
        el.scrollTop = 0;
        return el.style.paddingBottom = "";
      }, 10);
    }
  };

  ScrollableView.prototype.refresh = function() {
    var scrollTop, scroller;
    scroller = this.findOne(".content-scroll");
    scrollTop = scroller.scrollTop;
    ScrollableView.__super__.refresh.apply(this, arguments);
    return this.setHeight(false, scrollTop);
  };

  ScrollableView.prototype.onNarrationPause = function() {
    return this.setHeight();
  };

  ScrollableView.prototype.onNarrationComplete = function() {
    return this.setHeight(true);
  };

  return ScrollableView;

})(SlideView);

module.exports = ScrollableView;
});

;require.register("engine/scrolling-media/model.yaml", function(exports, require, module) {
module.exports = {"title":"scrolling-media","display":"Scrolling Media","category":"Content","description":"Display long form content of any type","features":{"narration":true,"social":true},"model":{"title":{"type":"html"},"content":{"min":1,"max":10,"type":[{"content":{"types":["text","image","video","audio"]}}]},"preventFocus":{"type":"boolean","default":false,"display":"Prevent Image Zoom","help":"Disable the ability to explore images by tapping on them to view the image in more detail.\n"},"prompt":{"type":"html","default":"Scroll to see more"},"doneText":{"type":"html","default":"Continue","display":"Done text"}},"examples":[{"subtype":"scrolling-media","title":"About Product Z","content":[{"contentType":"text","content":"Product Z is our third product in the Product line. Write, draw, sign or sketch whenever inspiration strikes. It's small in size but big on capability. Don't believe us? See below:\n"},{"contentType":"image","content":"img/examples/product-tablet.png"},{"contentType":"text","content":"Review the following interactive slides to learn more about Product Z.\n"}]}]}
});

;require.register("engine/scrolling-media/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (config, content, continueBtnText, doneText, hasNarration, hasPrompt, i18n, playinline, prompt, submitUp, title, undefined) {
jade_mixins["video-stream"] = jade_interp = function(videoUrl, playsinline, controls, klass, poster){
var block = (this && this.block), attributes = (this && this.attributes) || {};
playinline = playinline || true
controls = controls || true
klass = klass || 'video vjs-fluid'
var cloudinaryVideoFolderUrl = config.CLOUDINARY_CDN_URL+config.CLOUDINARY_VIDEO_FOLDER
var streamUrl = ''
if ( videoUrl && videoUrl.indexOf(cloudinaryVideoFolderUrl) > -1)
{
streamUrl = videoUrl.replace(cloudinaryVideoFolderUrl, cloudinaryVideoFolderUrl+'sp_full_hd/')
streamUrl = streamUrl.replace('.mp4', '.m3u8')
}
buf.push("<video" + (jade.attr("webkit-playsinline", playsinline, true, false)) + (jade.attr("controls", controls, true, false)) + " preload=\"auto\"" + (jade.attr("dir", config.direction, true, false)) + (jade.attr("poster", poster, true, false)) + (jade.cls(['video-js',klass], [null,true])) + "><source" + (jade.attr("src", videoUrl, true, false)) + "/>");
if ( streamUrl)
{
buf.push("<source" + (jade.attr("src", streamUrl, true, false)) + "/>");
}
buf.push("</video>");
};
jade_mixins["image"] = jade_interp = function(imageUrl, klass){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<img" + (jade.attr("src", imageUrl, true, false)) + (jade.cls([klass], [true])) + "/>");
};
jade_mixins["multi-content"] = jade_interp = function(prop, obj){
var block = (this && this.block), attributes = (this && this.attributes) || {};
obj = obj || locals;
switch (obj[prop + "Type"]){
case "image":
buf.push("<div" + (jade.attr("data-content", obj.image, true, false)) + " class=\"multi-content-wrapper multi-content-wrapper-image block-md block-lt\"><div class=\"block-sm multi-content-media\">");
jade_mixins["image"](obj[prop], 'multi-content multi-content-image');
buf.push("</div></div>");
  break;
case "video":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-video block-md block-lt\"><div class=\"block-sm multi-content-media\">");
jade_mixins["video-stream"](obj[prop], true, true,"multi-content multi-content-video block-dk");
buf.push("</div></div>");
  break;
case "audio":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-audio block-md block-lt\"><div class=\"block-sm multi-content-media\"><audio" + (jade.attr("src", obj[prop], true, false)) + " playsinline=\"playsinline\" preload=\"auto\" controls=\"controls\"" + (jade.attr("dir", config.direction, true, false)) + " class=\"multi-content multi-content-audio block-dk\"></audio></div></div>");
  break;
case "iframe":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-iframe block-md block-lt\"><div class=\"block-sm multi-content-iframe\">");
var iframe = obj[prop].match(/<iframe[^<]*<\/iframe>/)
if ( iframe)
{
buf.push(null == (jade_interp = iframe[0].replace(/ (width|height)=["'\d\w]+/g, "")) ? "" : jade_interp);
}
buf.push("</div></div>");
  break;
default:
buf.push("<span class=\"multi-content multi-content-text\">" + (null == (jade_interp = obj[prop]) ? "" : jade_interp) + "</span>");
  break;
}
};
buf.push("<div class=\"content-scroll fade-in\"><div class=\"content-scroll-inner hide-overflow block-v-lg block-box-sizing\"><div class=\"row\"><div class=\"col-sm-12 col-lg-8 col-lg-offset-2\"><h1 class=\"text-center slide-down\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"slide-content\">");
// iterate content
;(function(){
  var $$obj = content;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var item = $$obj[i];

buf.push("<div" + (jade.cls(['block-v-md','fade-in',"delay-" + (i + 1) + ""], [null,null,true])) + ">");
jade_mixins["multi-content"]("content", item);
buf.push("</div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var item = $$obj[i];

buf.push("<div" + (jade.cls(['block-v-md','fade-in',"delay-" + (i + 1) + ""], [null,null,true])) + ">");
jade_mixins["multi-content"]("content", item);
buf.push("</div>");
    }

  }
}).call(this);

buf.push("</div></div></div></div></div><div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined,"content" in locals_for_with?locals_for_with.content:typeof content!=="undefined"?content:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"playinline" in locals_for_with?locals_for_with.playinline:typeof playinline!=="undefined"?playinline:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/scrolling-media/view.coffee", function(exports, require, module) {
var Preloader, ScrollableView, ScrollingMediaView, dpi,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ScrollableView = require("../scrollable/view");

Preloader = require("lib/preload");

dpi = require("lib/device").dpi;

ScrollingMediaView = (function(superClass) {
  extend(ScrollingMediaView, superClass);

  function ScrollingMediaView() {
    return ScrollingMediaView.__super__.constructor.apply(this, arguments);
  }

  ScrollingMediaView.prototype.template = require("./template");

  ScrollingMediaView.prototype.ignoreStateOnRefresh = true;

  ScrollingMediaView.prototype.events = function() {
    return _.extend(ScrollingMediaView.__super__.events.apply(this, arguments), {
      "iostap .multi-content-wrapper-image": "showZoom"
    });
  };

  ScrollingMediaView.prototype.setHeight = function(narrationIsComplete, y) {
    var images, scroller;
    scroller = this.findOne(".content-scroll");
    images = _.pluck(this.findAll("img"), "src");
    return Preloader.load(images, (function(_this) {
      return function(e) {
        return ScrollingMediaView.__super__.setHeight.call(_this, narrationIsComplete, y);
      };
    })(this));
  };

  ScrollingMediaView.prototype.show = function() {
    ScrollingMediaView.__super__.show.apply(this, arguments);
    return this.setState(!this.options.data.preventFocus, "image-focus");
  };

  ScrollingMediaView.prototype.onRefresh = function() {
    var ref;
    if ((ref = this.photoswipe) != null) {
      ref.close();
    }
    return this.show();
  };

  ScrollingMediaView.prototype.hide = function() {
    var ref;
    ScrollingMediaView.__super__.hide.apply(this, arguments);
    return (ref = this.photoswipe) != null ? ref.close() : void 0;
  };

  ScrollingMediaView.prototype.showZoom = function(e, showAnimationDuration) {
    var i, images, img, index, left, pad, ref, targetImage, thumbBounds, top, width;
    if (showAnimationDuration == null) {
      showAnimationDuration = 300;
    }
    if (this.options.data.preventFocus) {
      return;
    }
    this.setState("touched");
    this.setState(true, "focus");
    targetImage = e.currentTarget.querySelector("img");
    pad = this.options.data.compose ? 12 : 0;
    ref = targetImage.getBoundingClientRect(), top = ref.top, left = ref.left, width = ref.width;
    thumbBounds = {
      x: left + pad,
      y: top + pad,
      w: width - pad * 2
    };
    images = (function() {
      var j, len, ref1, results;
      ref1 = this.findAll(".multi-content-image");
      results = [];
      for (i = j = 0, len = ref1.length; j < len; i = ++j) {
        img = ref1[i];
        if (img === targetImage) {
          index = i;
        }
        results.push({
          img: img,
          msrc: img.src,
          src: img.src,
          w: (img.naturalWidth || img.width) / Math.min(dpi, 1.66),
          h: (img.naturalHeight || img.height) / Math.min(dpi, 1.66)
        });
      }
      return results;
    }).call(this);
    this.photoswipe = new PhotoSwipe(document.querySelector("#photoswipe"), PhotoSwipeUI_Default, images, {
      index: index,
      showAnimationDuration: showAnimationDuration,
      focus: false,
      history: false,
      barsSize: {
        top: 0,
        bottom: 0
      },
      indexIndicatorSep: " of ",
      getThumbBoundsFn: function() {
        return thumbBounds;
      }
    });
    this.photoswipe.listen("close", (function(_this) {
      return function() {
        return _this.setState(false, "focus");
      };
    })(this));
    return this.photoswipe.init();
  };

  return ScrollingMediaView;

})(ScrollableView);

module.exports = ScrollingMediaView;
});

;require.register("engine/slider-survey/model.yaml", function(exports, require, module) {
module.exports = {"title":"slider-survey","display":"Slider","category":"Survey","description":"Gather numerical feedback","model":{"question":{"id":{"type":"uuid","hidden":true},"content":{"type":"html","default":"Ask a question"}},"slider":{"min":{"type":"number","default":0,"display":"Min. Value"},"max":{"type":"number","default":10,"display":"Max. Value"},"prefix":{"type":"html","default":""},"suffix":{"type":"html","default":""},"increment":{"type":"number","default":1,"min":0},"labels":{"type":"int","min":2,"max":10,"default":3},"minLabel":{"type":"text","default":"","display":"Minimum Label"},"maxLabel":{"type":"text","default":"","display":"Maximum Label"},"decimals":{"type":"int","min":0,"max":8,"default":0}},"prompt":{"type":"html","default":"Drag to select a response"},"doneText":{"type":"html","default":"Continue","display":"Done text"}},"examples":[{"subtype":"slider","question":{"content":"I feel more confident in my understanding of _______ after completing this lesson.","id":"#GENUUID#"},"slider":{"min":0,"max":5,"suffix":"","labels":5,"minLabel":"Strongly Disagree","maxLabel":"Strongly Agree"}}]}
});

;require.register("engine/slider-survey/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (Array, config, continueBtnText, doneText, hasNarration, hasPrompt, i18n, labelValues, labels, notches, prompt, question, slider, submitUp, undefined) {
buf.push("<div class=\"content-fill\"><div class=\"content-fit content-md-fill content-sm-ver\"><div class=\"content-md-ver text-center block-v-lg\"><h1>" + (null == (jade_interp = question.content) ? "" : jade_interp) + "</h1><div class=\"slider scale-up\"><div class=\"slider-bar\"></div><div class=\"slider-knob slider-knob-input\"><div class=\"slider-knob-value text-md text-nowrap\">" + (jade.escape((jade_interp = i18n("slider.touch-to-slide")) == null ? '' : jade_interp)) + "</div></div><div class=\"slider-knob slider-knob-answer\"><div class=\"slider-knob-value text-md text-nowrap\">" + (null == (jade_interp = slider.prefix) ? "" : jade_interp) + (null == (jade_interp = "") ? "" : jade_interp) + (null == (jade_interp = slider.suffix) ? "" : jade_interp) + "</div></div><div class=\"slider-notches\">");
// iterate (new Array(notches + 1))
;(function(){
  var $$obj = (new Array(notches + 1));
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var notch = $$obj[i];

buf.push("<div" + (jade.attr("style", "left: " + (i / notches * 100) + "%;", true, false)) + " class=\"slider-notch\"></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var notch = $$obj[i];

buf.push("<div" + (jade.attr("style", "left: " + (i / notches * 100) + "%;", true, false)) + " class=\"slider-notch\"></div>");
    }

  }
}).call(this);

buf.push("</div>");
if ( slider.labels)
{
buf.push("<div class=\"slider-labels\">");
var attr = config.direction === "rtl" ? "right" : "left";
// iterate labelValues
;(function(){
  var $$obj = labelValues;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var label = $$obj[i];

buf.push("<div" + (jade.attr("style", "" + (attr) + ": " + (i / (labels - 1) * 100) + "%;", true, false)) + " class=\"slider-label\">" + (null == (jade_interp = slider.prefix) ? "" : jade_interp) + (null == (jade_interp = slider.decimals ? label.toFixed(slider.decimals) : label) ? "" : jade_interp) + (null == (jade_interp = slider.suffix) ? "" : jade_interp) + "</div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var label = $$obj[i];

buf.push("<div" + (jade.attr("style", "" + (attr) + ": " + (i / (labels - 1) * 100) + "%;", true, false)) + " class=\"slider-label\">" + (null == (jade_interp = slider.prefix) ? "" : jade_interp) + (null == (jade_interp = slider.decimals ? label.toFixed(slider.decimals) : label) ? "" : jade_interp) + (null == (jade_interp = slider.suffix) ? "" : jade_interp) + "</div>");
    }

  }
}).call(this);

buf.push("</div>");
}
buf.push("<div class=\"slider-label-text\">");
if ( slider.minLabel)
{
buf.push("<div class=\"slider-label-min pull-left\">" + (null == (jade_interp = slider.minLabel) ? "" : jade_interp) + "</div>");
}
if ( slider.maxLabel)
{
buf.push("<div class=\"slider-label-max pull-right\">" + (null == (jade_interp = slider.maxLabel) ? "" : jade_interp) + "</div>");
}
buf.push("</div></div></div></div></div><div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"Array" in locals_for_with?locals_for_with.Array:typeof Array!=="undefined"?Array:undefined,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"labelValues" in locals_for_with?locals_for_with.labelValues:typeof labelValues!=="undefined"?labelValues:undefined,"labels" in locals_for_with?locals_for_with.labels:typeof labels!=="undefined"?labels:undefined,"notches" in locals_for_with?locals_for_with.notches:typeof notches!=="undefined"?notches:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"question" in locals_for_with?locals_for_with.question:typeof question!=="undefined"?question:undefined,"slider" in locals_for_with?locals_for_with.slider:typeof slider!=="undefined"?slider:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/slider-survey/view.coffee", function(exports, require, module) {
var InputView, SliderSurveyView, SliderView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

InputView = require("views/input");

SliderView = require("engine/slider/view");

SliderSurveyView = (function(superClass) {
  extend(SliderSurveyView, superClass);

  function SliderSurveyView() {
    return SliderSurveyView.__super__.constructor.apply(this, arguments);
  }

  SliderSurveyView.prototype.template = require("./template");

  SliderSurveyView.prototype.events = function() {
    return {
      "iostap .btn-done": "nextSlide"
    };
  };

  SliderSurveyView.prototype.show = function() {
    this.setEl(this.findOne(".slider-label-min"), "min-label");
    this.setEl(this.findOne(".slider-label-max"), "max-label");
    return SliderSurveyView.__super__.show.apply(this, arguments);
  };

  SliderSurveyView.prototype.userInput = function() {
    return {
      question: {
        id: this.options.data.question.id,
        content: this.options.data.question.content
      },
      answer: {
        value: parseFloat(this.currentValue)
      }
    };
  };

  SliderSurveyView.prototype.nextSlide = function() {
    return InputView.prototype.nextSlide.call(this);
  };

  SliderSurveyView.prototype.onDrag = function(draggy) {
    SliderSurveyView.__super__.onDrag.apply(this, arguments);
    return this.styleLabels(draggy);
  };

  SliderSurveyView.prototype.onDrop = function(draggy) {
    SliderSurveyView.__super__.onDrop.apply(this, arguments);
    return this.styleLabels(draggy);
  };

  SliderSurveyView.prototype.styleLabels = function(draggy) {
    var min, opacity, ref, ref1;
    opacity = draggy.x / draggy.offset.width;
    min = 0.1;
    opacity = (opacity * (1 - min)) + min;
    if (this.options.config().direction === "rtl") {
      opacity = 1 - opacity;
    }
    if ((ref = this.getEl("min-label")) != null) {
      ref.style.opacity = (1 + min) - opacity;
    }
    return (ref1 = this.getEl("max-label")) != null ? ref1.style.opacity = opacity : void 0;
  };

  return SliderSurveyView;

})(SliderView);

module.exports = SliderSurveyView;
});

;require.register("engine/slider/model.yaml", function(exports, require, module) {
module.exports = {"title":"slider","display":"Slider","category":"Numbers","features":{"stars":true,"social":true},"model":{"title":{"type":"html","default":"Ask a question"},"slider":{"min":{"type":"number","default":0,"display":"Min. Value"},"max":{"type":"number","default":10,"display":"Max. Value"},"prefix":{"type":"html","default":""},"suffix":{"type":"html","default":""},"increment":{"type":"number","default":1},"labels":{"type":"int","min":2,"max":10,"default":3},"decimals":{"type":"int","min":0,"max":8,"default":0}},"answer":{"text":{"type":"html","default":"","display":"Answer Text"},"value":{"type":"number","display":"Correct Value"},"correct":{"type":"html","default":"That's correct!","display":"Correct Reinforcement"},"incorrect":{"type":"html","default":"Not quite...","display":"Incorrect Reinforcement"},"takeaway":{"type":"html","default":"","display":"Core Message"}},"game":{"timer":{"limit":{"type":"number","default":-1,"display":"Time Limit (seconds)"},"out-of-time-prompt":{"type":"html","display":"Out of time prompt"}}},"prompt":{"type":"html","default":"Slide to the correct value"},"doneText":{"type":"html","default":"Continue","display":"Done text"}},"examples":[{"subtype":"percent","title":"What percent of customers responded in the survey?","slider":{"min":85,"max":100,"suffix":"%","labels":4},"answer":{"text":"A huge amount of responses were contributed to the survey.","value":98}},{"subtype":"money","title":"What is the new price of the product?","slider":{"min":6.5,"increment":0.25,"max":11.5,"prefix":"$","labels":8,"decimals":2},"answer":{"value":7.75,"text":"At $7.75, the product is now a lot cheaper!\n"}},{"subtype":"year","title":"In which year was the product introduced?","slider":{"min":1984,"max":1990,"prefix":"","labels":3},"answer":{"text":"The product is a true original from 1984!","value":1984}}]}
});

;require.register("engine/slider/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (Array, answer, config, continueBtnText, doneText, game, hasNarration, hasPrompt, i18n, labelValues, labels, notches, prompt, slider, submitUp, title, undefined) {
if ( game && game.timer && game.timer.limit > 0 && !game.timer.isDisabled)
{
buf.push("<div class=\"full-screen\"><div class=\"game-stepper text-lg text-bold\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div></div>");
}
buf.push("<div class=\"content-fill\"><div class=\"content-fit content-md-fill content-sm-ver\"><div class=\"content-md-ver text-center block-v-lg\"><h1>" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"slider scale-up\"><div class=\"slider-bar\"></div><div class=\"slider-knob slider-knob-input\"><div class=\"slider-knob-value text-md text-nowrap\">" + (jade.escape((jade_interp = i18n("slider.touch-to-slide")) == null ? '' : jade_interp)) + "</div></div><div class=\"slider-knob slider-knob-answer\"><div class=\"slider-knob-value text-md text-nowrap\">" + (null == (jade_interp = slider.prefix) ? "" : jade_interp) + (null == (jade_interp = answer.value) ? "" : jade_interp) + (null == (jade_interp = slider.suffix) ? "" : jade_interp) + "</div></div><div class=\"slider-notches\">");
// iterate (new Array(notches + 1))
;(function(){
  var $$obj = (new Array(notches + 1));
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var notch = $$obj[i];

buf.push("<div" + (jade.attr("style", "left: " + (i / notches * 100) + "%;", true, false)) + " class=\"slider-notch\"></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var notch = $$obj[i];

buf.push("<div" + (jade.attr("style", "left: " + (i / notches * 100) + "%;", true, false)) + " class=\"slider-notch\"></div>");
    }

  }
}).call(this);

buf.push("</div>");
if ( slider.labels)
{
buf.push("<div class=\"slider-labels\">");
var attr = config.direction === "rtl" ? "right" : "left";
// iterate labelValues
;(function(){
  var $$obj = labelValues;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var label = $$obj[i];

buf.push("<div" + (jade.attr("style", "" + (attr) + ": " + (i / (labels - 1) * 100) + "%;", true, false)) + " class=\"slider-label\">" + (null == (jade_interp = slider.prefix) ? "" : jade_interp) + (null == (jade_interp = slider.decimals ? label.toFixed(slider.decimals) : label) ? "" : jade_interp) + (null == (jade_interp = slider.suffix) ? "" : jade_interp) + "</div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var label = $$obj[i];

buf.push("<div" + (jade.attr("style", "" + (attr) + ": " + (i / (labels - 1) * 100) + "%;", true, false)) + " class=\"slider-label\">" + (null == (jade_interp = slider.prefix) ? "" : jade_interp) + (null == (jade_interp = slider.decimals ? label.toFixed(slider.decimals) : label) ? "" : jade_interp) + (null == (jade_interp = slider.suffix) ? "" : jade_interp) + "</div>");
    }

  }
}).call(this);

buf.push("</div>");
}
buf.push("</div></div></div></div><div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"Array" in locals_for_with?locals_for_with.Array:typeof Array!=="undefined"?Array:undefined,"answer" in locals_for_with?locals_for_with.answer:typeof answer!=="undefined"?answer:undefined,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"game" in locals_for_with?locals_for_with.game:typeof game!=="undefined"?game:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"labelValues" in locals_for_with?locals_for_with.labelValues:typeof labelValues!=="undefined"?labelValues:undefined,"labels" in locals_for_with?locals_for_with.labels:typeof labels!=="undefined"?labels:undefined,"notches" in locals_for_with?locals_for_with.notches:typeof notches!=="undefined"?notches:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"slider" in locals_for_with?locals_for_with.slider:typeof slider!=="undefined"?slider:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/slider/view.coffee", function(exports, require, module) {
var DraggyView, GameView, SliderView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

GameView = require("views/base/game");

DraggyView = require("views/components/draggy").DraggyView;

SliderView = (function(superClass) {
  extend(SliderView, superClass);

  function SliderView() {
    return SliderView.__super__.constructor.apply(this, arguments);
  }

  SliderView.prototype.template = require("./template");

  SliderView.prototype.events = {
    "iostap .btn-done": "endGame"
  };

  SliderView.prototype.serialize = function() {
    var d, j, min, ref, results;
    d = SliderView.__super__.serialize.apply(this, arguments);
    d.slider.increment = parseFloat(d.slider.increment, 10) || 1;
    d.slider.min = parseFloat(d.slider.min);
    d.slider.max = parseFloat(d.slider.max);
    if (_.isNaN(d.slider.min)) {
      d.slider.min = 0;
    }
    if (_.isNaN(d.slider.max)) {
      d.slider.max = 10;
    }
    if (d.slider.min > d.slider.max) {
      min = d.slider.min;
      d.slider.min = d.slider.max;
      d.slider.max = min;
    }
    d.range = d.slider.max - d.slider.min;
    d.notches = Math.round(d.range / d.slider.increment);
    d.labels = _.nearest(_.factors(d.notches).map(function(m) {
      return m + 1;
    }), d.slider.labels);
    d.labelValues = (function() {
      results = [];
      for (var j = 0, ref = d.labels; 0 <= ref ? j < ref : j > ref; 0 <= ref ? j++ : j--){ results.push(j); }
      return results;
    }).apply(this).map(function(i) {
      var value;
      value = new Big(Math.round(i * d.notches / (d.labels - 1)));
      value = value.mul(d.slider.increment).add(d.slider.min);
      return value;
    });
    return d;
  };

  SliderView.prototype.beforeShow = function() {
    return this.trigger("ui", {
      flexibleHeight: true
    });
  };

  SliderView.prototype.beforeHide = function() {
    return this.trigger("ui", {
      flexibleHeight: false
    });
  };

  SliderView.prototype.show = function() {
    SliderView.__super__.show.apply(this, arguments);
    delete this.currentValue;
    this.setEl(this.findOne(".slider"), "slider");
    this.setEl(this.findOne(".slider-knob-input"), "knob-input");
    this.setEl(this.findOne(".slider-knob-value"), "knob-value");
    this.setEl(this.findOne(".slider-knob-answer"), "knob-answer");
    this.createDraggy();
    this.draggy.reset({
      x: this.draggy.offset.width / 2
    });
    return this.enterGame();
  };

  SliderView.prototype.createDraggy = function() {
    var width;
    width = this.getEl("slider").offsetWidth;
    this.draggy = new DraggyView({
      el: this.getEl("slider"),
      minX: 0,
      maxX: width,
      lock: "y",
      isParent: true
    });
    if (this.options.config().direction === "rtl") {
      this.draggy.reset({
        x: width
      });
      this.transform(this.getEl("knob-input"), {
        x: width
      });
      this.getEl("knob-input").offsetWidth;
    }
    this.listenTo(this.draggy, "drag", this.onDrag);
    this.listenTo(this.draggy, "drop", this.onDrop);
    return this.listenTo(this, "resize", this.onResize);
  };

  SliderView.prototype.onDrag = function(draggy, isInitialDrag) {
    this.currentValue = this.roundValue(draggy);
    this.labelEl(this.getEl("knob-value"), this.currentValue);
    return this.transform(this.getEl("knob-input"), {
      x: draggy.x,
      scale: 1.25,
      transition: isInitialDrag ? "all 300ms" : "none"
    });
  };

  SliderView.prototype.onDrop = function(draggy, isReset) {
    var x;
    x = this.roundPos(draggy);
    if (draggy.x !== x && !isReset) {
      return draggy.reset({
        x: x
      });
    } else {
      this.transform(this.getEl("knob-input"), {
        x: draggy.x,
        transition: "all 300ms"
      });
      if (this.currentValue != null) {
        this.labelEl(this.getEl("knob-value"), this.currentValue);
        return this.setState("touched");
      }
    }
  };

  SliderView.prototype.roundValue = function(draggy) {
    var increment, max, min, ref;
    ref = this.options.data.slider, increment = ref.increment, min = ref.min, max = ref.max;
    return Big(max - min).mul(this.roundPercent(draggy)).div(increment).round().mul(increment).plus(min);
  };

  SliderView.prototype.roundPos = function(draggy) {
    var percent;
    percent = this.roundPercent(draggy);
    if (this.options.config().direction === "rtl") {
      percent = 1 - percent;
    }
    return percent * draggy.offset.width;
  };

  SliderView.prototype.roundPercent = function(draggy) {
    var increment, max, min, percent, ref, steps;
    ref = this.options.data.slider, increment = ref.increment, min = ref.min, max = ref.max;
    max = Big(max).sub(min).div(increment).round().mul(increment).plus(min);
    percent = _.limit(draggy.x / draggy.offset.width, 0, 1) || 0;
    steps = Big(max).sub(min).div(increment).valueOf();
    percent = steps > 0 ? Big(steps).mul(percent).round().div(steps) : 0;
    if (this.options.config().direction === "rtl") {
      percent = 1 - percent;
    }
    return percent;
  };

  SliderView.prototype.onResize = function(e, data) {
    var max, min, percent, ref;
    ref = this.options.data.slider, min = ref.min, max = ref.max;
    percent = (this.currentValue - min) / (max - min) || 0.5;
    this.draggy.options.maxX = this.draggy.el.offsetWidth;
    this.draggy.reset({
      x: percent * this.draggy.el.offsetWidth
    });
    return this.animateAnswerKnob(this.getEl("knob-answer"));
  };

  SliderView.prototype.labelEl = function(el, value) {
    var decimals, prefix, ref, suffix;
    ref = this.options.data.slider, prefix = ref.prefix, suffix = ref.suffix, decimals = ref.decimals;
    decimals = parseFloat(decimals, 10) || 0;
    if (decimals > 0) {
      value = parseFloat(value, 10).toFixed(decimals);
    }
    return el.innerHTML = "" + prefix + value + suffix;
  };

  SliderView.prototype.isCorrect = function() {
    var ref, ref1;
    return (((ref = this.options.data) != null ? (ref1 = ref.answer) != null ? ref1.value : void 0 : void 0) != null) && (this.currentValue != null) && this.currentValue.eq(this.options.data.answer.value);
  };

  SliderView.prototype.showAnswer = function() {
    this.transform(this.getEl("knob-answer"), {
      x: this.draggy.x
    });
    this.animateAnswerKnob(this.getEl("knob-answer"));
    return this.draggy.lock();
  };

  SliderView.prototype.animateAnswerKnob = function(el) {
    var answer, increment, max, min, percent, ref, slider;
    ref = this.options.data, answer = ref.answer, slider = ref.slider;
    if (!answer) {
      return;
    }
    increment = slider.increment, min = slider.min, max = slider.max;
    max = Big(max).sub(min).div(increment).round().mul(increment).plus(min);
    percent = (answer.value - min) / (max - min);
    if (this.options.config().direction === "rtl") {
      percent = 1 - percent;
    }
    el.offsetLeft;
    return this.transform(el, {
      x: percent * this.draggy.offset.width,
      transition: this.draggy.locked ? "none" : "all 600ms"
    });
  };

  SliderView.prototype.answerDetails = function() {
    var answer, correct, details, question, questions, ref, value;
    questions = ((ref = this.options.metadata) != null ? ref.questions : void 0) || [];
    if (!(questions.length > 0)) {
      return [];
    }
    question = questions[0];
    correct = this.isCorrect();
    value = Number(this.currentValue);
    answer = _.find(question.answers, function(a) {
      return a.correct === correct;
    });
    answer.content = value;
    details = {
      question: question.question,
      answer: answer
    };
    return [details];
  };

  SliderView.prototype.endGame = function() {
    SliderView.__super__.endGame.apply(this, arguments);
    return this.submit();
  };

  return SliderView;

})(GameView);

module.exports = SliderView;
});

;require.register("engine/speech-bubble/model.yaml", function(exports, require, module) {
module.exports = {"title":"speech-bubble","display":"Speech Bubble","category":"Content","description":"Display a quote","features":{"social":true},"model":{"title":{"type":"html","default":"# Product X has defied my expectations."},"author":{"type":"html","default":"## Satisfied customer"},"avatar":{"type":"image","default":""},"direction":{"type":"select","enum":["Left","Right"],"default":"Left"},"bubbleStyle":{"display":"Bubble Style","type":"select","enum":["Dark","Light"],"default":"Dark"},"avatarStyle":{"display":"Avatar Style","type":"select","enum":["Circle","Rounded","Square"],"default":"Circle"}}}
});

;require.register("engine/speech-bubble/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (author, avatar, avatarStyle, bubbleStyle, continueBtnText, direction, doneText, hasNarration, hasPrompt, i18n, prompt, submitUp, title) {
jade_mixins["image"] = jade_interp = function(imageUrl, klass){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<img" + (jade.attr("src", imageUrl, true, false)) + (jade.cls([klass], [true])) + "/>");
};
jade_mixins["image"] = jade_interp = function(imageUrl, klass){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<img" + (jade.attr("src", imageUrl, true, false)) + (jade.cls([klass], [true])) + "/>");
};
buf.push("<div class=\"content-scroll content-fill block-v-lg\"><div" + (jade.cls(['content-scroll-inner','txt-center','block-frame','block-flex-center',[
        (direction == "Right" ? "text-right" : "text-left"),
        (direction == "Right" ? "speech-right" : "speech-left"),
        bubbleStyle === "Dark" ? "speech-dk" : "speech-lt",
        "speech-style-" + (avatarStyle || "circle").toLowerCase(),
        avatar ? "has-avatar" : ""
      ].join(" ")], [null,null,null,null,true])) + "><div class=\"display-flex direction-column quote-container\"><div" + (jade.cls(['quote',[
            direction == "Right" ? "pull-right" : "pull-left",
            bubbleStyle === "Dark" ? "quote-dk" : "quote-lt"
          ].join(" ")], [null,true])) + "><div class=\"quote-bg\"></div><div class=\"quote-content fade-in delay-1\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</div></div><div" + (jade.cls(['author','block-frame','display-flex','direction-row',[
            direction == "Right" ? "author-right" : "author-left"
          ]], [null,null,null,null,true])) + ">");
if ( avatar)
{
jade_mixins["image"](avatar, 'author-avatar slide-up delay-2');
}
if ( author )
{
buf.push("<div class=\"author-content slide-up delay-3\">" + (null == (jade_interp = author) ? "" : jade_interp) + "</div>");
}
buf.push("</div></div></div></div><div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"author" in locals_for_with?locals_for_with.author:typeof author!=="undefined"?author:undefined,"avatar" in locals_for_with?locals_for_with.avatar:typeof avatar!=="undefined"?avatar:undefined,"avatarStyle" in locals_for_with?locals_for_with.avatarStyle:typeof avatarStyle!=="undefined"?avatarStyle:undefined,"bubbleStyle" in locals_for_with?locals_for_with.bubbleStyle:typeof bubbleStyle!=="undefined"?bubbleStyle:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"direction" in locals_for_with?locals_for_with.direction:typeof direction!=="undefined"?direction:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/speech-bubble/view.coffee", function(exports, require, module) {
var SlideView, SpeechBubbleView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SlideView = require("views/slide");

SpeechBubbleView = (function(superClass) {
  extend(SpeechBubbleView, superClass);

  function SpeechBubbleView() {
    return SpeechBubbleView.__super__.constructor.apply(this, arguments);
  }

  SpeechBubbleView.prototype.template = require("./template");

  SpeechBubbleView.prototype.events = function() {
    return {
      "iostap .btn-done": "next"
    };
  };

  SpeechBubbleView.prototype.beforeShow = function() {
    return this.trigger("ui", {
      flexibleHeight: true
    });
  };

  SpeechBubbleView.prototype.beforeHide = function() {
    return this.trigger("ui", {
      flexibleHeight: false
    });
  };

  return SpeechBubbleView;

})(SlideView);

module.exports = SpeechBubbleView;
});

;require.register("engine/strikeout/model.yaml", function(exports, require, module) {
module.exports = {"title":"strikeout","display":"Strike-out","category":"Concepts","features":{"stars":true,"social":true},"model":{"title":{"type":"html"},"subtitle":{"type":"html"},"words":{"min":1,"max":8,"type":[{"incorrect":{"type":"html","display":"Word(s) to be stricken out"},"replaces":{"type":"html","display":"Word(s) from sentence"}}]},"answer":{"text":{"type":"html","default":"","display":"Answer Text"},"correct":{"type":"html","default":"That's correct!","display":"Correct Reinforcement"},"incorrect":{"type":"html","default":"Not quite...","display":"Incorrect Reinforcement"},"takeaway":{"type":"html","default":"","display":"Core Message"}},"game":{"timer":{"limit":{"type":"number","default":-1,"display":"Time Limit (seconds)"},"out-of-time-prompt":{"type":"html","display":"Out of time prompt"}}},"prompt":{"type":"html","default":"Cross out the incorrect words"},"doneText":{"type":"html","default":"Continue","display":"Done text"}},"examples":[{"subtype":"strikeout","title":"This sentence about Product X is correct","prompt":"Cross out the incorrect words","words":[{"incorrect":"incorrect","replaces":"correct"},{"incorrect":"Product Y","replaces":"Product X"}],"answer":{"text":"You can use strike-out to get people thinking about your message."}}]}
});

;require.register("engine/strikeout/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (components, continueBtnText, doneText, game, hasNarration, hasPrompt, i18n, prompt, submitUp, subtitle, undefined) {
if ( game && game.timer && game.timer.limit > 0 && !game.timer.isDisabled)
{
buf.push("<div class=\"full-screen\"><div class=\"game-stepper text-lg text-bold\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div></div>");
}
buf.push("<div class=\"full-screen strikeout-canvas-container\"><canvas class=\"strikeout-canvas\"></canvas></div><div class=\"content-fill text-center\"><div class=\"content-fit block-v-lg content-md-fill content-sm-ver strikeout-words\"><div class=\"content-md-ver col-md-10 col-md-offset-1\"><h1 class=\"fade-in\">");
// iterate components
;(function(){
  var $$obj = components;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var word = $$obj[i];

if ( word.space)
{
buf.push(null == (jade_interp = "&nbsp;") ? "" : jade_interp);
}
else
{
buf.push("<div" + (jade.attr("data-replaces", word.incorrect && word.replaces, true, false)) + (jade.cls(['word',word.incorrect && "word-incorrect"], [null,true])) + "><div" + (jade.cls([word.klass], [true])) + ">" + (null == (jade_interp = word.incorrect || word.replaces) ? "" : jade_interp) + "</div></div>");
}
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var word = $$obj[i];

if ( word.space)
{
buf.push(null == (jade_interp = "&nbsp;") ? "" : jade_interp);
}
else
{
buf.push("<div" + (jade.attr("data-replaces", word.incorrect && word.replaces, true, false)) + (jade.cls(['word',word.incorrect && "word-incorrect"], [null,true])) + "><div" + (jade.cls([word.klass], [true])) + ">" + (null == (jade_interp = word.incorrect || word.replaces) ? "" : jade_interp) + "</div></div>");
}
    }

  }
}).call(this);

buf.push("</h1><h3>" + (null == (jade_interp = subtitle) ? "" : jade_interp) + "</h3></div></div></div><div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"components" in locals_for_with?locals_for_with.components:typeof components!=="undefined"?components:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"game" in locals_for_with?locals_for_with.game:typeof game!=="undefined"?game:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"subtitle" in locals_for_with?locals_for_with.subtitle:typeof subtitle!=="undefined"?subtitle:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/strikeout/view.coffee", function(exports, require, module) {
var DraggyView, GameView, SmoothLine, StrikeoutView, convert, dpi,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

GameView = require("views/base/game");

DraggyView = require("views/components/draggy").DraggyView;

SmoothLine = require("lib/draw/smooth-line");

convert = require("lib/convert");

dpi = require("lib/device").dpi;

StrikeoutView = (function(superClass) {
  extend(StrikeoutView, superClass);

  function StrikeoutView() {
    return StrikeoutView.__super__.constructor.apply(this, arguments);
  }

  StrikeoutView.prototype.template = require("./template");

  StrikeoutView.prototype.events = function() {
    return {
      "iostap .btn-done": "endGame"
    };
  };

  StrikeoutView.prototype.serialize = function() {
    var component, data, i, incorrect, index, j, len, replaces, title, words;
    data = StrikeoutView.__super__.serialize.apply(this, arguments);
    title = data.title, words = data.words;
    if (title == null) {
      title = "";
    }
    title = convert.toText(title);
    words = (function() {
      var j, len, ref, results;
      results = [];
      for (j = 0, len = words.length; j < len; j++) {
        ref = words[j], replaces = ref.replaces, incorrect = ref.incorrect;
        if (replaces && incorrect) {
          results.push({
            replaces: convert.toText(replaces),
            incorrect: convert.toText(incorrect)
          });
        }
      }
      return results;
    })();
    for (i = j = 0, len = words.length; j < len; i = ++j) {
      replaces = words[i].replaces;
      title = title.replace(replaces, "{{" + i + "}}");
    }
    data.components = (function() {
      var k, len1, ref, ref1, ref2, ref3, ref4, ref5, results;
      ref = title.split(/(\{\{\d+\}\}|[^A-Z])/i);
      results = [];
      for (k = 0, len1 = ref.length; k < len1; k++) {
        component = ref[k];
        if (component === ' ') {
          results.push({
            space: true
          });
        } else {
          index = +((ref1 = component.match(/\{\{(\d+)\}\}/)) != null ? ref1[1] : void 0);
          replaces = ((ref2 = words[index]) != null ? ref2.replaces : void 0) ? component.replace(/\{\{\d+\}\}/, (ref3 = words[index]) != null ? ref3.replaces : void 0) : component;
          incorrect = ((ref4 = words[index]) != null ? ref4.incorrect : void 0) ? component.replace(/\{\{\d+\}\}/, (ref5 = words[index]) != null ? ref5.incorrect : void 0) : null;
          results.push({
            klass: "delay-" + (_.random(3)) + " scale-" + (_.sample(["down", "up"])),
            incorrect: incorrect,
            replaces: replaces
          });
        }
      }
      return results;
    })();
    return data;
  };

  StrikeoutView.prototype.beforeShow = function() {
    return this.trigger("ui", {
      flexibleHeight: true
    });
  };

  StrikeoutView.prototype.beforeHide = function() {
    return this.trigger("ui", {
      flexibleHeight: false
    });
  };

  StrikeoutView.prototype.show = function() {
    var base, base1, canvas, el, j, len, ref;
    StrikeoutView.__super__.show.apply(this, arguments);
    canvas = this.findOne("canvas");
    this.draggy = new DraggyView({
      el: canvas,
      isParent: true
    });
    this.onResize();
    this.context = (typeof (base = this.draggy.el).getContext === "function" ? base.getContext("2d") : void 0) || {};
    this.setEl(this.findAll(".word"), "words");
    this.listenTo(this.draggy, "drag", this.onDrag);
    this.listenTo(this.draggy, "drop", this.onDrop);
    this.listenTo(this, "resize", this.onResize);
    if (typeof (base1 = this.context).clearRect === "function") {
      base1.clearRect(0, 0, this.draggy.el.width, this.draggy.el.height);
    }
    ref = this.getEl("words");
    for (j = 0, len = ref.length; j < len; j++) {
      el = ref[j];
      el.classList.remove("active", "complete");
    }
    this.enterGame();
    return this.guesses = [];
  };

  StrikeoutView.prototype.onResize = function() {
    this.draggy.el.width = this.el.firstChild.offsetWidth * dpi;
    return this.draggy.el.height = this.el.firstChild.offsetHeight * dpi;
  };

  StrikeoutView.prototype.onDrag = function(draggy, isInitial) {
    var ref, ref1;
    if (isInitial) {
      if ((ref = this.line) != null) {
        if ((ref1 = ref.animation) != null) {
          ref1.cancel();
        }
      }
      this.context.lineCap = "round";
      this.context.globalAlpha = 1;
      this.line = new SmoothLine([], window.getComputedStyle(this.el).color, 4 * dpi);
    }
    return this.addPoint(draggy);
  };

  StrikeoutView.prototype.onDrop = function(draggy, isReset) {
    var avgX, avgY, bounds, buffer, el, fn, isWithin, j, k, left, len, len1, maxX, minX, pts, ref, ref1, replaces, selectedWords, top;
    pts = this.line.getPoints();
    selectedWords = [];
    ref = this.el.firstChild.getBoundingClientRect(), left = ref.left, top = ref.top;
    avgX = pts.reduce((function(m, n) {
      return m + n.x;
    }), 0) / pts.length / dpi;
    avgY = pts.reduce((function(m, n) {
      return m + n.y;
    }), 0) / pts.length / dpi;
    minX = pts.reduce((function(m, n) {
      if (m > n.x) {
        return n.x;
      } else {
        return m;
      }
    }), 2e308) / dpi;
    maxX = pts.reduce((function(m, n) {
      if (m < n.x) {
        return n.x;
      } else {
        return m;
      }
    }), 0) / dpi;
    ref1 = this.getEl("words");
    for (j = 0, len = ref1.length; j < len; j++) {
      el = ref1[j];
      if (!(!el.classList.contains("active"))) {
        continue;
      }
      bounds = this.getBounds(el, {
        x: -left,
        y: -top
      });
      buffer = 20;
      isWithin = ((minX - buffer < bounds.left && maxX + buffer > bounds.right) || (avgX > bounds.left && avgX < bounds.right)) && avgY > bounds.top && avgY < bounds.bottom;
      el.classList.toggle("active", isWithin);
      if (isWithin) {
        selectedWords.push(el);
      }
      if (isWithin && el.dataset.replaces) {
        this.transform(el, {
          opacity: 0,
          scale: 0.8
        });
      }
    }
    this.line.erase(this.context, (function(_this) {
      return function() {
        return _this.context.clearRect(0, 0, _this.draggy.el.width, _this.draggy.el.height);
      };
    })(this));
    fn = (function(_this) {
      return function(el, replaces) {
        return window.setTimeout((function() {
          el.classList.remove("active", "word-incorrect");
          if (replaces != null) {
            el.innerHTML = replaces;
            return _this.transform(el, {
              y: 0,
              opacity: 1
            });
          }
        }), 600);
      };
    })(this);
    for (k = 0, len1 = selectedWords.length; k < len1; k++) {
      el = selectedWords[k];
      this.guesses.push($(el).text());
      replaces = el.dataset.replaces;
      delete el.dataset.replaces;
      fn(el, replaces);
    }
    return this.setState("touched");
  };

  StrikeoutView.prototype.addPoint = function(arg) {
    var x, y;
    x = arg.x, y = arg.y;
    this.line.add({
      x: x * dpi,
      y: y * dpi
    });
    this.context.clearRect(0, 0, this.draggy.el.width, this.draggy.el.height);
    return this.line.draw(this.context);
  };

  StrikeoutView.prototype.isCorrect = function() {
    var el;
    return ((function() {
      var j, len, ref, results;
      ref = this.getEl("words");
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        el = ref[j];
        if (el.dataset.replaces) {
          results.push(el);
        }
      }
      return results;
    }).call(this)).length === 0;
  };

  StrikeoutView.prototype.answerDetails = function() {
    var correctAnswer, details, isCorrect, j, len, q, questionDetails, questions, ref;
    questions = ((ref = this.options.metadata) != null ? ref.questions : void 0) || [];
    if (!(questions.length > 0)) {
      return [];
    }
    details = [];
    for (j = 0, len = questions.length; j < len; j++) {
      q = questions[j];
      correctAnswer = _.find(q.answers, function(a) {
        return a.correct === true;
      });
      isCorrect = this.guesses.includes(q.question.content);
      questionDetails = {
        question: q.question,
        answer: _.find(q.answers, function(a) {
          return a.correct === isCorrect;
        })
      };
      details.push(questionDetails);
    }
    return details;
  };

  StrikeoutView.prototype.endGame = function() {
    var el, fn, j, len, ref;
    StrikeoutView.__super__.endGame.apply(this, arguments);
    ref = this.getEl("words");
    fn = (function(_this) {
      return function(el) {
        return window.setTimeout(function() {
          var replaces;
          replaces = el.dataset.replaces;
          delete el.dataset.replaces;
          el.innerHTML = replaces;
          el.classList.remove("active", "word-incorrect");
          return _this.transform(el, {
            scale: 1,
            opacity: 1
          });
        }, 600);
      };
    })(this);
    for (j = 0, len = ref.length; j < len; j++) {
      el = ref[j];
      if (!el.dataset.replaces) {
        continue;
      }
      el.classList.add("active");
      this.transform(el, {
        scale: 0.8,
        opacity: 0
      });
      fn(el);
    }
    return this.submit();
  };

  return StrikeoutView;

})(GameView);

module.exports = StrikeoutView;
});

;require.register("engine/table/model.yaml", function(exports, require, module) {
module.exports = {"title":"table","display":"Table","category":"Content","description":"Display tabular information","features":{"narration":true,"social":true},"model":{"title":{"type":"html","default":""},"caption":{"type":"html"},"rows":{"min":1,"max":50,"type":[{"help":"To include an empty cell in any row, insert a space (\" \") in that position.\n","cells":{"min":1,"max":5,"type":[{"type":"html"}]}}]},"style":{"header":{"display":"Header Row","type":"boolean","default":true,"help":"Make the first row in the table a header."},"condensed":{"type":"boolean","default":false,"help":"Present more information by condensing the content."},"full-width":{"type":"boolean","default":true,"help":"Stretch the table to the width of the device."}}},"examples":[{"subtype":"table","title":"Product Information","style":{"header":true,"condensed":false,"full-width":true},"rows":[{"cells":["Name","Format","Price"]},{"cells":["Product X","Phone","$1,199"]},{"cells":["Product Y","Laptop","$3,499"]},{"cells":["Product Z","Tablet","$779"]}],"caption":"All information is up to date as of July 2019."}]}
});

;require.register("engine/table/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (caption, classes, continueBtnText, doneText, hasNarration, hasPrompt, i18n, isNumber, longestRow, prompt, rows, style, submitUp, title, undefined) {
buf.push("<div class=\"content-fit content-scroll content-ver text-center block-v-md\"><div class=\"content-scroll-inner block-v-md\"><h1 class=\"text-center fade-in\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"table-container\"><div class=\"table-wrapper\"><table" + (jade.cls(['table','slide-up',classes], [null,null,true])) + "><tbody>");
// iterate rows
;(function(){
  var $$obj = rows;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var row = $$obj[i];

buf.push("<tr class=\"table-row\">");
// iterate longestRow.cells
;(function(){
  var $$obj = longestRow.cells;
  if ('number' == typeof $$obj.length) {

    for (var col = 0, $$l = $$obj.length; col < $$l; col++) {
      var n = $$obj[col];

var el = row.cells[col] || ""
if ( style.header && i === 0)
{
buf.push("<th class=\"table-cell\">" + (null == (jade_interp = el) ? "" : jade_interp) + "</th>");
}
else
{
buf.push("<td" + (jade.attr("align", isNumber(el) && "right", true, false)) + " class=\"table-cell\"><div" + (jade.cls(['slide-up',"delay-" + (i) + ""], [null,true])) + ">" + (null == (jade_interp = el) ? "" : jade_interp) + "</div></td>");
}
    }

  } else {
    var $$l = 0;
    for (var col in $$obj) {
      $$l++;      var n = $$obj[col];

var el = row.cells[col] || ""
if ( style.header && i === 0)
{
buf.push("<th class=\"table-cell\">" + (null == (jade_interp = el) ? "" : jade_interp) + "</th>");
}
else
{
buf.push("<td" + (jade.attr("align", isNumber(el) && "right", true, false)) + " class=\"table-cell\"><div" + (jade.cls(['slide-up',"delay-" + (i) + ""], [null,true])) + ">" + (null == (jade_interp = el) ? "" : jade_interp) + "</div></td>");
}
    }

  }
}).call(this);

buf.push("</tr>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var row = $$obj[i];

buf.push("<tr class=\"table-row\">");
// iterate longestRow.cells
;(function(){
  var $$obj = longestRow.cells;
  if ('number' == typeof $$obj.length) {

    for (var col = 0, $$l = $$obj.length; col < $$l; col++) {
      var n = $$obj[col];

var el = row.cells[col] || ""
if ( style.header && i === 0)
{
buf.push("<th class=\"table-cell\">" + (null == (jade_interp = el) ? "" : jade_interp) + "</th>");
}
else
{
buf.push("<td" + (jade.attr("align", isNumber(el) && "right", true, false)) + " class=\"table-cell\"><div" + (jade.cls(['slide-up',"delay-" + (i) + ""], [null,true])) + ">" + (null == (jade_interp = el) ? "" : jade_interp) + "</div></td>");
}
    }

  } else {
    var $$l = 0;
    for (var col in $$obj) {
      $$l++;      var n = $$obj[col];

var el = row.cells[col] || ""
if ( style.header && i === 0)
{
buf.push("<th class=\"table-cell\">" + (null == (jade_interp = el) ? "" : jade_interp) + "</th>");
}
else
{
buf.push("<td" + (jade.attr("align", isNumber(el) && "right", true, false)) + " class=\"table-cell\"><div" + (jade.cls(['slide-up',"delay-" + (i) + ""], [null,true])) + ">" + (null == (jade_interp = el) ? "" : jade_interp) + "</div></td>");
}
    }

  }
}).call(this);

buf.push("</tr>");
    }

  }
}).call(this);

if ( caption)
{
buf.push("<tr class=\"table-row\"><td" + (jade.attr("colspan", longestRow.cells.length, true, false)) + " align=\"center\" class=\"table-cell\"><small>" + (null == (jade_interp = caption) ? "" : jade_interp) + "</small></td></tr>");
}
buf.push("</tbody></table></div></div></div></div><div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"caption" in locals_for_with?locals_for_with.caption:typeof caption!=="undefined"?caption:undefined,"classes" in locals_for_with?locals_for_with.classes:typeof classes!=="undefined"?classes:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"isNumber" in locals_for_with?locals_for_with.isNumber:typeof isNumber!=="undefined"?isNumber:undefined,"longestRow" in locals_for_with?locals_for_with.longestRow:typeof longestRow!=="undefined"?longestRow:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"rows" in locals_for_with?locals_for_with.rows:typeof rows!=="undefined"?rows:undefined,"style" in locals_for_with?locals_for_with.style:typeof style!=="undefined"?style:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/table/view.coffee", function(exports, require, module) {
var SlideView, TableView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SlideView = require("views/slide");

TableView = (function(superClass) {
  extend(TableView, superClass);

  function TableView() {
    return TableView.__super__.constructor.apply(this, arguments);
  }

  TableView.prototype.template = require("./template");

  TableView.prototype.events = function() {
    return {
      "iostap .btn-done": "submit"
    };
  };

  TableView.prototype.serialize = function() {
    var data;
    data = TableView.__super__.serialize.apply(this, arguments);
    data.isNumber = function(el) {
      return /^[\.\,\d\$£€\%\-\s]+$/.test(el);
    };
    data.longestRow = _.max(data.rows, function(r) {
      var ref;
      return ((ref = r.cells) != null ? ref.length : void 0) || 0;
    });
    data.classes = _.chain(data.style).omit("scrollable", "header").reduce((function(str, v, k) {
      if (v) {
        return str + (" table-" + k);
      } else {
        return str;
      }
    }), "").value();
    return data;
  };

  TableView.prototype.beforeShow = function() {
    var parent, table;
    this.trigger("ui", {
      flexibleHeight: true
    });
    table = this.findOne(".table");
    parent = table.parentNode;
    if (table.offsetWidth > parent.offsetWidth) {
      this.setState(true, "scroll");
      parent.addEventListener("scroll", _.bind(this.onScroll, this));
      return this.onScroll({
        target: parent
      });
    } else {
      return this.setState(false, "scroll");
    }
  };

  TableView.prototype.beforeHide = function() {
    return this.trigger("ui", {
      flexibleHeight: false
    });
  };

  TableView.prototype.onRefresh = function() {
    return this.beforeShow();
  };

  TableView.prototype.onScroll = function(e) {
    var el;
    el = e.target;
    if (el.scrollLeft <= 0) {
      return this.setState("left", "scroll-pos");
    } else if (el.scrollLeft >= el.scrollWidth - el.offsetWidth) {
      return this.setState("right", "scroll-pos");
    } else {
      return this.setState("between", "scroll-pos");
    }
  };

  return TableView;

})(SlideView);

module.exports = TableView;
});

;require.register("engine/tap-in-order/model.yaml", function(exports, require, module) {
module.exports = {"title":"tap-in-order","display":"Select in Order","category":"Relationships","features":{"stars":true,"social":true},"model":{"title":{"type":"html","default":""},"list":{"display":"List items","type":[{"type":"image"}],"min":2,"max":6},"reject":{"type":"boolean","default":false,"display":"Reject Answers","help":"Rejects answers tapped out of order.\n"},"answer":{"text":{"type":"html","default":"","display":"Answer Text"},"correct":{"type":"html","default":"That's correct!","display":"Correct Reinforcement"},"incorrect":{"type":"html","default":"Not quite...","display":"Incorrect Reinforcement"},"takeaway":{"type":"html","default":"","display":"Core Message"}},"game":{"timer":{"limit":{"type":"number","default":-1,"display":"Time Limit (seconds)"},"out-of-time-prompt":{"type":"html","display":"Out of time prompt"}}},"prompt":{"type":"html","default":"Select each item in order"},"doneText":{"type":"html","default":"Continue","display":"Done text"}},"examples":[{"subtype":"tap-in-order","title":"Select in order","reject":false,"list":["img/examples/product-phone.png","img/examples/product-laptop.png","img/examples/product-tablet.png"],"answer":{"incorrect":"Not quite...","correct":"That's correct!","text":"X, Y, then Z is the correct order.\n"}}]}
});

;require.register("engine/tap-in-order/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (continueBtnText, dimensions, doneText, game, hasNarration, hasPrompt, i18n, prompt, submitUp, tappies, title, undefined) {
if ( game && game.timer && game.timer.limit > 0 && !game.timer.isDisabled)
{
buf.push("<div class=\"full-screen\"><div class=\"game-stepper text-lg text-bold\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div></div>");
}
jade_mixins["image"] = jade_interp = function(imageUrl, klass){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<img" + (jade.attr("src", imageUrl, true, false)) + (jade.cls([klass], [true])) + "/>");
};
buf.push("<div class=\"slide-parent content-fill text-center block-v-md\"><div class=\"tappies-parent content-fill\"><div class=\"content-sm-ver content-md-ver content-lg-fill row\"><div class=\"title col-sm-12 col-lg-5 content-lg-ver block-v-md\"><h1 class=\"fade-in delay-3\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1></div><div class=\"col-sm-12 col-lg-7 content-lg-ver tappies\"><div class=\"row content-fill\">");
// iterate tappies
;(function(){
  var $$obj = tappies;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var tappy = $$obj[i];

buf.push("<div" + (jade.attr("data-true-index", tappy.trueIndex, true, false)) + (jade.attr("data-original-index", i, true, false)) + (jade.attr("data-content", tappy.image, true, false)) + (jade.attr("style", "height: " + (dimensions.height) + "; width: " + (dimensions.width) + "", true, false)) + (jade.cls(['tappy','block-md','delay-4','col-lg-12','col-sm-12','block-box-sizing',(i % 2 === 0 ? "slide-right" : "slide-left")], [null,null,null,null,null,null,true])) + "><div class=\"block-dk tappy-child content-fill\"><div class=\"content-fill block-v-md\">");
if ( tappy.image)
{
jade_mixins["image"](tappy.image, 'img content-ver');
}
buf.push("</div><div class=\"number-container text-lg\"><div" + (jade.attr("data-true-index", tappy.trueIndex, true, false)) + (jade.attr("data-original-index", i, true, false)) + " class=\"number block-dk text-bold\"></div></div></div></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var tappy = $$obj[i];

buf.push("<div" + (jade.attr("data-true-index", tappy.trueIndex, true, false)) + (jade.attr("data-original-index", i, true, false)) + (jade.attr("data-content", tappy.image, true, false)) + (jade.attr("style", "height: " + (dimensions.height) + "; width: " + (dimensions.width) + "", true, false)) + (jade.cls(['tappy','block-md','delay-4','col-lg-12','col-sm-12','block-box-sizing',(i % 2 === 0 ? "slide-right" : "slide-left")], [null,null,null,null,null,null,true])) + "><div class=\"block-dk tappy-child content-fill\"><div class=\"content-fill block-v-md\">");
if ( tappy.image)
{
jade_mixins["image"](tappy.image, 'img content-ver');
}
buf.push("</div><div class=\"number-container text-lg\"><div" + (jade.attr("data-true-index", tappy.trueIndex, true, false)) + (jade.attr("data-original-index", i, true, false)) + " class=\"number block-dk text-bold\"></div></div></div></div>");
    }

  }
}).call(this);

buf.push("</div></div></div></div></div><div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"dimensions" in locals_for_with?locals_for_with.dimensions:typeof dimensions!=="undefined"?dimensions:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"game" in locals_for_with?locals_for_with.game:typeof game!=="undefined"?game:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"tappies" in locals_for_with?locals_for_with.tappies:typeof tappies!=="undefined"?tappies:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/tap-in-order/view.coffee", function(exports, require, module) {
var Device, GameView, TapInOrderView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

GameView = require("views/base/game");

Device = require("lib/device");

TapInOrderView = (function(superClass) {
  extend(TapInOrderView, superClass);

  function TapInOrderView() {
    return TapInOrderView.__super__.constructor.apply(this, arguments);
  }

  TapInOrderView.prototype.template = require("./template");

  TapInOrderView.prototype.events = function() {
    return {
      "iostap .tappy": "tappyTouch",
      "iostap .btn-done": "endGame"
    };
  };

  TapInOrderView.prototype.serialize = function() {
    var data, length, useGrid;
    data = TapInOrderView.__super__.serialize.apply(this, arguments);
    data.tappies = _.chain(data.list).filter(function(el) {
      return el;
    }).map(function(el, i) {
      return {
        image: el,
        trueIndex: i
      };
    }).shuffle().value();
    length = data.tappies.length;
    useGrid = length >= 4;
    data.dimensions = {
      width: (useGrid ? 50 : 100) + "%",
      height: (100 / (useGrid ? (length + length % 2) / 2 : length)) + "%"
    };
    return data;
  };

  TapInOrderView.prototype.show = function() {
    TapInOrderView.__super__.show.apply(this, arguments);
    this.rejectIncorrectAnswer();
    this.initTapState();
    this.setEl(this.findOne(".tappies-parent"), "tappiesParent");
    this.setEl(this.findAll(".tappy"), "tappies");
    this.setEl(this.findOne(".title"), "title");
    this.setEl(this.findAll(".number"), "numbers");
    this.refreshTappy();
    return this.enterGame();
  };

  TapInOrderView.prototype.onResize = function() {
    return this.setTappyHeight();
  };

  TapInOrderView.prototype.refreshTappy = function() {
    var el, i, j, len, ref;
    ref = this.getEl("tappies");
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      el = ref[i];
      el.classList.add("no-delay");
    }
    this.listenTo(this, "resize", this.onResize);
    return this.setTappyHeight();
  };

  TapInOrderView.prototype.onRefresh = function() {
    TapInOrderView.__super__.onRefresh.apply(this, arguments);
    return this.fillTaps();
  };

  TapInOrderView.prototype.rejectIncorrectAnswer = function() {
    return this.reject = this.options.data.reject;
  };

  TapInOrderView.prototype.setTappyHeight = function() {
    var height, parent;
    parent = this.getEl("tappiesParent");
    height = parent.offsetHeight;
    if (Device.breakpoint(["xs", "sm"])) {
      height -= this.getEl("title").offsetHeight;
    }
    if (this.getEl("tappies").item(0) != null) {
      return this.getEl("tappies").item(0).parentNode.style.height = height + "px";
    } else {

    }
  };

  TapInOrderView.prototype.initTapState = function() {
    return this.tapsSoFar = [];
  };

  TapInOrderView.prototype.isCorrectSoFar = function() {
    var orderReducer;
    orderReducer = function(order, tap, i) {
      return order && tap === i.toString();
    };
    return this.tapsSoFar.reduce(orderReducer, true);
  };

  TapInOrderView.prototype.isCorrect = function() {
    if (this.tapsSoFar == null) {
      this.initTapState();
    }
    return this.isCorrectSoFar() && this.tapsSoFar.length === this.options.data.list.length;
  };

  TapInOrderView.prototype.fillTap = function(num) {
    var arrayPos, parent;
    parent = num.parentNode.parentNode.parentNode;
    arrayPos = this.tapsSoFar.indexOf(num.dataset.trueIndex);
    if (arrayPos > -1) {
      num.innerHTML = arrayPos + 1;
      parent.classList.add("active");
      return parent.dataset.filledIndex = arrayPos;
    } else {
      num.innerHTML = "";
      parent.classList.remove("active");
      return parent.dataset.filledIndex = "";
    }
  };

  TapInOrderView.prototype.fillTaps = function() {
    var i, j, len, num, ref, results;
    ref = this.getEl("numbers");
    results = [];
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      num = ref[i];
      results.push(this.fillTap(num));
    }
    return results;
  };

  TapInOrderView.prototype.showAnswer = function() {
    var el, i, j, len, ref, results;
    if (this.isCorrect()) {
      this.el.classList.add("correct-" + (this.isCorrect()));
      return this.el.classList.remove("correct-" + (!this.isCorrect()));
    } else {
      ref = this.getEl("tappies");
      results = [];
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        el = ref[i];
        if (el.dataset.filledIndex !== el.dataset.trueIndex) {
          results.push(el.classList.add("incorrect"));
        } else {
          results.push(el.classList.remove("incorrect"));
        }
      }
      return results;
    }
  };

  TapInOrderView.prototype.keepTapsBefore = function(index) {
    var indexOfTap;
    indexOfTap = this.tapsSoFar.indexOf(index);
    if (indexOfTap > 0) {
      if (indexOfTap > -1) {
        return this.tapsSoFar = this.tapsSoFar.slice(0, indexOfTap);
      }
    } else if (indexOfTap === 0) {
      return this.tapsSoFar = [];
    }
  };

  TapInOrderView.prototype.onRejected = function(e) {
    this.currentTappy.classList.add("incorrect");
    return window.setTimeout(((function(_this) {
      return function() {
        return _this.currentTappy.classList.remove("incorrect");
      };
    })(this)), 400);
  };

  TapInOrderView.prototype.tappyTouch = function(e) {
    var alreadyTapped, touchedIndex, touchedOrigIndex;
    this.currentTappy = e.currentTarget;
    touchedIndex = e.currentTarget.dataset.trueIndex;
    touchedOrigIndex = e.currentTarget.dataset.originalIndex;
    alreadyTapped = this.tapsSoFar.indexOf(touchedIndex) !== -1;
    if (alreadyTapped) {
      this.keepTapsBefore(touchedIndex);
    } else {
      this.tapsSoFar.push(touchedIndex);
    }
    if (this.isCorrectSoFar() || !this.reject) {
      this.fillTaps(this.getEl("numbers")[e.currentTarget.dataset.originalIndex]);
    } else {
      this.keepTapsBefore(touchedIndex);
      if (this.reject) {
        this.onRejected();
      }
    }
    return this.setState("touched");
  };

  TapInOrderView.prototype.answerDetails = function() {
    var answer, answerContent, answerElements, details, isCorrect, question, questions, ref;
    questions = ((ref = this.options.metadata) != null ? ref.questions : void 0) || [];
    if (!(questions.length > 0)) {
      return [];
    }
    question = questions[0];
    isCorrect = this.isCorrect();
    answer = _.find(question.answers, function(a) {
      return a.correct === isCorrect;
    });
    answerElements = _.map(this.tapsSoFar, (function(_this) {
      return function(idx) {
        return _.find(_this.getEl("tappies"), function(tappy) {
          return this.$(tappy).data("true-index") === Number(idx);
        });
      };
    })(this));
    answerContent = _.map(answerElements, function(el) {
      return this.$(el).data("content");
    });
    answer.content = answerContent.join(", ");
    details = {
      question: questions[0].question,
      answer: answer
    };
    return [details];
  };

  TapInOrderView.prototype.endGame = function() {
    TapInOrderView.__super__.endGame.apply(this, arguments);
    return this.submit();
  };

  return TapInOrderView;

})(GameView);

module.exports = TapInOrderView;
});

;require.register("engine/text-and-images/model.yaml", function(exports, require, module) {
module.exports = {"title":"text-and-images","display":"Text And Images","category":"Content","description":"Display rich content and images.","visible":false,"features":{"narration":true,"social":true},"model":{"title":{"type":"html"},"content":{"min":1,"max":10,"type":[{"text":{"type":"html"},"image":{"type":"image","display":"Image"}}]},"prompt":{"type":"html","default":"Scroll to see more"},"doneText":{"type":"html","default":"Continue","display":"Done text"}},"examples":[{"subtype":"text-and-images","title":"About Product Z","content":[{"text":"Product Z is our third product in the Product line. It is three times as good as product X, but only takes up one third of the space. Don't believe us? See below:\n","image":"img/examples/product-tablet.png"},{"text":"Review the following interactive slides to learn more about Product Z.\n"}]}]}
});

;require.register("engine/text-and-images/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (content, continueBtnText, doneText, hasNarration, hasPrompt, i18n, prompt, submitUp, title, undefined) {
jade_mixins["image"] = jade_interp = function(imageUrl, klass){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<img" + (jade.attr("src", imageUrl, true, false)) + (jade.cls([klass], [true])) + "/>");
};
buf.push("<div class=\"content-md content-fill\"><div class=\"content-scroll content-sm-scroll content-md-scroll block-v-lg fade-in\"><div class=\"content-scroll-inner hide-overflow block-h-xl\"><div class=\"row\"><div class=\"col-sm-12 col-lg-10 col-lg-offset-1\"><h1 class=\"text-center slide-down\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1>");
// iterate content
;(function(){
  var $$obj = content;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var item = $$obj[i];

buf.push("<div" + (jade.cls(['fade-in',"delay-" + (i + 1) + ""], [null,true])) + ">");
if ( item.text)
{
buf.push("<div class=\"text-md\">" + (null == (jade_interp = item.text) ? "" : jade_interp) + "</div>");
}
if ( item.image)
{
buf.push("<p class=\"text-center block-v-md\">");
jade_mixins["image"](item.image, 'scrollable-image');
buf.push("</p>");
}
buf.push("</div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var item = $$obj[i];

buf.push("<div" + (jade.cls(['fade-in',"delay-" + (i + 1) + ""], [null,true])) + ">");
if ( item.text)
{
buf.push("<div class=\"text-md\">" + (null == (jade_interp = item.text) ? "" : jade_interp) + "</div>");
}
if ( item.image)
{
buf.push("<p class=\"text-center block-v-md\">");
jade_mixins["image"](item.image, 'scrollable-image');
buf.push("</p>");
}
buf.push("</div>");
    }

  }
}).call(this);

buf.push("</div></div></div></div></div><div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"content" in locals_for_with?locals_for_with.content:typeof content!=="undefined"?content:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/text-and-images/view.coffee", function(exports, require, module) {
var ScrollingMediaView, TextAndImagesView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ScrollingMediaView = require("../scrolling-media/view");

TextAndImagesView = (function(superClass) {
  extend(TextAndImagesView, superClass);

  function TextAndImagesView() {
    return TextAndImagesView.__super__.constructor.apply(this, arguments);
  }

  TextAndImagesView.prototype.serialize = function() {
    var content, data, i, image, len, ref, ref1, text;
    data = TextAndImagesView.__super__.serialize.apply(this, arguments);
    content = [];
    ref = data.content;
    for (i = 0, len = ref.length; i < len; i++) {
      ref1 = ref[i], text = ref1.text, image = ref1.image;
      if (text) {
        if (!/^<p>/.test(text)) {
          text = written.wrapInTag(text, "p");
        }
        content.push({
          content: text,
          contentType: "text"
        });
      }
      if (image) {
        content.push({
          content: image,
          contentType: "image"
        });
      }
    }
    data.content = content;
    return data;
  };

  return TextAndImagesView;

})(ScrollingMediaView);

module.exports = TextAndImagesView;
});

;require.register("engine/text-sequence/model.yaml", function(exports, require, module) {
module.exports = {"title":"text-sequence","display":"Text Sequence","category":"Content","links":{"academy":"https://academy.edapp.com/how-to-text-sequence-template/"},"features":{"narration":true,"social":true},"description":"Display a sequence of text","model":{"title":{"type":"html","default":""},"content":{"min":1,"max":32,"type":[{"type":"html","default":""}]},"label":{"type":"html","default":"Step","help":"The label of each step in the sequence. eg. “Step 1 of 4”"},"canGoBack":{"type":"boolean","default":false,"display":"Allow Free Navigation","help":"Let users return to previous steps by tapping or clicking on them.\n"},"prompt":{"type":"html","default":"Read more"},"doneText":{"type":"html","default":"Continue","display":"Done text"}},"examples":[{"subtype":"text-sequence","title":"About Product Y","stepTitle":"Step","canGoBack":true,"content":["Product Y builds on everything our customers loved about Product X","It is the focus of the upcoming sales cycle","You should mention Product Y to existing customers who enjoy Product X","Product Y will have a discounted price at launch"]}]}
});

;require.register("engine/text-sequence/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (canGoBack, content, continueBtnText, doneText, hasNarration, hasPrompt, i18n, prompt, submitUp, title, undefined) {
buf.push("<div class=\"steps-container content-fill\"><div class=\"steps text-center\">");
if ( title)
{
buf.push("<div data-step='0' class=\"title tight block-v-md fade-in delay-3\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</div>");
}
// iterate content
;(function(){
  var $$obj = content;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var item = $$obj[i];

buf.push("<div" + (jade.attr("data-step", i + 1, true, false)) + " class=\"step fade-in tight block-v-md\">" + (null == (jade_interp = item) ? "" : jade_interp) + "</div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var item = $$obj[i];

buf.push("<div" + (jade.attr("data-step", i + 1, true, false)) + " class=\"step fade-in tight block-v-md\">" + (null == (jade_interp = item) ? "" : jade_interp) + "</div>");
    }

  }
}).call(this);

buf.push("</div>");
if ( content.length > 0)
{
if ( canGoBack)
{
buf.push("<div class=\"btn btn-muted btn-circular btn-up\"><span class=\"icon icon-chevron-up text-lg\"></span></div>");
}
buf.push("<div class=\"btn btn-muted btn-circular btn-down\"><span class=\"icon icon-chevron-down text-lg\"></span></div>");
}
buf.push("</div><div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"canGoBack" in locals_for_with?locals_for_with.canGoBack:typeof canGoBack!=="undefined"?canGoBack:undefined,"content" in locals_for_with?locals_for_with.content:typeof content!=="undefined"?content:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/text-sequence/view.coffee", function(exports, require, module) {
var SlideView, TextSequenceView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SlideView = require("views/slide");

TextSequenceView = (function(superClass) {
  extend(TextSequenceView, superClass);

  function TextSequenceView() {
    return TextSequenceView.__super__.constructor.apply(this, arguments);
  }

  TextSequenceView.prototype.template = require("./template");

  TextSequenceView.prototype.events = function() {
    return {
      "iostap": "onTap",
      "iostap .btn-done": "submit"
    };
  };

  TextSequenceView.prototype.serialize = function() {
    var data;
    data = TextSequenceView.__super__.serialize.apply(this, arguments);
    data.content = _.compact(data.content);
    data.hasPrompt = true;
    return data;
  };

  TextSequenceView.prototype.beforeHide = function() {
    return this.trigger("ui", {
      flexibleHeight: false
    });
  };

  TextSequenceView.prototype.beforeShow = function(preventTransition) {
    var child, i, j, len, ref;
    this.trigger("ui", {
      flexibleHeight: true
    });
    this.setEl(this.findOne(".steps"), "steps");
    this.setEl(this.findOne(".slide-footer-prompt"), "prompt");
    this.setEl(this.findOne(".btn-up"), "btn-up");
    this.setEl(this.findOne(".btn-down"), "btn-down");
    ref = this.getEl("steps").children;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      child = ref[i];
      child.classList.remove("active");
      this.transform(child, {
        opacity: "",
        transition: ""
      });
    }
    if (!this.getEl("steps")) {
      return;
    }
    this.transition(this.getEl("steps"), preventTransition ? "none" : "all 300ms");
    this.currentIndex = 0;
    this.totalLength = this.getEl("steps").children.length;
    return this.showNextStep(true);
  };

  TextSequenceView.prototype.onTap = function(e) {
    var ref;
    if ((e != null ? (ref = e.detail) != null ? ref.clientY : void 0 : void 0) < this.el.offsetHeight / 2 && this.currentIndex > 0 && this.options.data.canGoBack) {
      this.currentIndex--;
      return this.showNextStep();
    } else if (this.currentIndex < this.totalLength - 1) {
      this.currentIndex++;
      this.showNextStep();
      if (this.currentIndex === this.totalLength - 1) {
        return this.setState("touched");
      }
    }
  };

  TextSequenceView.prototype.showNextStep = function(withoutPrompt) {
    this.transformSteps();
    if (!withoutPrompt) {
      return this.setPrompt();
    }
  };

  TextSequenceView.prototype.transformSteps = function() {
    var child, i, j, len, step, steps, y;
    steps = this.getEl("steps").children;
    step = steps[this.currentIndex];
    step.classList.add("active");
    y = this.el.offsetHeight / 2 - (step.offsetTop + step.offsetHeight / 2);
    this.getEl("btn-up").style.opacity = this.currentIndex / (this.totalLength - 1);
    this.getEl("btn-down").style.opacity = 1 - this.currentIndex / (this.totalLength - 1);
    if (y < -this.getEl("steps").firstChild.offsetHeight / 2) {
      this.trigger("scroll", null, "middle");
    } else {
      this.trigger("scroll", null, "top");
    }
    for (i = j = 0, len = steps.length; j < len; i = ++j) {
      child = steps[i];
      this.transform(child, {
        transition: "all 900ms",
        opacity: i <= this.currentIndex ? 1 - (this.currentIndex - i) / this.totalLength : 0
      });
    }
    return this.transform(this.getEl("steps"), {
      y: y
    });
  };

  TextSequenceView.prototype.setPrompt = function() {
    var index, preposition;
    index = this.currentIndex;
    if (!this.options.data.title) {
      index += 1;
    }
    preposition = i18n('text-sequence.of') || 'of';
    return this.getEl("prompt").innerHTML = index > 0 || !this.options.data.title ? this.options.data.label + " " + index + " " + preposition + " " + this.options.data.content.length : this.options.data.prompt;
  };

  TextSequenceView.prototype.refresh = function(params) {
    var changed, i, item, j, len, ref;
    ref = _.compact(params.data.content);
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      item = ref[i];
      if (content && this.options.data.content[i] !== item) {
        changed = i;
      }
    }
    if (params.data.title !== this.options.data.title) {
      changed = -1;
    }
    TextSequenceView.__super__.refresh.apply(this, arguments);
    if (changed != null) {
      this.beforeShow(true);
      this.el.classList.add("no-transition");
      while (this.currentIndex < changed) {
        this.onTap();
      }
      return window.setTimeout(((function(_this) {
        return function() {
          _this.transition(_this.getEl("steps"), "all 300ms");
          return _this.el.classList.remove("no-transition");
        };
      })(this)), 1);
    } else {
      return this.beforeShow();
    }
  };

  TextSequenceView.prototype.screenshot = function() {
    this.currentIndex = -1;
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var getPages;
        getPages = function(images) {
          if (images == null) {
            images = [];
          }
          if (_this.currentIndex < _this.totalLength - 1) {
            _this.currentIndex++;
            _this.showNextStep();
            return _this.collateScreenshots(images).then(getPages)["catch"](reject);
          } else {
            return resolve(images);
          }
        };
        return getPages();
      };
    })(this));
  };

  return TextSequenceView;

})(SlideView);

module.exports = TextSequenceView;
});

;require.register("engine/title/model.yaml", function(exports, require, module) {
module.exports = {"title":"title","display":"Title Slide","category":"Content","features":{"narration":true},"description":"Introduce your lesson","model":{"title":{"type":"html","default":"A title slide"},"subtitle":{"type":"html","default":"An optional subtitle","required":false},"buttonText":{"type":"html","display":"Button text","default":"OK, let's go!"},"exitButton":{"type":"boolean","default":true,"display":"Exit Button","help":"Give users the option to leave the lesson from this slide."}}}
});

;require.register("engine/title/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (buttonText, config, continueBtnText, doneText, hasNarration, hasPrompt, i18n, prompt, submitUp, subtitle, title) {
buf.push("<div class=\"content-scroll content-fit content-ver text-center block-v-md\"><div class=\"content-scroll-inner\"><div class=\"block-v-md\"><h1 class=\"slide-up\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1>");
if ( subtitle)
{
buf.push("<div class=\"slide-up delay-1 text-md\">" + (null == (jade_interp = subtitle) ? "" : jade_interp) + "</div>");
}
buf.push("</div><div class=\"block-v-md\"><div class=\"btn btn-solid btn-next slide-up delay-2\">" + (null == (jade_interp = buttonText) ? "" : jade_interp) + "</div></div></div></div>");
if ( config.contextRequiresExitButton)
{
buf.push("<div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");
}}.call(this,"buttonText" in locals_for_with?locals_for_with.buttonText:typeof buttonText!=="undefined"?buttonText:undefined,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"subtitle" in locals_for_with?locals_for_with.subtitle:typeof subtitle!=="undefined"?subtitle:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/title/view.coffee", function(exports, require, module) {
var SlideView, TitleView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SlideView = require("views/slide");

TitleView = (function(superClass) {
  extend(TitleView, superClass);

  function TitleView() {
    return TitleView.__super__.constructor.apply(this, arguments);
  }

  TitleView.prototype.template = require("./template");

  TitleView.prototype.serialize = function() {
    var data;
    data = TitleView.__super__.serialize.apply(this, arguments);
    data.continueBtnText = i18n("buttons.close-lesson");
    data.hasPrompt = this.options.scorm || !data.exitButton;
    return data;
  };

  TitleView.prototype.events = function() {
    return {
      "iostap .btn-next": "next",
      "iostap .btn-done": "exit"
    };
  };

  TitleView.prototype.beforeShow = function() {
    return this.trigger("ui", {
      flexibleHeight: true
    });
  };

  TitleView.prototype.beforeHide = function() {
    return this.trigger("ui", {
      flexibleHeight: false
    });
  };

  return TitleView;

})(SlideView);

module.exports = TitleView;
});

;require.register("engine/url/model.yaml", function(exports, require, module) {
module.exports = {"title":"url","display":"External URL","category":"Advanced","description":"Display a webpage within your lesson","model":{"url":{"type":"string","display":"URL","default":"https://edapp.com","transform":false,"help":"Include the full URL that points to your content. eg. https://edapp.com/ </br> Some URLs can't be displayed. For more information, click <a href=\"https://www.edapp.com/blog/custom-url-template/\" target=\"_blank\">here</a>.\n"},"background":{"type":"string","default":"","display":"Background Color","help":"This color (eg. \"orange\", \"#f90\", \"rgb(255,160,0)\") will be used for the background of the entire screen in lightbox mode.\n"},"button":{"text":{"type":"text","default":"Continue","display":"Done text"},"position":{"type":"select","enum":["Below","Overlay Bottom","Overlay Top"],"default":"Below","help":"Choose the best position based on your content.\n"}}}}
});

;require.register("engine/url/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (Date, button, i18n, url) {
buf.push("<div class=\"full-screen content-fill hide-overflow\"><iframe" + (jade.attr("src", url ? (url + (url.includes("?") ? "&" : "?") + "timestamp=" + Date.now()) : '', true, false)) + " type=\"text/html\" frameborder=\"0\" sandbox=\"allow-scripts allow-same-origin allow-forms\" class=\"url-object\"></iframe><div class=\"exit-btn btn\">" + (jade.escape(null == (jade_interp = (button && button.text) || i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");}.call(this,"Date" in locals_for_with?locals_for_with.Date:typeof Date!=="undefined"?Date:undefined,"button" in locals_for_with?locals_for_with.button:typeof button!=="undefined"?button:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"url" in locals_for_with?locals_for_with.url:typeof url!=="undefined"?url:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/url/view.coffee", function(exports, require, module) {
var Lesson, ScormAttempt, Session, SlideView, URLView, ref,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SlideView = require("views/slide");

ScormAttempt = require("models/scormAttempt");

ref = Application.actions(), Session = ref.Session, Lesson = ref.Lesson;

URLView = (function(superClass) {
  extend(URLView, superClass);

  function URLView() {
    return URLView.__super__.constructor.apply(this, arguments);
  }

  URLView.prototype.template = require("./template");

  URLView.prototype.events = function() {
    return {
      "iostap .exit-btn": "submit"
    };
  };

  URLView.prototype.beforeShow = function() {
    var position, ref1, ref2;
    position = ((ref1 = this.options.data.button) != null ? (ref2 = ref1.position) != null ? ref2.toLowerCase() : void 0 : void 0) || "below";
    this.setState(written.hyphenCase(position), "exit-btn");
    this.trigger("ui", {
      lightbox: this.options.data.background || true,
      flexible: true,
      fullscreen: true
    });
    return this.onResize();
  };

  URLView.prototype.beforeHide = function() {
    return this.trigger("ui", {
      lightbox: false,
      flexible: false,
      fullscreen: false
    });
  };

  URLView.prototype.show = function() {
    return this.listenTo(this, "resize", this.onResize);
  };

  URLView.prototype.onRefresh = function() {
    this.beforeShow();
    return URLView.__super__.onRefresh.apply(this, arguments);
  };

  URLView.prototype.onResize = function() {
    var button, iframe;
    if (this.currentState["exit-btn"] === "below") {
      button = this.findOne(".exit-btn");
      iframe = this.findOne(".url-object");
      iframe.style.bottom = button.offsetHeight + "px";
      return iframe.style.height = (iframe.parentNode.offsetHeight - button.offsetHeight) + "px";
    }
  };

  return URLView;

})(SlideView);

module.exports = URLView;
});

;require.register("engine/video-collection/model.yaml", function(exports, require, module) {
module.exports = {"title":"video-collection","display":"Video Collection","category":"Content","description":"Tap to view video","features":{"social":true},"model":{"title":{"type":"html"},"videos":{"type":[{"url":{"type":"video","display":"Video"},"thumbnail":{"type":"image","help":"Recommended size • 600 × 200px"},"title":{"type":"html"},"duration":{"type":"number","hidden":true,"default":0}}],"min":2,"max":6},"duration":{"type":"number","hidden":true,"default":0},"stream":{"type":"boolean","default":true,"display":"Play on Demand","help":"Play this video on demand instead of downloading all at once. This is recommended for longer videos. This option requires the learner to have an active internet connection and does not work in offline mode.\n"},"prompt":{"type":"text","default":"Tap to view each video"},"doneText":{"type":"html","default":"Continue","display":"Done text"}},"examples":[{"subtype":"video-collection","title":"Video Collection","videos":[{"url":"video/example.mp4","thumbnail":"img/examples/product-phone.png","title":"Product X"},{"url":"video/example.mp4","thumbnail":"img/examples/product-laptop.png","title":"Product Y"}]}]}
});

;require.register("engine/video-collection/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (config, continueBtnText, doneText, hasNarration, hasPrompt, i18n, playinline, prompt, submitUp, title, undefined, videos) {
jade_mixins["video-stream"] = jade_interp = function(videoUrl, playsinline, controls, klass, poster){
var block = (this && this.block), attributes = (this && this.attributes) || {};
playinline = playinline || true
controls = controls || true
klass = klass || 'video vjs-fluid'
var cloudinaryVideoFolderUrl = config.CLOUDINARY_CDN_URL+config.CLOUDINARY_VIDEO_FOLDER
var streamUrl = ''
if ( videoUrl && videoUrl.indexOf(cloudinaryVideoFolderUrl) > -1)
{
streamUrl = videoUrl.replace(cloudinaryVideoFolderUrl, cloudinaryVideoFolderUrl+'sp_full_hd/')
streamUrl = streamUrl.replace('.mp4', '.m3u8')
}
buf.push("<video" + (jade.attr("webkit-playsinline", playsinline, true, false)) + (jade.attr("controls", controls, true, false)) + " preload=\"auto\"" + (jade.attr("dir", config.direction, true, false)) + (jade.attr("poster", poster, true, false)) + (jade.cls(['video-js',klass], [null,true])) + "><source" + (jade.attr("src", videoUrl, true, false)) + "/>");
if ( streamUrl)
{
buf.push("<source" + (jade.attr("src", streamUrl, true, false)) + "/>");
}
buf.push("</video>");
};
buf.push("<div class=\"tappies-parent block-v-lg content-fill text-center\"><div class=\"thumbnail-collection content-fill clearfix\"><div class=\"content\"><h1 class=\"title slide-down delay-3 tight block-v-md\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"tappies row\">");
// iterate videos
;(function(){
  var $$obj = videos;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var video = $$obj[i];

var double = "col-sm-6";
var single = "col-md-8 col-md-offset-2 col-sm-12";
buf.push("<div" + (jade.attr("data-index", i, true, false)) + (jade.cls(['tappy','slide-up','block-v-sm','block-box-sizing',"delay-" + (i + 1) + " " + (videos.length >= 4 ? double : single) + ""], [null,null,null,null,true])) + "><div" + (jade.attr("style", (
                video.thumbnail && "background-image:url(" + (video.thumbnail) + ")"
              ), true, false)) + (jade.cls(['tappy-child','block-dk',(video.thumbnail && video.title) ? "dark" : ""], [null,null,true])) + ">");
if ( video.title)
{
buf.push("<div class=\"thumb-content text-lg text-bold block-md block-box-sizing\">" + (null == (jade_interp = video.title) ? "" : jade_interp) + "</div>");
}
buf.push("</div></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var video = $$obj[i];

var double = "col-sm-6";
var single = "col-md-8 col-md-offset-2 col-sm-12";
buf.push("<div" + (jade.attr("data-index", i, true, false)) + (jade.cls(['tappy','slide-up','block-v-sm','block-box-sizing',"delay-" + (i + 1) + " " + (videos.length >= 4 ? double : single) + ""], [null,null,null,null,true])) + "><div" + (jade.attr("style", (
                video.thumbnail && "background-image:url(" + (video.thumbnail) + ")"
              ), true, false)) + (jade.cls(['tappy-child','block-dk',(video.thumbnail && video.title) ? "dark" : ""], [null,null,true])) + ">");
if ( video.title)
{
buf.push("<div class=\"thumb-content text-lg text-bold block-md block-box-sizing\">" + (null == (jade_interp = video.title) ? "" : jade_interp) + "</div>");
}
buf.push("</div></div>");
    }

  }
}).call(this);

buf.push("</div></div></div></div>");
// iterate videos
;(function(){
  var $$obj = videos;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var video = $$obj[i];

buf.push("<div class=\"video-details content-fill\"><div class=\"full-screen\"><span class=\"exit-video block-md icon icon-close text-xl\"></span></div><div class=\"full-screen video-container\">");
jade_mixins["video-stream"](video.url, true, true, "video vjs-fluid multi-content");
buf.push("</div></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var video = $$obj[i];

buf.push("<div class=\"video-details content-fill\"><div class=\"full-screen\"><span class=\"exit-video block-md icon icon-close text-xl\"></span></div><div class=\"full-screen video-container\">");
jade_mixins["video-stream"](video.url, true, true, "video vjs-fluid multi-content");
buf.push("</div></div>");
    }

  }
}).call(this);

buf.push("<div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"playinline" in locals_for_with?locals_for_with.playinline:typeof playinline!=="undefined"?playinline:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined,"videos" in locals_for_with?locals_for_with.videos:typeof videos!=="undefined"?videos:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/video-collection/view.coffee", function(exports, require, module) {
var Preloader, SlideView, VideoCollectionView, device,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Preloader = require("lib/preload");

SlideView = require("views/slide");

device = require("lib/device");

VideoCollectionView = (function(superClass) {
  extend(VideoCollectionView, superClass);

  function VideoCollectionView() {
    return VideoCollectionView.__super__.constructor.apply(this, arguments);
  }

  VideoCollectionView.prototype.template = require("./template");

  VideoCollectionView.prototype.events = function() {
    return {
      "iostap .btn-done": "submit",
      "iostap .exit-video": "exitVideo",
      "iostap .tappy": "onTapThumbnail"
    };
  };

  VideoCollectionView.prototype.serialize = function() {
    var data;
    data = VideoCollectionView.__super__.serialize.apply(this, arguments);
    data.isShort = _.chain(data.videos).pluck("title").sortBy("length").last().value().length < 20;
    data.videos = _.filter(data.videos || [], function(d) {
      return d.url;
    });
    data.hasPrompt = true;
    return data;
  };

  VideoCollectionView.prototype.onResize = function() {
    var el, height, i, j, len, length, ref, results, tappyHeight;
    length = this.getEl("tappies").children.length;
    height = this.getEl("parent").firstChild.offsetHeight - this.getEl("title").offsetHeight;
    if (length >= 4) {
      tappyHeight = (height * (1 + length / 10)) / length;
    } else {
      tappyHeight = height / length;
    }
    ref = this.getEl("tappies").children;
    results = [];
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      el = ref[i];
      results.push(el.style.height = tappyHeight + "px");
    }
    return results;
  };

  VideoCollectionView.prototype.onRefresh = function() {
    this.beforeShow();
    return this.show();
  };

  VideoCollectionView.prototype.beforeShow = function() {
    var onExit, player, video;
    this.setEl(this.findOne(".tappies-parent"), "parent");
    this.setEl(this.findOne(".tappies"), "tappies");
    this.setEl(this.findOne(".title"), "title");
    this.setEl(this.findAll(".video-details"), "videoDetails");
    this.videos = (function() {
      var j, len, ref, results;
      ref = this.findAll("video");
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        video = ref[j];
        player = window.videojs(video, {
          fluid: true
        });
        onExit = (function(_this) {
          return function() {
            return window.setTimeout((function() {
              return _this.exitVideo();
            }), 300);
          };
        })(this);
        results.push((function(_this) {
          return function(player) {
            return player.on("fullscreenchange", function() {
              if (!player.isFullscreen()) {
                return onExit();
              }
            });
          };
        })(this)(player));
      }
      return results;
    }).call(this);
    if (device.platform !== "browser") {
      Application.publish("event:rotation-unlock")({});
    }
    return this.onResize();
  };

  VideoCollectionView.prototype.show = function() {
    var j, ref, results;
    this.listenTo(this, "resize", this.onResize);
    return this.toVisit = (function() {
      results = [];
      for (var j = 0, ref = this.serialize().videos.length; 0 <= ref ? j < ref : j > ref; 0 <= ref ? j++ : j--){ results.push(j); }
      return results;
    }).apply(this);
  };

  VideoCollectionView.prototype.onTapThumbnail = function(e) {
    return this.openVideo(e.currentTarget, true);
  };

  VideoCollectionView.prototype.openVideo = function(el, animate) {
    var player, vidDetails;
    this.currentIndex = parseInt(el.dataset.index, 10);
    vidDetails = this.getEl("videoDetails").item(this.currentIndex);
    this.toVisit = _.without(this.toVisit, this.currentIndex);
    if (_.isEmpty(this.toVisit)) {
      this.setState("touched");
    }
    this.setState(true, "video");
    this.trigger("ui", {
      lightbox: true
    });
    player = this.videos[this.currentIndex];
    player.ready((function(_this) {
      return function() {
        player.currentTime(0);
        return player.play();
      };
    })(this));
    el.classList.add("visited");
    vidDetails.classList.toggle("no-transition", !animate);
    return vidDetails.classList.add("active");
  };

  VideoCollectionView.prototype.beforeHide = function() {
    if (device.platform !== "browser") {
      return Application.publish("event:rotation-lock")({});
    }
  };

  VideoCollectionView.prototype.hide = function() {
    this.exitVideo();
    return VideoCollectionView.__super__.hide.apply(this, arguments);
  };

  VideoCollectionView.prototype.exitVideo = function() {
    var ref, vidDetails;
    vidDetails = this.getEl("videoDetails").item(this.currentIndex);
    vidDetails.classList.remove("no-transition");
    vidDetails.classList.remove("active");
    this.trigger("ui", {
      lightbox: false
    });
    this.setState(false, "video");
    return (ref = this.videos[this.currentIndex]) != null ? ref.pause() : void 0;
  };

  VideoCollectionView.prototype.refresh = function(params) {
    if (this.currentIndex != null) {
      this.exitVideo();
    }
    return VideoCollectionView.__super__.refresh.apply(this, arguments);
  };

  return VideoCollectionView;

})(SlideView);

module.exports = VideoCollectionView;
});

;require.register("engine/video-contribution/model.yaml", function(exports, require, module) {
module.exports = {"title":"video-contribution","display":"Video","category":"Peer Learning","description":"Video Upload","features":{"social":true},"model":{"question":{"id":{"type":"uuid","hidden":true},"content":{"type":"html"}},"prompt":{"type":"html","default":"Choose a video to upload"}},"examples":[{"subtype":"video-contribution","question":{"id":"#GENUUID#","content":"Contribute to peer learning by uploading a video"}}]}
});

;require.register("engine/video-contribution/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (continueBtnText, doneText, hasNarration, hasPrompt, i18n, prompt, submitUp, title) {
buf.push("<div class=\"block-v-xl content-fill\"><div class=\"content text-center\"><h1 class=\"fade-in\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"block-frame block-v-md slide-up delay-1\"><div class=\"upload-video btn btn-solid\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div><div class=\"upload-progress block-dk\"><div class=\"upload-progress-bar\"></div></div><div class=\"upload-success text-md block-v-md\">Your upload is complete.</div><div class=\"upload-error text-md block-v-md\">There was an error uploading your video.\nPlease ensure your video is the correct format and try again.</div></div></div></div><div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/video-contribution/view.coffee", function(exports, require, module) {
var InputView, VideoContributionView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

InputView = require("views/input");

VideoContributionView = (function(superClass) {
  extend(VideoContributionView, superClass);

  function VideoContributionView() {
    return VideoContributionView.__super__.constructor.apply(this, arguments);
  }

  VideoContributionView.prototype.template = require("./template");

  VideoContributionView.prototype.generateUUID = function() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
      var r, v;
      r = Math.random() * 16 | 0;
      v = c === 'x' ? r : r & 0x3 | 0x8;
      return v.toString(16);
    });
  };

  VideoContributionView.prototype.initialize = function(options) {
    this.uploadConfiguration = options.lessonConfiguration.upload;
    this.uploadUUID = this.generateUUID();
    return VideoContributionView.__super__.initialize.apply(this, arguments);
  };

  VideoContributionView.prototype.events = function() {
    return {
      "iostap .btn-done": "nextSlide"
    };
  };

  VideoContributionView.prototype.serialize = function() {
    var data;
    data = VideoContributionView.__super__.serialize.apply(this, arguments);
    data.title = this.options.data.question.content;
    return data;
  };

  VideoContributionView.prototype.show = function() {
    this.setEl(this.findOne(".upload-video"), "button");
    this.setEl(this.findOne(".upload-progress-bar"), "progress-bar");
    return this.createUploader();
  };

  VideoContributionView.prototype.createUploader = function() {
    var configuration, ref, uploader;
    configuration = ((ref = window.__) != null ? ref.uploadConfiguration : void 0) || this.uploadConfiguration;
    this.setState("prompt", "upload");
    return uploader = new qq.s3.FineUploaderBasic(_.extend({
      debug: true,
      chunking: {
        enabled: true,
        concurrent: {
          enabled: true
        }
      },
      resume: {
        enabled: true
      },
      retry: {
        enableAuto: true
      },
      camera: {
        ios: true
      },
      validation: {
        acceptFiles: "video/*"
      },
      button: this.getEl("button"),
      objectProperties: {
        key: (function(_this) {
          return function(id) {
            var ext, extension, name;
            name = uploader.getName(id);
            extension = (ext = name.match(/[^\.]+$/)) ? ext[0] : "mp4";
            return "contributions/" + _this.uploadUUID + "." + extension;
          };
        })(this)
      },
      callbacks: {
        onUpload: _.bind(this.onUpload, this),
        onStatusChange: _.bind(this.onStatusChange, this),
        onError: _.bind(this.onError, this),
        onComplete: _.bind(this.onComplete, this),
        onProgress: _.bind(this.onProgress, this)
      }
    }, configuration));
  };

  VideoContributionView.prototype.onUpload = function() {
    this.setState("in-progress", "upload");
    return this.transform(this.getEl("progress-bar"), {
      scale: "0, 1",
      transition: "none"
    });
  };

  VideoContributionView.prototype.onStatusChange = console.log;

  VideoContributionView.prototype.onError = function(id, name, reason) {
    this.setState("prompt");
    return this.setState("error", "upload");
  };

  VideoContributionView.prototype.onComplete = function(id, name, response) {
    this.uploadedFileKey = response.uploadKey;
    this.setState("touched");
    this.setState("complete", "upload");
    return this.transform(this.getEl("progress-bar"), {
      scale: "1, 1"
    });
  };

  VideoContributionView.prototype.onProgress = function(id, name, uploadedBytes, totalBytes) {
    return this.transform(this.getEl("progress-bar"), {
      scale: (uploadedBytes / totalBytes * 0.7) + ", 1",
      transition: "all 300ms"
    });
  };

  VideoContributionView.prototype.userInput = function() {
    return {
      contribution: {
        video: this.uploadedFileKey,
        question: {
          content: this.options.data.question.content,
          id: this.options.data.question.id
        }
      }
    };
  };

  return VideoContributionView;

})(InputView);

module.exports = VideoContributionView;
});

;require.register("engine/video/model.yaml", function(exports, require, module) {
module.exports = {"title":"video","display":"Video Slide","category":"Content","description":"Play a video","links":{"academy":"https://academy.edapp.com/how-to-video/"},"features":{"social":true},"model":{"title":{"type":"html","default":"Video"},"url":{"type":"video","default":"video/example.mp4","display":"Video"},"duration":{"type":"number","default":0,"hidden":true},"streamUrl":{"type":"string","hidden":true},"stream":{"type":"boolean","default":true,"display":"Play on Demand","help":"Play this video on demand instead of downloading all at once. This is recommended for longer videos. This option requires the learner to have an active internet connection and does not work in offline mode.\n"},"autoplay":{"type":"boolean","display":"Auto Play","default":false,"help":"Start playing the video automatically when the learner views this slide.\n"},"autoprogress":{"type":"boolean","display":"Auto Progress","default":false,"help":"Continue to the next slide once this video is over.\n"},"prompt":{"default":"Watch the video to continue","type":"text"},"showSkipButton":{"type":"boolean","default":true,"display":"Always Show Skip Button","help":"Allow the learner to progress without watching the entire video. Learners can always skip the video after watching it once.\n"}}}
});

;require.register("engine/video/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (config, continueBtnText, doneText, fullscreen, hasNarration, hasPrompt, i18n, playinline, prompt, submitUp, url) {
jade_mixins["video-stream"] = jade_interp = function(videoUrl, playsinline, controls, klass, poster){
var block = (this && this.block), attributes = (this && this.attributes) || {};
playinline = playinline || true
controls = controls || true
klass = klass || 'video vjs-fluid'
var cloudinaryVideoFolderUrl = config.CLOUDINARY_CDN_URL+config.CLOUDINARY_VIDEO_FOLDER
var streamUrl = ''
if ( videoUrl && videoUrl.indexOf(cloudinaryVideoFolderUrl) > -1)
{
streamUrl = videoUrl.replace(cloudinaryVideoFolderUrl, cloudinaryVideoFolderUrl+'sp_full_hd/')
streamUrl = streamUrl.replace('.mp4', '.m3u8')
}
buf.push("<video" + (jade.attr("webkit-playsinline", playsinline, true, false)) + (jade.attr("controls", controls, true, false)) + " preload=\"auto\"" + (jade.attr("dir", config.direction, true, false)) + (jade.attr("poster", poster, true, false)) + (jade.cls(['video-js',klass], [null,true])) + "><source" + (jade.attr("src", videoUrl, true, false)) + "/>");
if ( streamUrl)
{
buf.push("<source" + (jade.attr("src", streamUrl, true, false)) + "/>");
}
buf.push("</video>");
};
buf.push("<div class=\"slide-loader content\"></div><div class=\"content-fill full-screen\">");
jade_mixins["video-stream"](url, !fullscreen, true, "video vjs-fluid multi-content");
buf.push("</div><div class=\"content-fill\"><h2 class=\"video-error-msg content\">" + (null == (jade_interp = i18n("video.not-available")) ? "" : jade_interp) + "</h2><div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div></div>");}.call(this,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"fullscreen" in locals_for_with?locals_for_with.fullscreen:typeof fullscreen!=="undefined"?fullscreen:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"playinline" in locals_for_with?locals_for_with.playinline:typeof playinline!=="undefined"?playinline:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"url" in locals_for_with?locals_for_with.url:typeof url!=="undefined"?url:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/video/view.coffee", function(exports, require, module) {
var SlideView, VideoView, device,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SlideView = require("views/slide");

device = require("lib/device");

VideoView = (function(superClass) {
  extend(VideoView, superClass);

  function VideoView() {
    return VideoView.__super__.constructor.apply(this, arguments);
  }

  VideoView.prototype.template = require("./template");

  VideoView.prototype.events = function() {
    return {
      "iostap .btn-done": "next"
    };
  };

  VideoView.prototype.initialize = function() {
    var base;
    VideoView.__super__.initialize.apply(this, arguments);
    if ((base = this.options.data).showSkipButton == null) {
      base.showSkipButton = true;
    }
    if (this.options.data.prompt === "") {
      return this.options.data.prompt = require("./model").model.prompt["default"];
    }
  };

  VideoView.prototype.serialize = function() {
    var data;
    data = VideoView.__super__.serialize.apply(this, arguments);
    data.continueBtnText = i18n("video.skip-video");
    data.hasPrompt = !data.showSkipButton;
    return data;
  };

  VideoView.prototype.show = function() {
    var id, videoJsPlayer;
    if (!this.options.data.url) {
      return;
    }
    videoJsPlayer = this.el.querySelector(".video-js");
    if (videoJsPlayer) {
      id = videoJsPlayer.getAttribute("id");
      this.player = _.findWhere(this.players, {
        id_: id
      });
      if (this.player) {
        this.player.ready((function(_this) {
          return function() {
            _this.setState("success", "video");
            if (_this.options.data.autoplay && window.location.href.split("thumbnail=true").length !== 2) {
              _this.player.play();
            }
            if (!_this.options.data.showSkipButton) {
              _this.player.on("timeupdate", _.bind(_this.onTimeUpdate, _this));
              return _this.player.on("seeking", _.bind(_this.onSeeking, _this));
            }
          };
        })(this));
        return this.player.on("ended", _.bind(this.onVideoEnd, this));
      }
    }
  };

  VideoView.prototype.beforeShow = function(lmsMode) {
    if (lmsMode) {
      this.options.data.autoplay = !lmsMode;
    }
    this.trigger("ui", {
      lightbox: true,
      flexibleHeight: true
    });
    if (device.platform !== "browser") {
      return Application.publish("event:rotation-unlock")({});
    }
  };

  VideoView.prototype.beforeHide = function() {
    this.trigger("ui", {
      lightbox: false,
      flexibleHeight: false
    });
    if (device.platform !== "browser") {
      return Application.publish("event:rotation-lock")({});
    }
  };

  VideoView.prototype.onRefresh = function() {
    this.beforeShow(true);
    return VideoView.__super__.onRefresh.apply(this, arguments);
  };

  VideoView.prototype.onVideoEnd = function() {
    this.findOne(".btn-done").innerHTML = i18n("buttons.continue");
    if (!this.options.data.showSkipButton) {
      this.setState("touched");
    }
    this.lesson.processInteraction({
      type: "video",
      event: {
        name: "video-watched"
      },
      metadata: this.options.metadata
    });
    if (this.options.data.autoprogress) {
      return this.submit();
    }
  };

  VideoView.prototype.onTimeUpdate = function() {
    if (!(this.player.scrubbing() || this.player.seeking())) {
      return this.timeBeforeChange = this.player.currentTime();
    }
  };

  VideoView.prototype.onSeeking = function() {
    if (this.currentState.state !== "touched" && this.player.currentTime() > this.timeBeforeChange) {
      return this.player.currentTime(this.timeBeforeChange);
    }
  };

  return VideoView;

})(SlideView);

module.exports = VideoView;
});

;require.register("engine/vimeo-video-embed/model.yaml", function(exports, require, module) {
module.exports = {"title":"vimeo-video-embed","display":"Vimeo Video","category":"Content","description":"Display a video hosted on Vimeo","features":{"social":true},"model":{"title":{"type":"html"},"videoId":{"type":"html","display":"Video ID","help":"The ID of your video can be found by selecting the \"share\" option on Vimeo. eg. https://vimeo.com/87701971 is \"87701971\"\n"},"autoplay":{"type":"boolean","display":"Auto Play","default":false,"help":"Start playing the video automatically when the user views this slide.\n"},"autoProgress":{"type":"boolean","display":"Auto Progress","default":true,"help":"Continue to the next slide once this video is over.\n"},"showSkipButton":{"type":"boolean","default":true,"display":"Always Show Skip Button","help":"Allow the learner to progress without watching the entire video. Learners can always skip the video after watching it once.\n"}},"examples":[{"subtype":"vimeo","videoId":"87701971","showSkipButton":true}]}
});

;require.register("engine/vimeo-video-embed/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (continueBtnText, doneText, hasNarration, i18n, skipButton, submitUp) {
buf.push("<div class=\"vimeo-content content-fill\"><div class=\"slide-loader content\"></div><div class=\"vimeo-player text-center content-fill\"></div><img class=\"vimeo-thumb content-ver block\"/><div class=\"video-controls content\"><div class=\"video-play\"></div></div><div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + "><div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( skipButton)
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div></div>");}.call(this,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"skipButton" in locals_for_with?locals_for_with.skipButton:typeof skipButton!=="undefined"?skipButton:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/vimeo-video-embed/view.coffee", function(exports, require, module) {
var SlideView, VimeoAPI, VimeoVideoEmbedView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SlideView = require("views/slide");

VimeoAPI = require("lib/vimeo-api");

VimeoVideoEmbedView = (function(superClass) {
  extend(VimeoVideoEmbedView, superClass);

  function VimeoVideoEmbedView() {
    return VimeoVideoEmbedView.__super__.constructor.apply(this, arguments);
  }

  VimeoVideoEmbedView.prototype.template = require("./template");

  VimeoVideoEmbedView.prototype.events = {
    "iostap .btn-done": "submit",
    "iostap": "playVideo"
  };

  VimeoVideoEmbedView.prototype.serialize = function() {
    var data, ref, ref1;
    data = VimeoVideoEmbedView.__super__.serialize.call(this);
    data.continueBtnText = i18n("video.skip-video");
    data.videoId = data != null ? (ref = data.videoId.toString().match(/\d+$/)) != null ? ref[0] : void 0 : void 0;
    data.thumbnail = (ref1 = this.videoData) != null ? ref1.thumbnail_large : void 0;
    data.skipButton = (data != null ? data.showSkipButton : void 0) != null ? data.showSkipButton : true;
    return data;
  };

  VimeoVideoEmbedView.prototype.render = function() {
    var onLoad;
    VimeoVideoEmbedView.__super__.render.call(this);
    this.createPlayer();
    onLoad = (function(_this) {
      return function(e) {
        _this.getEl("vimeo-thumb").removeEventListener("load", onLoad);
        _this.getEl("vimeo-thumb").removeEventListener("error", onLoad);
        _this.getEl("vimeo-thumb").classList.add("show");
        return _this.setState("paused", "video");
      };
    })(this);
    this.setEl(this.findOne(".vimeo-thumb"), "vimeo-thumb");
    this.getEl("vimeo-thumb").addEventListener("load", onLoad);
    return this.getEl("vimeo-thumb").addEventListener("error", onLoad);
  };

  VimeoVideoEmbedView.prototype.beforeShow = function(lmsMode) {
    this.trigger("ui", {
      lightbox: true,
      flexibleHeight: true
    });
    if (lmsMode) {
      return this.options.data.autoplay = !lmsMode;
    }
  };

  VimeoVideoEmbedView.prototype.beforeHide = function() {
    var ref;
    window.clearTimeout(this.ensureTimeout);
    window.clearTimeout(this.autoplayTimeout);
    if ((ref = this.player) != null) {
      if (typeof ref.pause === "function") {
        ref.pause();
      }
    }
    return this.trigger("ui", {
      lightbox: false,
      flexibleHeight: false
    });
  };

  VimeoVideoEmbedView.prototype.playVideo = function() {
    if (this.player != null) {
      return this.player.play();
    } else {
      return this.ensure(((function(_this) {
        return function() {
          var ref, ref1;
          return (ref = _this.player) != null ? (ref1 = ref.element) != null ? ref1.contentWindow : void 0 : void 0;
        };
      })(this)), (function(_this) {
        return function() {
          return _this.playVideo();
        };
      })(this));
    }
  };

  VimeoVideoEmbedView.prototype.createPlayer = function() {
    return this.ensure((function() {
      var ref;
      return ((ref = window.Vimeo) != null ? ref.Player : void 0) != null;
    }), (function(_this) {
      return function() {
        var el;
        el = _this.findOne(".vimeo-player");
        if (!el) {
          return;
        }
        _this.player = new Vimeo.Player(el, {
          id: _this.serialize().videoId,
          width: el.offsetWidth,
          height: el.offsetHeight,
          title: false,
          portrait: false,
          byline: false,
          color: "ffffff",
          autoplay: _this.options.data.autoplay,
          playsinline: false,
          allowfullscreen: true
        });
        _this.player.on("ended", function() {
          return _this.onVideoEnded();
        });
        _this.player.on("play", function() {
          return _this.setState("playing", "video");
        });
        _this.player.on("pause", function() {
          return _this.setState("paused", "video");
        });
        _this.player.on("loaded", function() {
          return _this.setState("paused", "video");
        });
        return _this.loadThumbnail(function() {
          if (_this.options.data.autoplay && window.location.href.split("thumbnail=true").length !== 2) {
            return _this.autoplayTimeout = window.setTimeout((function() {
              return _this.playVideo();
            }), 400);
          }
        });
      };
    })(this));
  };

  VimeoVideoEmbedView.prototype.onRefresh = function() {
    window.clearTimeout(this.autoplayTimeout);
    window.clearTimeout(this.ensureTimeout);
    if (this.player != null) {
      this.player.loadVideo(this.serialize().videoId);
    } else {
      this.createPlayer();
    }
    this.setState("loading", "video");
    this.getEl("vimeo-thumb").classList.remove("show");
    return this.beforeShow(true);
  };

  VimeoVideoEmbedView.prototype.submit = function(e) {
    this.player.off("play ended pause loaded");
    this.$(this.player.element).remove();
    if (e != null) {
      e.stopImmediatePropagation();
    }
    return VimeoVideoEmbedView.__super__.submit.call(this);
  };

  VimeoVideoEmbedView.prototype.onVideoEnded = function() {
    var autoProgress, ref;
    autoProgress = ((ref = this.options.data) != null ? ref.autoProgress : void 0) != null ? this.options.data.autoProgress : true;
    if (autoProgress) {
      return this.submit();
    } else {
      this.setState("touched");
      return this.findOne(".btn-done").innerHTML = i18n("buttons.continue");
    }
  };

  VimeoVideoEmbedView.prototype.ensure = function(cond, done) {
    var repeat;
    return (repeat = (function(_this) {
      return function() {
        if (cond()) {
          return done();
        } else {
          return _this.ensureTimeout = window.setTimeout(repeat, 100);
        }
      };
    })(this))();
  };

  VimeoVideoEmbedView.prototype.loadThumbnail = function(done) {
    var onError, ref;
    onError = (function(_this) {
      return function() {
        var ref;
        if ((ref = _this.getEl("vimeo-thumb")) != null) {
          ref.src = "img/video/empty.png";
        }
        _this.setState("false", "thumb");
        return done();
      };
    })(this);
    if ((ref = this.request) != null) {
      ref.abort();
    }
    return this.request = $.ajax({
      type: "GET",
      url: "https://vimeo.com/api/v2/video/" + (this.serialize().videoId) + ".json",
      dataType: "json",
      error: onError,
      success: (function(_this) {
        return function(arg) {
          var ref1, resp;
          resp = (arg != null ? arg : [])[0];
          if (resp) {
            _this.videoData = resp;
            if ((ref1 = _this.getEl("vimeo-thumb")) != null) {
              ref1.src = resp.thumbnail_large;
            }
            return done();
          } else {
            return onError();
          }
        };
      })(this)
    });
  };

  return VimeoVideoEmbedView;

})(SlideView);

module.exports = VimeoVideoEmbedView;
});

;require.register("engine/youtube-video-embed/model.yaml", function(exports, require, module) {
module.exports = {"title":"youtube-video-embed","display":"YouTube Video","category":"Content","description":"Display a video hosted on YouTube","features":{"social":true},"model":{"title":{"type":"html"},"videoId":{"type":"string","display":"YouTube Video ID","help":"The ID of your video can be found in the video's URL after the equals sign. eg. The ID for https://www.youtube.com/watch?v=ZczmRIzr8r4 is ZczmRIzr8r4\n"},"autoplay":{"type":"boolean","display":"Auto Play","default":false,"help":"Start playing the video automatically when the user views this slide.\n"},"startTime":{"type":"int","display":"Start Time","default":0,"help":"When playing the video, jump ahead to the time specified (in seconds).\n"},"endTime":{"type":"int","display":"End Time","help":"When playing the video, finish at the time specified (in seconds).\n"},"autoProgress":{"type":"boolean","display":"Auto Progress","default":true,"help":"Continue to the next slide once this video is over.\n"},"showSkipButton":{"type":"boolean","default":true,"display":"Always Show Skip Button","help":"Allow the learner to progress without watching the entire video. Learners can always skip the video after watching it once.\n"}},"examples":[{"subtype":"youtube-video-embed","videoId":"ZczmRIzr8r4","showSkipButton":true}]}
});

;require.register("engine/youtube-video-embed/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (continueBtnText, doneText, hasNarration, i18n, skipButton, submitUp, videoId) {
buf.push("<div class=\"yt-content content-fill\"><div class=\"slide-loader content\"></div><div class=\"yt-player text-center content-fill\"></div><img" + (jade.attr("src", "https://img.youtube.com/vi/" + (videoId) + "/maxresdefault.jpg", true, false)) + " class=\"yt-thumb content-ver block\"/><div class=\"video-controls content\"><div class=\"video-play\"></div></div><div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + "><div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( skipButton)
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div></div>");}.call(this,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"skipButton" in locals_for_with?locals_for_with.skipButton:typeof skipButton!=="undefined"?skipButton:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined,"videoId" in locals_for_with?locals_for_with.videoId:typeof videoId!=="undefined"?videoId:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/youtube-video-embed/view.coffee", function(exports, require, module) {
var SlideView, YouTubeAPI, YoutubeVideoEmbedView, device,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SlideView = require("views/slide");

YouTubeAPI = require("lib/youtube-api");

device = require("lib/device");

YoutubeVideoEmbedView = (function(superClass) {
  extend(YoutubeVideoEmbedView, superClass);

  function YoutubeVideoEmbedView() {
    return YoutubeVideoEmbedView.__super__.constructor.apply(this, arguments);
  }

  YoutubeVideoEmbedView.prototype.template = require("./template");

  YoutubeVideoEmbedView.prototype.events = {
    "iostap .btn-done": "submit",
    "iostap": "playVideo"
  };

  YoutubeVideoEmbedView.prototype.needCaptions = function() {
    return this.options.data.videoId.indexOf('cc_load_policy') > -1;
  };

  YoutubeVideoEmbedView.prototype.serialize = function() {
    var data;
    data = YoutubeVideoEmbedView.__super__.serialize.apply(this, arguments);
    data.submitUp = this.needCaptions();
    data.continueBtnText = i18n("video.skip-video");
    data.skipButton = (data != null ? data.showSkipButton : void 0) != null ? data.showSkipButton : true;
    return data;
  };

  YoutubeVideoEmbedView.prototype.render = function() {
    YoutubeVideoEmbedView.__super__.render.apply(this, arguments);
    this.player = null;
    return this.waitForAPI();
  };

  YoutubeVideoEmbedView.prototype.beforeShow = function(lmsMode) {
    this.trigger("ui", {
      lightbox: true,
      flexibleHeight: true
    });
    this.setState("loading", "video");
    if (device.platform !== "browser") {
      Application.publish("event:rotation-unlock")({});
    }
    if (lmsMode) {
      this.options.data.autoplay = !lmsMode;
    }
    if (this.options.data.autoplay && window.location.href.split("thumbnail=true").length !== 2) {
      return this.playVideo();
    }
  };

  YoutubeVideoEmbedView.prototype.beforeHide = function() {
    var ref;
    window.clearTimeout(this.waitForAPITimeout);
    window.clearTimeout(this.checkForPlayerTimeout);
    if ((ref = this.player) != null) {
      if (typeof ref.stopVideo === "function") {
        ref.stopVideo();
      }
    }
    if (device.platform !== "browser") {
      Application.publish("event:rotation-lock")({});
    }
    return this.trigger("ui", {
      lightbox: false,
      flexibleHeight: false
    });
  };

  YoutubeVideoEmbedView.prototype.waitForAPI = function() {
    var repeat;
    window.clearTimeout(this.waitForAPITimeout);
    return (repeat = (function(_this) {
      return function() {
        var ref;
        if (((ref = window.YT) != null ? ref.Player : void 0) != null) {
          return _this.createPlayer();
        } else {
          return _this.waitForAPITimeout = window.setTimeout(repeat, 100);
        }
      };
    })(this))();
  };

  YoutubeVideoEmbedView.prototype.playVideo = function() {
    var repeat;
    window.clearTimeout(this.checkForPlayerTimeout);
    return (repeat = (function(_this) {
      return function() {
        var ref, ref1;
        if (((ref = _this.player) != null ? ref.playVideo : void 0) != null) {
          return (ref1 = _this.player) != null ? typeof ref1.playVideo === "function" ? ref1.playVideo() : void 0 : void 0;
        } else {
          return _this.checkForPlayerTimeout = window.setTimeout(repeat, 100);
        }
      };
    })(this))();
  };

  YoutubeVideoEmbedView.prototype.createPlayer = function() {
    var el;
    el = this.findOne(".yt-player");
    return this.player = new YT.Player(el, {
      videoId: this.options.data.videoId,
      playerVars: {
        autoplay: 0,
        controls: device.platform === 'Android',
        modestbranding: 0,
        showinfo: 0,
        rel: 0,
        start: parseInt(this.options.data.startTime, 10) || 0,
        end: parseInt(this.options.data.endTime, 10) || void 0
      },
      events: {
        onReady: (function(_this) {
          return function() {
            return _this.setState("paused", "video");
          };
        })(this),
        onStateChange: (function(_this) {
          return function(e) {
            switch (e.data) {
              case YT.PlayerState.PLAYING:
                return _this.setState("playing", "video");
              case YT.PlayerState.PAUSED:
                return _this.setState("paused", "video");
              case YT.PlayerState.ENDED:
                return _this.onVideoEnded();
            }
          };
        })(this)
      }
    });
  };

  YoutubeVideoEmbedView.prototype.onRefresh = function() {
    return this.beforeShow(true);
  };

  YoutubeVideoEmbedView.prototype.onVideoEnded = function() {
    var autoProgress, ref;
    autoProgress = ((ref = this.options.data) != null ? ref.autoProgress : void 0) != null ? this.options.data.autoProgress : true;
    if (autoProgress) {
      return this.submit();
    } else {
      this.setState("touched");
      return this.findOne(".btn-done").innerHTML = i18n("buttons.continue");
    }
  };

  YoutubeVideoEmbedView.prototype.submit = function(e) {
    if (e != null) {
      e.stopImmediatePropagation();
    }
    return YoutubeVideoEmbedView.__super__.submit.apply(this, arguments);
  };

  return YoutubeVideoEmbedView;

})(SlideView);

module.exports = YoutubeVideoEmbedView;
});

;require.register("lib/animate.coffee", function(exports, require, module) {
var rAF;

rAF = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) {
  return window.setTimeout(callback, 1000 / 60);
};

module.exports = function(func, duration) {
  var isActive, repeat, timestamp;
  if (duration == null) {
    duration = 300;
  }
  timestamp = Date.now();
  isActive = true;
  (repeat = function() {
    var diff;
    if (!isActive) {
      return;
    }
    diff = Math.min(Date.now() - timestamp, duration);
    if (diff < duration) {
      func(diff / duration);
      return rAF(repeat);
    } else {
      return func(1, true);
    }
  })();
  return {
    cancel: function() {
      return isActive = false;
    }
  };
};
});

;require.register("lib/convert.coffee", function(exports, require, module) {
var div;

div = document.createElement("div");

module.exports = {
  toText: function(content) {
    div.innerHTML = content;
    return div.textContent.replace(new RegExp(' +', 'g'), " ");
  },
  toHTML: function(content) {
    div.textContent = content;
    return div.innerHTML;
  }
};
});

;require.register("lib/cookies.coffee", function(exports, require, module) {
var read;

read = function() {
  var cookie_details, cookies, i, len, name, ref, value;
  cookie_details = document.cookie.split(';').map(function(c) {
    var details;
    c = c.trim();
    details = c.split(/\=/);
    return {
      name: details[0],
      value: decodeURIComponent(details[1])
    };
  });
  cookies = {};
  for (i = 0, len = cookie_details.length; i < len; i++) {
    ref = cookie_details[i], name = ref.name, value = ref.value;
    if (name.match(/^webed/)) {
      cookies[name.replace("webed_", "")] = value;
    }
  }
  return cookies;
};

module.exports = {
  read: read
};
});

;require.register("lib/data-processer.coffee", function(exports, require, module) {
var _processedSlides, deepClone, formatContent, hasHtmlTags, html, isURL, markdown, options, processMetadata, processSlide, processSlides, processSlidesMetadata, recur, shouldTransform, transform, transformTypes;

options = {
  renderer: new window.marked.Renderer(),
  gfm: true,
  tables: true,
  breaks: false,
  pedantic: false,
  sanitize: false,
  smartLists: true,
  smartypants: true,
  headerPrefix: 'ed_'
};

recur = function(obj, def, method, config) {
  var key, m, result, t, val;
  if (config == null) {
    config = {};
  }
  if (!(obj != null) || !(def != null) || typeof obj !== "object") {
    return method(obj, def, config);
  } else if ((Array.isArray || _.isArray)(obj)) {
    return obj.map(function(t, i) {
      return recur(t, def.type[0], method, config);
    });
  } else {
    result = {};
    for (key in obj) {
      val = obj[key];
      t = obj[key + "Type"];
      m = def[key];
      if (m != null) {
        if (t) {
          m.type = t;
        }
        if (t === "" && (m.types != null)) {
          m.type = m.types[0];
        }
      }
      result[key] = recur(val, m, method, config);
    }
    return result;
  }
};

markdown = function(content, config) {
  var err, nbLines, result;
  if (config == null) {
    config = {};
  }
  try {
    nbLines = typeof content.split === "function" ? content.split(/\n|\<p[^\>]*\>/).length : void 0;
    result = window.marked(content.toString(), options);
    if (config.direction === 'rtl') {
      result = result.replace(/[\u2018\u2019]/g, (function(_this) {
        return function($1) {
          if ($1 === '\u2018') {
            return '\u2019';
          } else {
            return '\u2018';
          }
        };
      })(this));
      result = result.replace(/[\u201c\u201d]/g, (function(_this) {
        return function($1) {
          if ($1 === '\u201c') {
            return '\u201d';
          } else {
            return '\u201c';
          }
        };
      })(this));
    }
    result = result.replace(/(^\s+|\s+$)/g, "");
    if (nbLines <= 1) {
      result = result.replace(/\<\/?p[^\>]*\>/g, "");
    }
    result = result.replace(/\<(ul|ol)\>/g, "<$1 class='md-list'>");
    return result;
  } catch (error) {
    err = error;
    return content;
  }
};

hasHtmlTags = function(content) {
  return /<\/?[a-z][\s\S]*>/i.test(content);
};

html = function(content) {
  var err;
  if (hasHtmlTags(content)) {
    try {
      return new DOMParser().parseFromString(content, 'text/html').body.innerHTML;
    } catch (error) {
      err = error;
      return content;
    }
  } else {
    return content;
  }
};

transformTypes = ["text", "html"];

shouldTransform = function(def) {
  if ((def != null ? def.type : void 0) || (def != null ? def.types : void 0)) {
    return _.includes(transformTypes, def.type || def.types[0]);
  } else {
    return false;
  }
};

transform = function(value, def, config) {
  var transformed;
  if (config == null) {
    config = {};
  }
  if (shouldTransform(def) && !(def.transform === false)) {
    transformed = markdown(value, config);
    return html(transformed);
  } else {
    return value;
  }
};

_processedSlides = {};

processSlide = function(data, type, config) {
  var key, model, ref, result;
  if (config == null) {
    config = {};
  }
  key = sha1(JSON.stringify({
    data: data,
    type: type
  }));
  if (_processedSlides[key] != null) {
    return _processedSlides[key];
  }
  model = (ref = require("engine/" + type + "/model")) != null ? ref.model : void 0;
  result = _.extend(data, recur(data, model, transform, config));
  _processedSlides[key] = result;
  return result;
};

processSlides = function(data) {
  var k, len, ref, slide;
  ref = data.slides;
  for (k = 0, len = ref.length; k < len; k++) {
    slide = ref[k];
    slide.data = processSlide(slide.data, slide.type, data.config);
  }
  return data;
};

isURL = function(c) {
  return (c != null ? c.indexOf('http') : void 0) === 0 || (c != null ? c.indexOf("fit_content_assets") : void 0) !== -1;
};

formatContent = function(f) {
  return function(c) {
    if (!isNaN(c)) {
      if (c.split('.').length > 1) {
        return parseFloat(c).toFixed(c.split('.')[1].length);
      } else {
        return parseFloat(c);
      }
    } else if (isURL(c)) {
      return c;
    } else {
      return f(c);
    }
  };
};

processMetadata = function(func) {
  return function(metadata) {
    var answer, i, j, k, l, len, len1, metaDataPath, q, ref, ref1, ref2, ref3;
    ref = metadata.questions || [];
    for (i = k = 0, len = ref.length; k < len; i = ++k) {
      q = ref[i];
      if (!((q != null ? q.question : void 0) != null)) {
        continue;
      }
      metaDataPath = metadata.questions[i];
      if (q != null ? (ref1 = q.question) != null ? ref1.content : void 0 : void 0) {
        metaDataPath.question.content = formatContent(func)(q.question.content.toString());
      }
      if (q != null ? (ref2 = q.question) != null ? ref2.category : void 0 : void 0) {
        metaDataPath.question.category = formatContent(func)(q.question.category.toString());
      }
      ref3 = q.answers;
      for (j = l = 0, len1 = ref3.length; l < len1; j = ++l) {
        answer = ref3[j];
        if ((answer != null ? answer.content : void 0) != null) {
          metaDataPath.answers[j].content = formatContent(func)(answer.content.toString());
        }
      }
    }
    return metadata;
  };
};

deepClone = _.compose(JSON.parse, JSON.stringify);

processSlidesMetadata = function(data) {
  var k, len, ref, slide;
  ref = data.slides;
  for (k = 0, len = ref.length; k < len; k++) {
    slide = ref[k];
    if (!((slide != null ? slide.metadata : void 0) != null)) {
      continue;
    }
    slide.metadata = processMetadata(markdown)(deepClone(slide.metadata));
    slide.strippedMetadata = processMetadata(removeMarkdown)(deepClone(slide.metadata));
  }
  return data;
};

module.exports = {
  one: processSlide,
  oneMD: processMetadata(markdown),
  oneSMD: processMetadata(removeMarkdown),
  all: processSlides,
  allMD: processSlidesMetadata
};
});

;require.register("lib/device.coffee", function(exports, require, module) {
var android, deviceType, ios, platform, pointerEventConf, ref, ref1, ref2, ref3;

pointerEventConf = {
  pointer: {
    isTouch: false,
    start: "pointerdown",
    move: "pointermove",
    end: "pointerup"
  },
  touch: {
    isTouch: true,
    start: "touchstart",
    move: "touchmove",
    end: "touchend"
  },
  mouse: {
    isTouch: false,
    start: "mousedown",
    move: "mousemove",
    end: "mouseup"
  }
};

deviceType = "onpointerdown" in window ? "pointer" : "ontouchstart" in window ? "touch" : "mouse";

ios = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;

android = /android/i.test(typeof navigator !== "undefined" && navigator !== null ? navigator.userAgent : void 0);

platform = (ref = window.frameElement) != null ? (ref1 = ref.dataset) != null ? ref1.platform : void 0 : void 0;

module.exports = {
  dpi: window.devicePixelRatio || 1,
  isIE: function() {
    return document.documentMode || /Edge/.test((typeof navigator !== "undefined" && navigator !== null ? navigator.userAgent : void 0) || "");
  },
  platform: ((ref2 = window.__) != null ? (ref3 = ref2.slidedeck) != null ? ref3.platform : void 0 : void 0) || platform || (ios && "iOS") || (android && "Android") || "browser",
  events: {
    pointer: pointerEventConf[deviceType],
    resize: "resize"
  },
  breakpoint: function(sizes) {
    var point;
    if (typeof sizes === "string") {
      sizes = [sizes];
    }
    point = window.innerWidth <= 600 ? "xs" : window.innerWidth <= 768 ? "sm" : window.innerWidth <= 1024 ? "md" : "lg";
    if (sizes) {
      return _.include(sizes, point);
    } else {
      return point;
    }
  }
};
});

;require.register("lib/draw/catmull-rom-spline.coffee", function(exports, require, module) {

/*
  lektiondestages.blogspot.se/2013/01/calculate-catmull-rom-splines-using.html
 */
module.exports = function(points, divisions) {
  var d1x, d1y, d2x, d2y, d3x, d3y, i, j, p1x, p1y, p2x, p2y, px, py, ref, spline, st1, st2, st3;
  if (divisions == null) {
    divisions = 32;
  }
  points = [].concat(points);
  spline = points.slice(0, 1);
  while (points.length > 3) {
    p1x = 1 * points[3].x - 3 * points[2].x + 3 * points[1].x - points[0].x;
    p1y = 1 * points[3].y - 3 * points[2].y + 3 * points[1].y - points[0].y;
    p2x = 2 * points[0].x - 5 * points[1].x + 4 * points[2].x - points[3].x;
    p2y = 2 * points[0].y - 5 * points[1].y + 4 * points[2].y - points[3].y;
    st1 = 1.0 / divisions;
    st2 = st1 * st1;
    st3 = st1 * st2;
    d1x = 0.5 * (st3 * p1x + st2 * p2x + st1 * (points[2].x - points[0].x));
    d1y = 0.5 * (st3 * p1y + st2 * p2y + st1 * (points[2].y - points[0].y));
    d2x = 3.0 * st3 * p1x + st2 * p2x;
    d2y = 3.0 * st3 * p1y + st2 * p2y;
    d3x = 3.0 * st3 * p1x;
    d3y = 3.0 * st3 * p1y;
    px = points[1].x;
    py = points[1].y;
    for (j = i = 0, ref = divisions; 0 <= ref ? i < ref : i > ref; j = 0 <= ref ? ++i : --i) {
      px += d1x;
      py += d1y;
      d1x += d2x;
      d1y += d2y;
      d2x += d3x;
      d2y += d3y;
      spline.push({
        x: px,
        y: py
      });
    }
    points.shift();
  }
  return spline;
};
});

;require.register("lib/draw/simplify.coffee", function(exports, require, module) {

/*
 (c) 2013, Vladimir Agafonkin
 Simplify.js, a high-performance JS polyline simplification library
 mourner.github.io/simplify-js/
 */
var getSqDist, getSqSegDist, simplify, simplifyDPStep, simplifyDouglasPeucker, simplifyRadialDist;

getSqDist = function(p1, p2) {
  var dx, dy;
  dx = p1.x - p2.x;
  dy = p1.y - p2.y;
  return dx * dx + dy * dy;
};

getSqSegDist = function(p, p1, p2) {
  var dx, dy, t, x, y;
  x = p1.x;
  y = p1.y;
  dx = p2.x - x;
  dy = p2.y - y;
  if (dx !== 0 || dy !== 0) {
    t = ((p.x - x) * dx + (p.y - y) * dy) / (dx * dx + dy * dy);
    if (t > 1) {
      x = p2.x;
      y = p2.y;
    } else if (t > 0) {
      x += dx * t;
      y += dy * t;
    }
  }
  dx = p.x - x;
  dy = p.y - y;
  return dx * dx + dy * dy;
};

simplifyRadialDist = function(points, sqTolerance) {
  var j, len, newPoints, point, prevPoint, ref;
  prevPoint = points[0];
  newPoints = [prevPoint];
  ref = points.slice(1);
  for (j = 0, len = ref.length; j < len; j++) {
    point = ref[j];
    if (getSqDist(point, prevPoint) > sqTolerance) {
      newPoints.push(point);
      prevPoint = point;
    }
  }
  if (prevPoint !== point) {
    newPoints.push(point);
  }
  return newPoints;
};

simplifyDPStep = function(points, first, last, sqTolerance, simplified) {
  var i, index, j, maxSqDist, ref, ref1, sqDist;
  maxSqDist = sqTolerance;
  for (i = j = ref = first + 1, ref1 = last; ref <= ref1 ? j < ref1 : j > ref1; i = ref <= ref1 ? ++j : --j) {
    sqDist = getSqSegDist(points[i], points[first], points[last]);
    if (sqDist > maxSqDist) {
      index = i;
      maxSqDist = sqDist;
    }
  }
  if (maxSqDist > sqTolerance) {
    if (index - first > 1) {
      simplifyDPStep(points, first, index, sqTolerance, simplified);
    }
    simplified.push(points[index]);
    if (last - index > 1) {
      return simplifyDPStep(points, index, last, sqTolerance, simplified);
    }
  }
};

simplifyDouglasPeucker = function(points, sqTolerance) {
  var last, simp;
  last = points.length - 1;
  simp = points.slice(0, 1);
  simplifyDPStep(points, 0, last, sqTolerance, simp);
  simp.push(points[last]);
  return simp;
};

simplify = function(points, tolerance, highQuality) {
  var sqTol;
  if (tolerance == null) {
    tolerance = 1;
  }
  if (points.length <= 2) {
    return points;
  } else {
    sqTol = Math.pow(tolerance, 2);
    points = highQuality ? points : simplifyRadialDist(points, sqTol);
    return simplifyDouglasPeucker(points, sqTol);
  }
};

module.exports = simplify;
});

;require.register("lib/draw/smooth-line.coffee", function(exports, require, module) {
var Simplify, SmoothLine, Spline, animate;

Spline = require("lib/draw/catmull-rom-spline");

Simplify = require("lib/draw/simplify");

animate = require("lib/animate");

SmoothLine = (function() {
  function SmoothLine(points1, __color, __width) {
    this.points = points1 != null ? points1 : [];
    this.__color = __color;
    this.__width = __width;
    this.timestamp = Date.now();
  }

  SmoothLine.prototype.add = function(p) {
    var first, last, recent, rest, simple;
    this.points.push(p);
    recent = this.points.slice(-50, -1);
    rest = this.points.slice(1, -recent.length - 1);
    first = this.points.slice(0, 1);
    last = this.points.slice(-1);
    simple = Simplify(recent, Math.pow(recent.length, 0.3), true);
    this.points = first.concat(rest, simple, last);
    return this;
  };

  SmoothLine.prototype.remove = function(fromStart) {
    if (fromStart) {
      return this.points.shift();
    } else {
      return this.points.pop();
    }
  };

  SmoothLine.prototype.length = function() {
    return this.points.length;
  };

  SmoothLine.prototype.getSpline = function() {
    return Spline(this.points);
  };

  SmoothLine.prototype.getPoints = function() {
    return [].concat(this.points);
  };

  SmoothLine.prototype.erase = function(context, frame) {
    var draw, duration, length, spline, width;
    spline = _.clone(this.getSpline()).reverse();
    length = spline.length - 1;
    width = this.__width;
    draw = (function(_this) {
      return function(dist) {
        var diff, diffX, diffY, index, p1, p2, points, ref;
        if (typeof frame === "function") {
          frame(dist);
        }
        context.globalAlpha = 1 - dist;
        if (!(spline.length > 1)) {
          return;
        }
        index = Math.ceil(dist * length);
        points = spline.slice(0, Math.max(length - index + 1, 2));
        ref = points.slice(-2), p1 = ref[0], p2 = ref[1];
        diff = (index / length - dist) * length;
        diffX = diff * (p1.x - p2.x);
        diffY = diff * (p1.y - p2.y);
        points[points.length - 1] = {
          x: p1.x - diffX,
          y: p1.y - diffY
        };
        _this.__width = width + Math.sin(dist * Math.PI) * width * 1.2;
        _this.points = points;
        _this.draw(context, false);
        if (dist === 1) {
          return _this.__width = width;
        }
      };
    })(this);
    duration = Math.max(Math.min(Date.now() - this.timestamp, 3000), 600);
    return this.animation = animate(draw, duration);
  };

  SmoothLine.prototype.draw = function(ctx, smooth) {
    var i, j, len, line, ref, x, y;
    if (smooth == null) {
      smooth = true;
    }
    line = smooth ? this.getSpline() : this.points;
    if (this.__color) {
      ctx.strokeStyle = this.__color;
    }
    if (this.__width) {
      ctx.lineWidth = this.__width;
    }
    if (line.length > 1) {
      ctx.beginPath();
      for (i = j = 0, len = line.length; j < len; i = ++j) {
        ref = line[i], x = ref.x, y = ref.y;
        ctx[i === 0 ? "moveTo" : "lineTo"](x, y);
      }
      return ctx.stroke();
    }
  };

  return SmoothLine;

})();

module.exports = SmoothLine;
});

;require.register("lib/easie.coffee", function(exports, require, module) {

/*
  Easie.coffee (https://github.com/jimjeffers/Easie)
  Project created by J. Jeffers

  Robert Penner's Easing Equations in CoffeeScript
  http://robertpenner.com/easing/
 */
var Easie;

Easie = {
  backIn: function(time, begin, change, duration, overshoot) {
    if (overshoot == null) {
      overshoot = 1.70158;
    }
    return change * (time /= duration) * time * ((overshoot + 1) * time - overshoot) + begin;
  },
  backOut: function(time, begin, change, duration, overshoot) {
    if (overshoot == null) {
      overshoot = 1.70158;
    }
    return change * ((time = time / duration - 1) * time * ((overshoot + 1) * time + overshoot) + 1) + begin;
  },
  backInOut: function(time, begin, change, duration, overshoot) {
    if (overshoot == null) {
      overshoot = 1.70158;
    }
    if ((time = time / (duration / 2)) < 1) {
      return change / 2 * (time * time * (((overshoot *= 1.525) + 1) * time - overshoot)) + begin;
    } else {
      return change / 2 * ((time -= 2) * time * (((overshoot *= 1.525) + 1) * time + overshoot) + 2) + begin;
    }
  },
  bounceOut: function(time, begin, change, duration) {
    if ((time /= duration) < 1 / 2.75) {
      return change * (7.5625 * time * time) + begin;
    } else if (time < 2 / 2.75) {
      return change * (7.5625 * (time -= 1.5 / 2.75) * time + 0.75) + begin;
    } else if (time < 2.5 / 2.75) {
      return change * (7.5625 * (time -= 2.25 / 2.75) * time + 0.9375) + begin;
    } else {
      return change * (7.5625 * (time -= 2.625 / 2.75) * time + 0.984375) + begin;
    }
  },
  bounceIn: function(time, begin, change, duration) {
    return change - Easie.bounceOut(duration - time, 0, change, duration) + begin;
  },
  bounceInOut: function(time, begin, change, duration) {
    if (time < duration / 2) {
      return Easie.bounceIn(time * 2, 0, change, duration) * 0.5 + begin;
    } else {
      return Easie.bounceOut(time * 2 - duration, 0, change, duration) * 0.5 + change * 0.5 + begin;
    }
  },
  circIn: function(time, begin, change, duration) {
    return -change * (Math.sqrt(1 - (time = time / duration) * time) - 1) + begin;
  },
  circOut: function(time, begin, change, duration) {
    return change * Math.sqrt(1 - (time = time / duration - 1) * time) + begin;
  },
  circInOut: function(time, begin, change, duration) {
    if ((time = time / (duration / 2)) < 1) {
      return -change / 2 * (Math.sqrt(1 - time * time) - 1) + begin;
    } else {
      return change / 2 * (Math.sqrt(1 - (time -= 2) * time) + 1) + begin;
    }
  },
  cubicIn: function(time, begin, change, duration) {
    return change * (time /= duration) * time * time + begin;
  },
  cubicOut: function(time, begin, change, duration) {
    return change * ((time = time / duration - 1) * time * time + 1) + begin;
  },
  cubicInOut: function(time, begin, change, duration) {
    if ((time = time / (duration / 2)) < 1) {
      return change / 2 * time * time * time + begin;
    } else {
      return change / 2 * ((time -= 2) * time * time + 2) + begin;
    }
  },
  elasticOut: function(time, begin, change, duration, amplitude, period) {
    var overshoot;
    if (amplitude == null) {
      amplitude = null;
    }
    if (period == null) {
      period = null;
    }
    if (time === 0) {
      return begin;
    } else if ((time = time / duration) === 1) {
      return begin + change;
    } else {
      if (period == null) {
        period = duration * 0.3;
      }
      if ((amplitude == null) || amplitude < Math.abs(change)) {
        amplitude = change;
        overshoot = period / 4;
      } else {
        overshoot = period / (2 * Math.PI) * Math.asin(change / amplitude);
      }
      return (amplitude * Math.pow(2, -10 * time)) * Math.sin((time * duration - overshoot) * (2 * Math.PI) / period) + change + begin;
    }
  },
  elasticIn: function(time, begin, change, duration, amplitude, period) {
    var overshoot;
    if (amplitude == null) {
      amplitude = null;
    }
    if (period == null) {
      period = null;
    }
    if (time === 0) {
      return begin;
    } else if ((time = time / duration) === 1) {
      return begin + change;
    } else {
      if (period == null) {
        period = duration * 0.3;
      }
      if ((amplitude == null) || amplitude < Math.abs(change)) {
        amplitude = change;
        overshoot = period / 4;
      } else {
        overshoot = period / (2 * Math.PI) * Math.asin(change / amplitude);
      }
      time -= 1;
      return -(amplitude * Math.pow(2, 10 * time)) * Math.sin((time * duration - overshoot) * (2 * Math.PI) / period) + begin;
    }
  },
  elasticInOut: function(time, begin, change, duration, amplitude, period) {
    var overshoot;
    if (amplitude == null) {
      amplitude = null;
    }
    if (period == null) {
      period = null;
    }
    if (time === 0) {
      return begin;
    } else if ((time = time / (duration / 2)) === 2) {
      return begin + change;
    } else {
      if (period == null) {
        period = duration * (0.3 * 1.5);
      }
      if ((amplitude == null) || amplitude < Math.abs(change)) {
        amplitude = change;
        overshoot = period / 4;
      } else {
        overshoot = period / (2 * Math.PI) * Math.asin(change / amplitude);
      }
      if (time < 1) {
        return -0.5 * (amplitude * Math.pow(2, 10 * (time -= 1))) * Math.sin((time * duration - overshoot) * ((2 * Math.PI) / period)) + begin;
      } else {
        return amplitude * Math.pow(2, -10 * (time -= 1)) * Math.sin((time * duration - overshoot) * (2 * Math.PI) / period) + change + begin;
      }
    }
  },
  expoIn: function(time, begin, change, duration) {
    if (time === 0) {
      return begin;
    }
    return change * Math.pow(2, 10 * (time / duration - 1)) + begin;
  },
  expoOut: function(time, begin, change, duration) {
    if (time === duration) {
      return begin + change;
    }
    return change * (-Math.pow(2, -10 * time / duration) + 1) + begin;
  },
  expoInOut: function(time, begin, change, duration) {
    if (time === 0) {
      return begin;
    } else if (time === duration) {
      return begin + change;
    } else if ((time = time / (duration / 2)) < 1) {
      return change / 2 * Math.pow(2, 10 * (time - 1)) + begin;
    } else {
      return change / 2 * (-Math.pow(2, -10 * (time - 1)) + 2) + begin;
    }
  },
  linearNone: function(time, begin, change, duration) {
    return change * time / duration + begin;
  },
  linearIn: function(time, begin, change, duration) {
    return Easie.linearNone(time, begin, change, duration);
  },
  linearOut: function(time, begin, change, duration) {
    return Easie.linearNone(time, begin, change, duration);
  },
  linearInOut: function(time, begin, change, duration) {
    return Easie.linearNone(time, begin, change, duration);
  },
  quadIn: function(time, begin, change, duration) {
    return change * (time = time / duration) * time + begin;
  },
  quadOut: function(time, begin, change, duration) {
    return -change * (time = time / duration) * (time - 2) + begin;
  },
  quadInOut: function(time, begin, change, duration) {
    if ((time = time / (duration / 2)) < 1) {
      return change / 2 * time * time + begin;
    } else {
      return -change / 2 * ((time -= 1) * (time - 2) - 1) + begin;
    }
  },
  quartIn: function(time, begin, change, duration) {
    return change * (time = time / duration) * time * time * time + begin;
  },
  quartOut: function(time, begin, change, duration) {
    return -change * ((time = time / duration - 1) * time * time * time - 1) + begin;
  },
  quartInOut: function(time, begin, change, duration) {
    if ((time = time / (duration / 2)) < 1) {
      return change / 2 * time * time * time * time + begin;
    } else {
      return -change / 2 * ((time -= 2) * time * time * time - 2) + begin;
    }
  },
  quintIn: function(time, begin, change, duration) {
    return change * (time = time / duration) * time * time * time * time + begin;
  },
  quintOut: function(time, begin, change, duration) {
    return change * ((time = time / duration - 1) * time * time * time * time + 1) + begin;
  },
  quintInOut: function(time, begin, change, duration) {
    if ((time = time / (duration / 2)) < 1) {
      return change / 2 * time * time * time * time * time + begin;
    } else {
      return change / 2 * ((time -= 2) * time * time * time * time + 2) + begin;
    }
  },
  sineIn: function(time, begin, change, duration) {
    return -change * Math.cos(time / duration * (Math.PI / 2)) + change + begin;
  },
  sineOut: function(time, begin, change, duration) {
    return change * Math.sin(time / duration * (Math.PI / 2)) + begin;
  },
  sineInOut: function(time, begin, change, duration) {
    return -change / 2 * (Math.cos(Math.PI * time / duration) - 1) + begin;
  }
};

module.exports = Easie;
});

;require.register("lib/element.coffee", function(exports, require, module) {
var Prefix, getBounds, transform, transition;

Prefix = require("lib/prefix");

getBounds = function(el, offset) {
  var bottom, height, left, ref, right, top, width;
  if (offset == null) {
    offset = {
      x: 0,
      y: 0
    };
  }
  ref = el.getBoundingClientRect(), top = ref.top, left = ref.left, right = ref.right, bottom = ref.bottom, width = ref.width, height = ref.height;
  return {
    top: top + offset.y,
    left: left + offset.x,
    right: right + offset.x,
    bottom: bottom + offset.y,
    width: width,
    height: height
  };
};

transform = function(el, transform) {
  var opacity, rotate, scale, skew, x, y, z;
  if (el == null) {
    return console.error("No element to style");
  }
  if (_.isObject(transform)) {
    x = transform.x, y = transform.y, z = transform.z, scale = transform.scale, skew = transform.skew, rotate = transform.rotate, opacity = transform.opacity;
    if (x == null) {
      x = 0;
    }
    if (y == null) {
      y = 0;
    }
    if (z == null) {
      z = 0;
    }
    if (skew == null) {
      skew = 0;
    }
    if (scale == null) {
      scale = 1;
    }
    if (rotate == null) {
      rotate = 0;
    }
    if (typeof x === "number") {
      x += "px";
    }
    if (typeof y === "number") {
      y += "px";
    }
    if (typeof skew === "number") {
      skew += "deg";
    }
    if (typeof rotate === "number") {
      rotate += "deg";
    }
    el.style[Prefix("transform")] = "translate3d(" + x + ", " + y + ", 0)\nskew(" + skew + ")\nscale(" + scale + ")\nrotate(" + rotate + ")";
    if (opacity != null) {
      el.style.opacity = opacity;
    }
    if (transform.transition != null) {
      return transition(el, transform.transition);
    }
  } else if (_.isString(transform)) {
    return el.style[Prefix("transform")] = transform;
  }
};

transition = function(el, transition, triggerRefresh) {
  if (el == null) {
    return console.error("No element to style");
  }
  el.style[Prefix("transition")] = transition;
  if (triggerRefresh) {
    return el.offsetLeft;
  }
};

module.exports = {
  getBounds: getBounds,
  transform: transform,
  transition: transition
};
});

;require.register("lib/fit-text.coffee", function(exports, require, module) {
var DEFAULT_CLONE_STYLE, FONT_SIZE_DECREMENT, MINIMUM_FONT_SIZE_SCROLL, MINIMUM_FONT_SIZE_STATIC, makeClone, makeSpacer;

MINIMUM_FONT_SIZE_STATIC = 8;

MINIMUM_FONT_SIZE_SCROLL = 12;

FONT_SIZE_DECREMENT = 0.5;

DEFAULT_CLONE_STYLE = {
  position: "absolute",
  top: "-100%",
  left: "-100%",
  visibility: "hidden",
  fontSize: ""
};

makeClone = function(el) {
  var attr, clone, i, key, len, ref, style, val;
  style = window.getComputedStyle(el);
  clone = el.cloneNode();
  clone.innerHTML = el.innerHTML;
  for (key in DEFAULT_CLONE_STYLE) {
    val = DEFAULT_CLONE_STYLE[key];
    clone.style[key] = val;
  }
  ref = ["width", "height", "padding", "border"];
  for (i = 0, len = ref.length; i < len; i++) {
    attr = ref[i];
    clone.style[attr] = style[attr];
  }
  clone.classList.add("content-fit-clone");
  return clone;
};

makeSpacer = function() {
  var spacer;
  spacer = document.createElement("div");
  spacer.id = "content-spacer";
  return spacer;
};

module.exports = function(el, done) {
  var active, clone, fitHeight, fontSize, minFontSize, parent, repeat, spacer;
  if (!el) {
    return typeof done === "function" ? done() : void 0;
  }
  minFontSize = window.getComputedStyle(el).overflow === "auto" ? MINIMUM_FONT_SIZE_SCROLL : MINIMUM_FONT_SIZE_STATIC;
  el.classList.add("fitting");
  el.classList.remove("fitted");
  parent = el.parentNode;
  clone = makeClone(el);
  spacer = makeSpacer();
  active = true;
  parent.appendChild(clone);
  clone.appendChild(spacer);
  fontSize = parseFloat(window.getComputedStyle(parent).fontSize);
  fitHeight = parent.offsetHeight;
  (repeat = function(top) {
    var ref;
    if (!active) {
      return;
    }
    if (top !== spacer.offsetTop) {
      return window.setTimeout((function() {
        return repeat(spacer.offsetTop);
      }), 0);
    } else if (spacer.offsetTop > fitHeight && fontSize > minFontSize) {
      fontSize -= FONT_SIZE_DECREMENT;
      clone.style.fontSize = fontSize + "px";
      return repeat(top);
    } else {
      el.style.fontSize = clone.style.fontSize;
      el.offsetHeight;
      el.classList.remove("fitting");
      el.classList.add("fitted");
      if (typeof done === "function") {
        done();
      }
      return (ref = clone.parentNode) != null ? ref.removeChild(clone) : void 0;
    }
  })(top);
  return {
    cancel: function() {
      return active = false;
    }
  };
};
});

;require.register("lib/i18n.coffee", function(exports, require, module) {
var attemptLoadResources, getResources, initialize,
  slice = [].slice;

attemptLoadResources = function(localeName) {
  var locale;
  localeName = localeName.toLowerCase();
  try {
    return locale = require("../data/locales/" + localeName + ".yaml");
  } catch (error) {

  } finally {
    locale;
  }
};

getResources = function(localeName) {
  var localeArr, resource;
  if (localeName == null) {
    localeName = "en";
  }
  while (localeName !== '') {
    resource = attemptLoadResources(localeName);
    if (resource) {
      return resource;
    }
    localeArr = localeName.split('-');
    localeArr.pop();
    localeName = localeArr.join('-');
  }
  return attemptLoadResources(localeName);
};

initialize = function(locale) {
  var enResources, polyglot, resources;
  if (locale == null) {
    locale = (typeof navigator !== "undefined" && navigator !== null ? navigator.language : void 0) || "en";
  }
  polyglot = new Polyglot({
    locale: locale
  });
  resources = getResources(locale);
  enResources = getResources("en");
  polyglot.extend(enResources);
  polyglot.extend(resources);
  if (typeof moment !== "undefined" && moment !== null) {
    moment.locale(locale);
  }
  return window.i18n = function() {
    var args;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return polyglot.t.apply(polyglot, args);
  };
};

module.exports = {
  initialize: initialize
};
});

;require.register("lib/logger.coffee", function(exports, require, module) {
var Logger,
  slice = [].slice;

Logger = (function() {
  function Logger() {
    var args, color, debug, prefix, ref;
    debug = arguments[0], prefix = arguments[1], color = arguments[2], args = 4 <= arguments.length ? slice.call(arguments, 3) : [];
    if (debug == null) {
      debug = false;
    }
    if (prefix == null) {
      prefix = "";
    }
    if (color == null) {
      color = "#333";
    }
    return debug && (typeof console !== "undefined" && console !== null ? (ref = console.log) != null ? typeof ref.bind === "function" ? ref.bind.apply(ref, [console, "%c %c" + prefix + "%c →", "background: " + color + "; border-radius: 10px; padding-left: 5px; font-size: xx-small; margin-right: 5px;", "color: #333; font-weight: bold;", ""].concat(slice.call(args))) : void 0 : void 0 : void 0) || function() {};
  }

  return Logger;

})();

module.exports = Logger;
});

;require.register("lib/middleware.coffee", function(exports, require, module) {
var _action, action, actions, fillPossibleActions, initialize, platforms, possibleActions, process, process_type, registerMiddlewares, registerPlatformMiddlewares, registeredMiddlewares, run,
  slice = [].slice;

process = function(remainingMiddlewares) {
  return function(action) {
    var mProcess, middleware, next, nextMiddlewares;
    if (remainingMiddlewares.length === 0) {
      return;
    }
    middleware = remainingMiddlewares[0];
    nextMiddlewares = remainingMiddlewares.slice(1, remainingMiddlewares.length);
    next = process(nextMiddlewares);
    mProcess = middleware.process || process_type(middleware.type, middleware.commands);
    if (action != null) {
      return mProcess(action, next);
    }
  };
};

process_type = function(only_type, commands) {
  return function(arg, next) {
    var command, new_command, params, type;
    type = arg.type, command = arg.command, params = arg.params;
    if (type === only_type) {
      new_command = commands(next)[command];
      if (new_command != null) {
        return next(new_command.apply(null, params));
      } else {
        return next({
          type: type,
          command: command,
          params: params
        });
      }
    } else {
      return next({
        type: type,
        command: command,
        params: params
      });
    }
  };
};

run = function(command, method, id_generator) {
  var code, iframe, url;
  iframe = document.createElement("IFRAME");
  code = method(command, id_generator);
  url = "gap-code://" + (escape(unescape(encodeURIComponent(code))));
  iframe.setAttribute("src", url);
  document.documentElement.appendChild(iframe);
  iframe.parentNode.removeChild(iframe);
  return iframe = null;
};

registeredMiddlewares = [];

registerMiddlewares = function(middlewareList) {
  var err, i, len, loaded, loadedMiddleware, middlewareToLoad;
  loaded = [];
  for (i = 0, len = middlewareList.length; i < len; i++) {
    middlewareToLoad = middlewareList[i];
    try {
      loadedMiddleware = require(middlewareToLoad);
      loaded.push(loadedMiddleware);
    } catch (error) {
      err = error;
      console.error("Error while requiring " + middlewareToLoad, err);
    }
  }
  registeredMiddlewares = loaded;
  return Backbone.Events.on("publish", process(registeredMiddlewares));
};

_action = function(type, command, direction) {
  if (direction == null) {
    direction = "publish";
  }
  return function() {
    var event, params;
    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    event = direction;
    if (direction === "subscribe") {
      event += ":" + type + ":" + command;
    }
    return Backbone.Events.trigger(event, {
      type: type,
      command: command,
      params: params
    });
  };
};

possibleActions = {};

fillPossibleActions = function(middlewares, active) {
  var command, i, len, m, name, results, val;
  possibleActions = {};
  results = [];
  for (i = 0, len = middlewares.length; i < len; i++) {
    m = middlewares[i];
    if (m.type != null) {
      name = m.type[0].toUpperCase() + m.type.slice(1);
      possibleActions[name] = {};
      if (m.commands != null) {
        results.push((function() {
          var ref, results1;
          ref = m.commands();
          results1 = [];
          for (command in ref) {
            val = ref[command];
            results1.push(possibleActions[name][command] = _action(m.type, command));
          }
          return results1;
        })());
      } else {
        results.push(void 0);
      }
    } else {
      results.push(void 0);
    }
  }
  return results;
};

registerPlatformMiddlewares = function(platforms, my_platform) {
  var allMiddlewares, middlewares, platform;
  allMiddlewares = [];
  for (platform in platforms) {
    middlewares = platforms[platform];
    if (platform !== my_platform) {
      allMiddlewares = allMiddlewares.concat(middlewares);
    }
  }
  allMiddlewares = allMiddlewares.concat(platforms[my_platform]);
  fillPossibleActions(allMiddlewares.map(require));
  if (_.isString(my_platform)) {
    return registerMiddlewares(platforms[my_platform]);
  } else if (_.isArray(my_platform)) {
    return registerMiddlewares(my_platform);
  }
};

actions = function(type) {
  if (type != null) {
    return possibleActions != null ? possibleActions[type] : void 0;
  } else {
    return possibleActions;
  }
};

action = function(direction) {
  if (direction == null) {
    direction = "publish";
  }
  return function(namespace) {
    var command, ref, type;
    ref = namespace.split(/\:/), type = ref[0], command = ref[1];
    return _action(type, command, direction);
  };
};

platforms = {
  browser: ["lib/middleware/session", "lib/middleware/backbone_event", "lib/middleware/webview", "lib/middleware/browser/analytics", "lib/middleware/browser/app_lesson", "lib/middleware/browser/sound"],
  scorm: ["lib/middleware/session", "lib/middleware/backbone_event", "lib/middleware/webview", "lib/middleware/scorm/scorm_analytics", "lib/middleware/scorm/scorm_lesson", "lib/middleware/browser/sound"]
};

initialize = function(platform) {
  var ref;
  if (platform == null) {
    platform = ((ref = window.__) != null ? ref.platform : void 0) || "browser";
  }
  return registerPlatformMiddlewares(platforms, platform);
};

module.exports = {
  process: process,
  run: run,
  initialize: initialize,
  actions: actions,
  action: action(),
  publish: action("publish"),
  subscribe: action("subscribe")
};
});

;require.register("lib/middleware/backbone_event.coffee", function(exports, require, module) {
var DEBUG, eventToCode, process, runCommand;

DEBUG = false;

eventToCode = function(arg) {
  var command, command_str, params, ref, ref1, ref2, type;
  command = arg.command, type = arg.type, params = arg.params;
  command_str = "Backbone.Events.trigger(";
  if (((ref = window.__) != null ? (ref1 = ref.slidedeck) != null ? ref1.id : void 0 : void 0) != null) {
    command_str += "'slidedeck:" + window.__.slidedeck.id + (":" + command + "'");
  } else if (((ref2 = window.__) != null ? ref2.challenge : void 0) != null) {
    command_str += "'challenge:" + command + "'";
  } else {
    command_str += "'" + command + "'";
  }
  if (_.isArray(params) && params.length > 0) {
    command_str += ", " + (JSON.stringify(params[0]));
  }
  command_str += ");";
  if (DEBUG) {
    console.log("BACKBONE", command_str);
  }
  return command_str;
};

runCommand = function(params) {
  var message, ref;
  if ((ref = window.parent) != null ? ref.postMessage : void 0) {
    message = eventToCode(params);
    return window.parent.postMessage(message, "*");
  }
};

process = function(command, next) {
  if ((command != null ? command.type : void 0) === "event") {
    return runCommand(command, null);
  } else {
    return next(command);
  }
};

module.exports = {
  process: process,
  type: "backbone_event"
};
});

;require.register("lib/middleware/browser/analytics.coffee", function(exports, require, module) {
var commands, startTracking, stopTracking, trackEvent, trackInteraction, trackView;

trackView = function(data, done) {
  return Application.publish("event:view")(data);
};

trackInteraction = function(data) {
  return Application.publish("event:interaction")(data);
};

trackEvent = function() {};

startTracking = function() {};

stopTracking = function() {};

commands = function(next) {
  return {
    trackInteraction: trackInteraction,
    trackView: trackView,
    startTracking: startTracking,
    stopTracking: stopTracking,
    trackEvent: trackEvent
  };
};

module.exports = {
  type: "analytics",
  commands: commands
};
});

;require.register("lib/middleware/browser/app_lesson.coffee", function(exports, require, module) {
var commands, complete, exit, open, opener, receiveMessage;

complete = function(data, done) {
  return Application.publish("event:completed")({});
};

open = function() {};

exit = function() {};

commands = function(next) {
  return {
    complete: complete,
    open: open,
    exit: exit
  };
};

receiveMessage = function(event) {
  var err, origin;
  origin = event.origin || event.originalEvent.origin;
  commands = event.data;
  try {
    return eval(commands);
  } catch (error) {
    err = error;
  }
};

window.addEventListener("message", receiveMessage, false);

opener = window.opener || window.parent;

if (opener != null) {
  opener.postMessage("Backbone.Events.trigger('lesson-ready');", '*');
}

module.exports = {
  type: "lesson",
  commands: commands
};
});

;require.register("lib/middleware/browser/sound-audio-api.coffee", function(exports, require, module) {
var _AudioContext, _firstSoundPlayed, _sharedContext, _shouldCreateNewAudioContext, commands, disableSystemSounds, enabled, ev, fadeIn, fadeOut, firstSoundPlayed, getAudio, getLastAudio, getPath, getPermission, getSharedAudioContext, i, len, loadAudio, loup, onPlayEmpty, play, playEmpty, playOpts, preload, progressInterval, sounds, sources, stop, stopAll, timers, userInteractionEvents;

sounds = {};

timers = {};

enabled = true;

_AudioContext = window.AudioContext || window.webkitAudioContext;

_firstSoundPlayed = false;

onPlayEmpty = [];

sources = {};

_shouldCreateNewAudioContext = false;

_sharedContext = null;

userInteractionEvents = ["click", "touchend", "touchstart"];

Backbone.Events.on("publish", function(event) {
  if (event.command === "video-play" && (_sharedContext == null)) {
    return _shouldCreateNewAudioContext = true;
  }
});


/**
 * Returns a shared instance of the Audio Context.
 * This needs to be wrapped to fix an iOS webkit issue where video playback
 * corrupts the audio context resulting in distorted audio. Fixes ED-6076.
 * @see {@link https://bugs.webkit.org/show_bug.cgi?id=168165}
 * @see {@link https://bugs.webkit.org/show_bug.cgi?id=154538}
 * @returns {Promise} Promise object with the shared audio context
 */

getSharedAudioContext = function() {
  return new Promise(function(resolve, reject) {
    if (_sharedContext == null) {
      _sharedContext = new _AudioContext;
    }
    if (_shouldCreateNewAudioContext) {
      _shouldCreateNewAudioContext = false;
      return _sharedContext.close().then(function() {
        return resolve(_sharedContext = new _AudioContext);
      });
    } else {
      return resolve(_sharedContext);
    }
  });
};

getPath = function(name) {
  name = name.replace("system:", "audio/");
  if (name.match(/\.[^\.]+$/)) {
    return name;
  } else {
    return name + ".mp3";
  }
};

loadAudio = function(path) {
  var cancel, cancelled, isCancelled, promise;
  cancelled = false;
  cancel = function() {
    return cancelled = true;
  };
  isCancelled = function() {
    return cancelled;
  };
  promise = new Promise(function(resolve, reject) {
    var req;
    req = new XMLHttpRequest();
    req.open('GET', path, true);
    req.responseType = 'arraybuffer';
    req.onload = function() {
      if (cancelled) {
        return reject("sound cancelled");
      } else {
        return getSharedAudioContext().then(function(context) {
          return context.decodeAudioData(req.response, resolve, reject);
        });
      }
    };
    req.onerror = function() {
      return reject("load error");
    };
    return req.send();
  });
  return {
    promise: promise,
    cancel: cancel,
    isCancelled: isCancelled
  };
};

getLastAudio = function(name) {
  return new Promise(function(resolve, reject) {
    if ((sources[name] != null) && sources[name].length > 0) {
      return resolve(sources[name][sources[name].length - 1]);
    } else {
      return reject("no audio playing");
    }
  });
};

getAudio = function(name, from) {
  if (from == null) {
    from = sounds;
  }
  if (name.match("system:")) {
    if (enabled) {
      from[name] = loadAudio(getPath(name));
    }
  } else {
    from[name] = loadAudio(getPath(name));
  }
  if (from[name] == null) {
    return null;
  }
  return from[name].promise.then(function(buf) {
    if (from[name].isCancelled()) {
      throw new Error("sound cancelled");
    }
    return getSharedAudioContext().then(function(context) {
      var bufferSource, gain;
      bufferSource = context.createBufferSource();
      gain = context.createGain();
      bufferSource.buffer = buf;
      bufferSource.connect(gain);
      gain.connect(context.destination);
      if (sources[name] == null) {
        sources[name] = [];
      }
      sources[name].push({
        bufferSource: bufferSource,
        gain: gain
      });
      return {
        bufferSource: bufferSource,
        gain: gain
      };
    });
  });
};

preload = function(path, id, cb) {
  if (cb == null) {
    cb = function() {};
  }
  if (_firstSoundPlayed) {
    getAudio(path);
    return cb();
  } else {
    return onPlayEmpty.push({
      path: path,
      id: id,
      cb: cb
    });
  }
};

playEmpty = function(cb) {
  if (cb == null) {
    cb = function() {};
  }
  return getSharedAudioContext().then(function(context) {
    var bs, buf, i, id, len, path, ref;
    if (context.state === !'suspended' && _firstSoundPlayed === true) {
      return cb();
    } else {
      stopAll();
      _firstSoundPlayed = true;
      buf = context.createBuffer(2, 22050, 44100);
      bs = context.createBufferSource();
      bs.buffer = buf;
      bs.connect(context.destination);
      bs.start();
      for (i = 0, len = onPlayEmpty.length; i < len; i++) {
        ref = onPlayEmpty[i], path = ref.path, id = ref.id, cb = ref.cb;
        preload(path, id, cb);
      }
      return cb();
    }
  })["catch"](function(err) {
    return console.warn('sound error', err);
  });
};

getPermission = function(arg) {
  var ev, i, len, type;
  type = arg.type;
  for (i = 0, len = userInteractionEvents.length; i < len; i++) {
    ev = userInteractionEvents[i];
    window.removeEventListener(ev, getPermission, true);
  }
  return playEmpty();
};

for (i = 0, len = userInteractionEvents.length; i < len; i++) {
  ev = userInteractionEvents[i];
  window.addEventListener(ev, getPermission, true);
}

progressInterval = null;

playOpts = function(arg) {
  var clearTimer, source;
  clearTimer = arg.clearTimer, source = arg.source;
  return function(name, cb) {
    var ended, sourceP;
    if (cb == null) {
      cb = function() {};
    }
    sourceP = source != null ? new Promise(function(resolve, reject) {
      return resolve(source);
    }) : getAudio(name);
    if (sourceP == null) {
      cb({
        name: name
      });
      return;
    }
    _firstSoundPlayed = true;
    ended = false;
    return sourceP.then(function(arg1) {
      var bufferSource, duration, onComplete, onProgress, onTimeUpdate, ref, startTime;
      bufferSource = arg1.bufferSource;
      if (clearTimer) {
        window.clearTimeout(timers[name]);
      }
      if (!_.isFunction(cb)) {
        ref = cb, onProgress = ref.onProgress, onComplete = ref.onComplete, cb = ref.cb;
        startTime = Date.now();
        duration = bufferSource.buffer.duration * 1000;
        onTimeUpdate = function() {
          var progress;
          if (ended) {
            return window.clearInterval(progressInterval);
          } else {
            progress = (Date.now() - startTime) / duration;
            progress = Math.min(progress, 1.0);
            return onProgress(progress);
          }
        };
        bufferSource.onended = function() {
          ended = true;
          onProgress(1);
          return onComplete();
        };
        if (progressInterval != null) {
          window.clearInterval(progressInterval);
        }
        window.setInterval(onTimeUpdate, 20);
      }
      bufferSource.start(0);
      return cb({
        name: name
      });
    });
  };
};

play = playOpts({
  clearTimer: true
});

loup = function(name, cb) {
  var source;
  if (cb == null) {
    cb = function() {};
  }
  source = getAudio(name);
  if (source == null) {
    cb();
    return;
  }
  return source.then(function(arg) {
    var bufferSource, duration, firstTime, gain, repeat;
    bufferSource = arg.bufferSource, gain = arg.gain;
    duration = bufferSource.buffer.duration * 1000;
    if (!(duration > 0)) {
      return;
    }
    window.clearTimeout(timers[name]);
    firstTime = true;
    (repeat = function() {
      if (firstTime) {
        playOpts({
          clearTimer: false,
          source: {
            bufferSource: bufferSource,
            gain: gain
          }
        })(name);
        firstTime = false;
      } else {
        playOpts({
          clearTimer: false
        })(name);
      }
      return timers[name] = window.setTimeout(repeat, duration);
    })();
    return cb();
  });
};

fadeIn = function(name, ms, increment) {
  if (ms == null) {
    ms = 2000;
  }
  if (increment == null) {
    increment = 0.05;
  }
  return loup(name, function() {
    return getLastAudio(name).then(function(arg) {
      var bufferSource, gain, repeat;
      bufferSource = arg.bufferSource, gain = arg.gain;
      gain.gain.value = 0;
      return (repeat = function() {
        gain.gain.value = Math.max((gain.gain.value || 0.0) + increment, 0);
        if (gain.gain.value < 1) {
          return window.setTimeout(repeat, ms * increment);
        }
      })();
    });
  });
};

fadeOut = function(name, ms, increment) {
  if (ms == null) {
    ms = 2000;
  }
  if (increment == null) {
    increment = 0.05;
  }
  return getLastAudio(name).then(function(arg) {
    var bufferSource, gain, msElapsed, repeat;
    bufferSource = arg.bufferSource, gain = arg.gain;
    msElapsed = 0;
    return (repeat = function() {
      msElapsed += increment * ms;
      gain.gain.value = Math.max((gain.gain.value || 1.0) - increment, 0);
      if (msElapsed < ms) {
        return window.setTimeout(repeat, ms * increment);
      } else {
        window.clearTimeout(timers[name]);
        try {
          return bufferSource.stop();
        } catch (error) {}
      }
    })();
  });
};

stopAll = function() {
  var bufferSource, gain, j, len1, name, ref, ref1, results, sourceList;
  results = [];
  for (name in sources) {
    sourceList = sources[name];
    if ((ref = sounds[name]) != null) {
      if (typeof ref.cancel === "function") {
        ref.cancel();
      }
    }
    for (j = 0, len1 = sourceList.length; j < len1; j++) {
      ref1 = sourceList[j], bufferSource = ref1.bufferSource, gain = ref1.gain;
      try {
        bufferSource.stop();
      } catch (error) {}
    }
    sources[name] = [];
    results.push(window.clearTimeout(timers[name]));
  }
  return results;
};

stop = function(name, cb) {
  var bufferSource, gain, j, len1, ref, ref1, ref2;
  if (cb == null) {
    cb = function() {};
  }
  window.clearTimeout(timers[name]);
  if ((ref = sounds[name]) != null) {
    if (typeof ref.cancel === "function") {
      ref.cancel();
    }
  }
  ref1 = sources[name] || [];
  for (j = 0, len1 = ref1.length; j < len1; j++) {
    ref2 = ref1[j], bufferSource = ref2.bufferSource, gain = ref2.gain;
    try {
      bufferSource.stop();
    } catch (error) {}
  }
  sources[name] = [];
  return cb();
};

disableSystemSounds = function() {
  return enabled = false;
};

firstSoundPlayed = function(cb) {
  return getSharedAudioContext().then(function(context) {
    if (context.state === 'suspended') {
      return cb(null, false);
    } else {
      return cb(null, _firstSoundPlayed);
    }
  });
};

commands = function(next) {
  return {
    preload: preload,
    stop: stop,
    play: play,
    stopAll: stopAll,
    fadeIn: fadeIn,
    fadeOut: fadeOut,
    disableSystemSounds: disableSystemSounds,
    loop: loup,
    stopId: stop,
    playId: play,
    loopId: loup,
    playEmpty: playEmpty,
    firstSoundPlayed: firstSoundPlayed
  };
};

module.exports = {
  type: "sound",
  commands: commands
};
});

;require.register("lib/middleware/browser/sound-html.coffee", function(exports, require, module) {
var clones, commands, disableSystemSounds, enabled, fadeIn, fadeOut, firstSoundPlayed, getAudio, getClone, getPath, loup, play, preload, sounds, stop, stopAll, timers;

sounds = {};

clones = {};

timers = {};

enabled = true;

getPath = function(name) {
  name = name.replace("system:", "audio/");
  if (name.match(/\.[^\.]+$/)) {
    return name;
  } else {
    return name + ".mp3";
  }
};

getAudio = function(name, from) {
  if (from == null) {
    from = sounds;
  }
  if (name == null) {
    return null;
  }
  if (from[name]) {
    return from[name];
  } else if (name.match("system:")) {
    if (enabled) {
      return from[name] = new Audio(getPath(name));
    }
  } else {
    return from[name] = new Audio(getPath(name));
  }
};

preload = function(path, id, cb) {
  if (cb == null) {
    cb = function() {};
  }
  getAudio(path);
  return cb();
};

play = function(name, cb) {
  var $sound, onComplete, onProgress, onTimeUpdate, ref, sound;
  if (cb == null) {
    cb = function() {};
  }
  sound = getAudio(name);
  window.clearTimeout(timers[name]);
  if (sound != null) {
    $sound = $(sound).off();
    if (!_.isFunction(cb)) {
      ref = cb, onProgress = ref.onProgress, onComplete = ref.onComplete, cb = ref.cb;
      onTimeUpdate = function() {
        return onProgress(sound.currentTime / sound.duration);
      };
      $sound.on("ended", onComplete);
      $sound.on("timeupdate", onTimeUpdate);
    }
    if (sound.currentTime > 0) {
      sound.currentTime = 0;
    }
    sound.play();
  }
  return cb({
    name: name
  });
};

loup = function(name, cb) {
  var clone, current, duration, original, repeat;
  if (cb == null) {
    cb = function() {};
  }
  getClone(name);
  original = getAudio(name);
  if (original != null) {
    clone = getClone(name);
    current = original;
    duration = current.duration * 1000;
    if (!(duration > 0)) {
      return;
    }
    window.clearTimeout(timers[name]);
    (repeat = function() {
      current.currentTime = 0;
      current.play();
      current = current === original ? clone : original;
      return timers[name] = window.setTimeout(repeat, duration);
    })();
  }
  return cb();
};

stop = function(name, cb) {
  var ref, ref1;
  if (cb == null) {
    cb = function() {};
  }
  window.clearTimeout(timers[name]);
  if ((ref = getAudio(name)) != null) {
    ref.pause();
  }
  if ((ref1 = getAudio(name, clones)) != null) {
    ref1.pause();
  }
  return cb();
};

getClone = function(name) {
  if (clones[name] == null) {
    clones[name] = new Audio(getPath(name));
  }
  return clones[name];
};

fadeIn = function(name, ms, increment) {
  var clone, elapsed, repeat, sound;
  if (ms == null) {
    ms = 2000;
  }
  if (increment == null) {
    increment = 0.05;
  }
  sound = getAudio(name);
  clone = getClone(name);
  elapsed = 0;
  if (sound != null) {
    loup(name);
    clone.volume = sound.volume = 0;
    return (repeat = function() {
      clone.volume = sound.volume = Math.min(sound.volume + increment, 1);
      if (sound.volume < 1 && elapsed < ms) {
        elapsed += ms * increment;
        return window.setTimeout(repeat, ms * increment);
      }
    })();
  }
};

fadeOut = function(name, ms, increment) {
  var clone, elapsed, repeat, sound;
  if (ms == null) {
    ms = 2000;
  }
  if (increment == null) {
    increment = 0.05;
  }
  sound = getAudio(name);
  clone = getAudio(name, clones);
  elapsed = 0;
  if (sound != null) {
    return (repeat = function() {
      clone.volume = sound.volume = Math.max(sound.volume - increment, 0);
      if (sound.volume > 0 && elapsed < ms) {
        elapsed += ms * increment;
        return window.setTimeout(repeat, ms * increment);
      } else {
        stop(name);
        return clone.volume = sound.volume = 1;
      }
    })();
  }
};

stopAll = function() {
  var name, results, sound;
  results = [];
  for (name in sounds) {
    sound = sounds[name];
    results.push(sound.pause());
  }
  return results;
};

disableSystemSounds = function() {
  return enabled = false;
};

firstSoundPlayed = function(cb) {
  return cb(null, true);
};

commands = function(next) {
  return {
    preload: preload,
    stop: stop,
    play: play,
    stopAll: stopAll,
    fadeIn: fadeIn,
    fadeOut: fadeOut,
    disableSystemSounds: disableSystemSounds,
    loop: loup,
    stopId: stop,
    playId: play,
    loopId: loup,
    firstSoundPlayed: firstSoundPlayed
  };
};

module.exports = {
  type: "sound",
  commands: commands
};
});

;require.register("lib/middleware/browser/sound.coffee", function(exports, require, module) {
var audioContext;

audioContext = window.AudioContext || window.webkitAudioContext;

module.exports = (audioContext != null) && (typeof Promise !== "undefined" && Promise !== null) ? require('./sound-audio-api') : require('./sound-html');
});

;require.register("lib/middleware/scorm/scorm_analytics.coffee", function(exports, require, module) {
var commands, interactions, scores, startTracking, stopTracking, track, trackEvent, trackInteraction, trackScoreAndCompletion, trackView;

interactions = [];

scores = {};

track = function(event, done) {
  if (done == null) {
    done = function() {};
  }
};

trackView = function(data, done) {
  if (done == null) {
    done = function() {};
  }
};

trackInteraction = function(data, done) {
  var earned, max, min, name, ref, ref1, ref2, total;
  if (done == null) {
    done = function() {};
  }
  interactions.push(data);
  if (((data != null ? (ref = data.configuration) != null ? ref.nb_stars : void 0 : void 0) != null) || ((data != null ? (ref1 = data.configuration) != null ? ref1.weighting : void 0 : void 0) != null)) {
    name = data.name;
    total = data.configuration.weighting != null ? data.configuration.weighting : data.configuration.nb_stars;
    earned = data.game ? ((ref2 = data.slideData.game.stars, max = ref2.max, min = ref2.min, ref2), data.configuration.weighting != null ? data.score.total < min ? 0 : data.score.total > max ? total : Math.floor((data.score.total - min) / ((max - min) / total)) : data.nb_stars_earned) : data.correct ? total : 0;
    return scores[name] = {
      earned: earned,
      total: total
    };
  }
};

trackScoreAndCompletion = function(minScaledScore, incompleteOnFail) {
  var _earned, _scaled, _scores, _total, failStatus, k, v;
  if (minScaledScore == null) {
    minScaledScore = 0;
  }
  if (incompleteOnFail == null) {
    incompleteOnFail = false;
  }
  _scores = ((function() {
    var results;
    results = [];
    for (k in scores) {
      v = scores[k];
      results.push(v);
    }
    return results;
  })()) || [];
  _earned = _scores.reduce((function(result, s) {
    return result + s.earned;
  }), 0);
  _total = _scores.reduce((function(result, s) {
    return result + s.total;
  }), 0);
  _scaled = _earned * 100.0 / _total;
  pipwerks.SCORM.set("cmi.core.score.raw", _earned);
  pipwerks.SCORM.set("cmi.core.score.min", 0);
  pipwerks.SCORM.set("cmi.core.score.max", _total);
  pipwerks.SCORM.set("cmi.score.raw", _earned);
  pipwerks.SCORM.set("cmi.score.min", 0);
  pipwerks.SCORM.set("cmi.score.max", _total);
  if (_total === 0 || _scores.length === 0 || _scaled >= minScaledScore) {
    pipwerks.SCORM.set("cmi.completion_status", "completed");
    console.log("SCORM lesson completed");
    return pipwerks.SCORM.set("cmi.core.lesson_status", "passed");
  } else {
    failStatus = incompleteOnFail ? "incomplete" : "failed";
    pipwerks.SCORM.set("cmi.completion_status", "incomplete");
    return pipwerks.SCORM.set("cmi.core.lesson_status", failStatus);
  }
};

trackEvent = function() {};

startTracking = function() {};

stopTracking = function() {};

commands = function(next) {
  return {
    trackInteraction: trackInteraction,
    trackView: trackView,
    startTracking: startTracking,
    stopTracking: stopTracking,
    trackEvent: trackEvent,
    trackScoreAndCompletion: trackScoreAndCompletion
  };
};

module.exports = {
  type: "analytics",
  commands: commands
};
});

;require.register("lib/middleware/scorm/scorm_lesson.coffee", function(exports, require, module) {
var Lesson, commands, complete, exit, open, padLeft, setSessionTime, start_time;

Lesson = require('../../../models/lesson');

start_time = null;

open = function() {
  var lesson;
  start_time = Date.now();
  lesson = new Lesson();
  return lesson.load(function(err, lessonData) {
    var initOptions, ref;
    initOptions = {
      preventLogoutOnExit: !!(lessonData != null ? (ref = lessonData.config) != null ? ref.preventLogoutOnExit : void 0 : void 0)
    };
    return pipwerks.SCORM.init(initOptions);
  });
};

padLeft = function(val, length) {
  var l, str, vl;
  if (val == null) {
    val = "";
  }
  str = "";
  vl = val.toString().length;
  if (vl >= length) {
    return val;
  } else {
    l = length - vl + 1;
    return (new Array(l).join("0")).substr(0, length - vl) + val;
  }
};

setSessionTime = function() {
  var end_time, hours, minutes, seconds, session_time;
  end_time = Date.now();
  session_time = Math.floor((end_time - start_time) / 1000);
  hours = Math.floor(session_time / 3600);
  minutes = Math.floor((session_time - hours * 3600) / 60);
  seconds = session_time - hours * 3600 + minutes * 60;
  session_time = [padLeft(hours, 4), padLeft(minutes, 2), padLeft(seconds, 2)].join(":");
  return pipwerks.SCORM.set("cmi.core.session_time", session_time);
};

complete = function() {
  var lesson;
  setSessionTime();
  lesson = new Lesson();
  return lesson.load(function(err, lessonData) {
    var incompleteOnFail, minimumScore, ref;
    if (lessonData) {
      ref = lessonData.config || {}, minimumScore = ref.minimumScore, incompleteOnFail = ref.incompleteOnFail;
      Application.actions("Analytics").trackScoreAndCompletion(minimumScore, incompleteOnFail);
    } else {
      console.error("Error loading lesson data", err);
    }
    if (lessonData.config.hasScormExitButton) {
      return pipwerks.SCORM.save();
    } else {
      return pipwerks.SCORM.quit();
    }
  });
};

exit = function() {
  setSessionTime();
  return pipwerks.SCORM.quit();
};

commands = function(next) {
  return {
    complete: complete,
    open: open,
    exit: exit
  };
};

module.exports = {
  type: "lesson",
  commands: commands
};
});

;require.register("lib/middleware/session.coffee", function(exports, require, module) {
var commands, get, waitAndGet;

waitAndGet = function(n) {
  var _waitAndGet, maxWaitingInterval, pollingInterval, startToWait;
  startToWait = Date.now();
  maxWaitingInterval = 5000;
  pollingInterval = 50;
  _waitAndGet = function(n) {
    if ((typeof __ !== "undefined" && __ !== null ? __.slidedeck : void 0) != null) {
      return n(null, __.slidedeck);
    } else if (Date.now() - startToWait > maxWaitingInterval) {
      return n(new Error("timeout"));
    } else {
      return setTimeout((function() {
        return _waitAndGet(n);
      }), pollingInterval);
    }
  };
  return _waitAndGet(n);
};

get = function(n) {
  return n(null, (typeof __ !== "undefined" && __ !== null ? __.slidedeck : void 0) != null ? __.slidedeck : {});
};

commands = function(next) {
  return {
    get: get,
    waitAndGet: waitAndGet
  };
};

module.exports = {
  type: "session",
  commands: commands
};
});

;require.register("lib/middleware/webview.coffee", function(exports, require, module) {
var process;

process = function(command, next) {
  var ref, target, url;
  if ((command != null ? command.type : void 0) === "url") {
    ref = command.params[0], target = ref.target, url = ref.url;
    if (!(url.indexOf('http') === 0 || url.indexOf('#') === 0)) {
      url = "http://" + url;
    }
    return window.open(url, target);
  } else {
    return next(command);
  }
};

module.exports = {
  process: process,
  type: "url"
};
});

;require.register("lib/prefix.coffee", function(exports, require, module) {
var Prefixer, emptyStyle, myPrefixer;

emptyStyle = document.createElement("div").style;

Prefixer = (function() {
  function Prefixer() {}

  Prefixer.prototype.vendorPrefixes = {};

  Prefixer.prototype._getVendorPrefixFor = function(style) {
    var S, i, len, prefixed, ref, s, vendor;
    s = style.substr(0, 1);
    S = s.toUpperCase();
    ref = [s, "webkit" + S, "Moz" + S, "ms" + S, "O" + S];
    for (i = 0, len = ref.length; i < len; i++) {
      vendor = ref[i];
      prefixed = vendor + style.substr(1);
      if (prefixed in emptyStyle) {
        return vendor.substr(0, vendor.length - 1);
      }
    }
    return false;
  };

  Prefixer.prototype._camelCase = function(style) {
    return style.replace(/\-(\w)/gi, function(str, w) {
      return w.toUpperCase();
    });
  };

  Prefixer.prototype.prefix = function(style) {
    var base, vendorPrefix;
    style = this._camelCase(style);
    vendorPrefix = this._getVendorPrefixFor(style);
    if (vendorPrefix === "") {
      return style;
    } else if (vendorPrefix) {
      return (base = this.vendorPrefixes)[style] != null ? base[style] : base[style] = vendorPrefix + style.charAt(0).toUpperCase() + style.substr(1);
    } else {
      return false;
    }
  };

  return Prefixer;

})();

myPrefixer = new Prefixer();

module.exports = function(style) {
  return myPrefixer.prefix(style);
};
});

;require.register("lib/preload.coffee", function(exports, require, module) {
var Logger, MediaElement, extensions, isAsset, load, preloadLessonAssets, preloadThomasAssets, regexs, type, types,
  slice = [].slice;

Logger = function() {
  var args;
  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
  return console.log.apply(console, args);
};

types = {
  image: ["png", "jpg", "jpeg", "gif", "svg"],
  video: ["mp4", "mpeg", "m4v"],
  audio: ["wav", "mp3"]
};

regexs = [];

for (type in types) {
  extensions = types[type];
  regexs[type] = new RegExp(".(" + (extensions.join('|')) + ")$", 'i');
}

isAsset = function(asset, type) {
  return asset != null ? typeof asset.match === "function" ? asset.match(regexs[type]) : void 0 : void 0;
};

MediaElement = (function() {
  function MediaElement() {
    this.image = new Image();
    this.audio = new Audio();
    this.src = null;
    this.type = null;
  }

  MediaElement.prototype.onload = function() {};

  MediaElement.prototype.onerror = function() {};

  MediaElement.prototype.remove = function() {};

  MediaElement.prototype.setSrc = function(url) {
    this.src = url;
    if (url.match(regexs.image)) {
      this.type = "image";
      this.image.src = url;
      this.image.onload = (function(_this) {
        return function() {
          return _this.onload();
        };
      })(this);
      return this.image.onerror = (function(_this) {
        return function() {
          return _this.onerror();
        };
      })(this);
    } else if (url.match(regexs.audio)) {
      this.type = "audio";
      return $.ajax({
        url: url,
        type: "GET",
        success: (function(_this) {
          return function() {
            return _this.onload();
          };
        })(this),
        error: (function(_this) {
          return function() {
            return _this.onerror();
          };
        })(this)
      });
    } else {
      return console.error("Unrecognized type");
    }
  };

  MediaElement.prototype.getSrc = function() {
    return this.src;
  };

  MediaElement.prototype.getType = function() {
    return this.type;
  };

  MediaElement.prototype.getContent = function() {
    return this.image || this.audio;
  };

  return MediaElement;

})();

load = function(all, callback, conc, maxTime) {
  var cancel, count, elements, errors, fn, grouped, i, mediaEls, onComplete, start, timeout, total;
  if (all == null) {
    all = [];
  }
  if (conc == null) {
    conc = 4;
  }
  if (maxTime == null) {
    maxTime = 3000;
  }
  if (all.length === 0) {
    return typeof callback === "function" ? callback() : void 0;
  }
  all = _.compact(all);
  if (all.length === 0) {
    return typeof callback === "function" ? callback() : void 0;
  }
  count = 0;
  errors = [];
  cancel = false;
  start = Date.now();
  total = all.length;
  mediaEls = (function() {
    var j, ref, results;
    results = [];
    for (i = j = 0, ref = conc; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      results.push(new MediaElement());
    }
    return results;
  })();
  grouped = _.groupBy(all, function(e, i, arr) {
    return Math.floor(i / arr.length * conc);
  });
  Logger("loading " + all.length + " media element(s)");
  onComplete = function() {
    var duration, el, elt, images, isSuccess, j, len;
    window.clearTimeout(timeout);
    cancel = true;
    duration = Date.now() - start;
    isSuccess = function(el) {
      return !!el && el.getSrc() && errors.indexOf(el.getSrc()) === -1;
    };
    images = (function() {
      var j, len, results;
      results = [];
      for (j = 0, len = mediaEls.length; j < len; j++) {
        el = mediaEls[j];
        if (isSuccess(el) && el.getType() === "image") {
          results.push(el.getContent());
        }
      }
      return results;
    })();
    if (typeof callback === "function") {
      callback(errors, images);
    }
    Logger("loaded " + count + "/" + total + " media element(s) in " + duration + "ms");
    for (j = 0, len = mediaEls.length; j < len; j++) {
      elt = mediaEls[j];
      elt.remove();
    }
    return mediaEls = null;
  };
  fn = function(elements, i) {
    var loadNext, mediaEl, onError, onLoad;
    mediaEl = mediaEls[i];
    onLoad = function(elt, err) {
      if (!err) {
        count++;
      }
      if (count === all.length) {
        onComplete();
      }
      if (elements.length > 0 && !cancel) {
        return loadNext();
      }
    };
    onError = function(elt) {
      errors.push(elt.getSrc());
      Logger("✕ error loading " + (elt.getSrc()));
      return onLoad(elt, true);
    };
    loadNext = function() {
      return mediaEl.setSrc(elements.shift());
    };
    mediaEl.onload = function() {
      return onLoad(this);
    };
    mediaEl.onerror = function() {
      return onError(this);
    };
    return loadNext();
  };
  for (i in grouped) {
    elements = grouped[i];
    fn(elements, i);
  }
  return timeout = window.setTimeout((function() {
    return onComplete();
  }), maxTime);
};


/*
  Look through each stylesheet and collect any images that match the regEx,
  and sends the these to the load method when ready.
 */

preloadThomasAssets = function() {
  var images;
  images = ["img/templates/loader-light.gif", "img/templates/loader.gif", "img/templates/star-default.png", "img/templates/star-earned.png", "img/templates/star-light.png", "img/video/empty.png", "img/expand-browser.png", "img/rotate-device.png"];
  return this.load(images);
};

preloadLessonAssets = function(slides) {
  var captureAssets, j, len, lessonAssets, onLessonAssetsLoaded, recur, slide;
  recur = function(obj, method) {
    var result;
    if (obj && Array.isArray(obj)) {
      return obj.map(function(t) {
        return recur(t, method);
      });
    } else if (obj && typeof obj === "object") {
      result = {};
      Object.keys(obj).forEach(function(k) {
        return result[k] = recur(obj[k], method);
      });
      return result;
    } else {
      return method(obj);
    }
  };
  lessonAssets = [];
  captureAssets = function(s) {
    return recur(s, function(p) {
      if (isAsset(p, "audio") || isAsset(p, "image")) {
        return lessonAssets.push(p);
      }
    });
  };
  for (j = 0, len = slides.length; j < len; j++) {
    slide = slides[j];
    captureAssets(slide);
  }
  onLessonAssetsLoaded = function() {};
  return load(lessonAssets, onLessonAssetsLoaded, 4, 40000);
};

module.exports = {
  load: load,
  preloadThomasAssets: preloadThomasAssets,
  preloadLessonAssets: preloadLessonAssets
};
});

;require.register("lib/router.coffee", function(exports, require, module) {
var AppRouter, MainView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

MainView = require("views/main");

AppRouter = (function(superClass) {
  extend(AppRouter, superClass);

  function AppRouter() {
    return AppRouter.__super__.constructor.apply(this, arguments);
  }

  AppRouter.prototype.initialize = function() {
    return this.mainView = new MainView({
      el: "body"
    });
  };

  AppRouter.prototype.routes = {
    "slide(/:index)(?:query)": "slide",
    "*default": "default"
  };

  AppRouter.prototype["default"] = function() {
    return this.navigate("slide/1", true);
  };

  AppRouter.prototype.slide = function(index, query) {
    var i, key, len, param, params, ref, ref1, val;
    if (index == null) {
      index = 1;
    }
    if (query == null) {
      query = "";
    }
    params = {};
    ref = query.split("&");
    for (i = 0, len = ref.length; i < len; i++) {
      param = ref[i];
      if (!(param)) {
        continue;
      }
      ref1 = param.split("="), key = ref1[0], val = ref1[1];
      params[key] = (function() {
        try {
          return JSON.parse(val);
        } catch (error) {
          val = error;
        }
      })();
    }
    return this.mainView.display("slides", _.extend(params, {
      index: index
    }));
  };

  return AppRouter;

})(Backbone.Router);

module.exports = AppRouter;
});

;require.register("lib/scorm.coffee", function(exports, require, module) {
var extractInt, extractKey, processScormPlayerData;

extractKey = function(data, key, def) {
  if (data[key] != null) {
    return data[key].value;
  } else {
    return def;
  }
};

extractInt = function(data, key, def) {
  if (data[key] != null) {
    return parseInt(data[key].value, 10);
  } else {
    return def;
  }
};

processScormPlayerData = function(data) {
  var all, duration, incomplete, interactions, score, success;
  score = function() {
    var maxScore, minScore;
    score = 0;
    minScore = extractInt(data, "cmi.core.score.min", 0);
    maxScore = extractInt(data, "cmi.core.score.max", 100);
    score = extractInt(data, "cmi.core.score.raw", null);
    if (success()) {
      if (score == null) {
        score = 100;
      }
    }
    return score;
  };
  duration = function() {
    return extractKey(data, "cmi.core.session_time", null);
  };
  incomplete = function() {
    var ref;
    return ((ref = data["cmi.core.lesson_status"]) != null ? ref.value : void 0) === "incomplete";
  };
  success = function() {
    var ref, ref1;
    return (ref = (ref1 = data["cmi.core.lesson_status"]) != null ? ref1.value : void 0) === "passed" || ref === "completed";
  };
  interactions = function() {
    var ex, found, i, j, k, key, keys, l, len, len1, object_keys, value, values;
    interactions = [];
    try {
      found = true;
      i = 0;
      keys = Object.keys(data);
      key = "cmi.interactions.0.";
      object_keys = keys.filter(function(k) {
        return k.indexOf(key) === 0;
      });
      found = object_keys.length > 0;
      if (found) {
        for (j = 0, len = object_keys.length; j < len; j++) {
          k = object_keys[j];
          values = data[k].value;
          if (!_.isArray(values)) {
            values = [values];
          }
          for (i = l = 0, len1 = values.length; l < len1; i = ++l) {
            value = values[i];
            if (interactions[i] == null) {
              interactions[i] = {};
            }
            interactions[i][k.replace(key, "")] = decodeURIComponent(value);
          }
        }
      }
    } catch (error) {
      ex = error;
      console.error("Error while parsing SCORM interactions", ex);
    }
    return interactions;
  };
  all = function() {
    return _.extend(data, {
      interactions: interactions(),
      score: score(),
      duration: duration(),
      success: success(),
      incomplete: incomplete()
    });
  };
  return {
    all: all,
    interactions: interactions,
    success: success,
    duration: duration,
    score: score
  };
};

module.exports = {
  processScormPlayerData: processScormPlayerData
};
});

;require.register("lib/vimeo-api.coffee", function(exports, require, module) {
var tag;

tag = document.createElement("script");

tag.src = "https://player.vimeo.com/api/player.js";

document.head.appendChild(tag, "beforeEnd");
});

;require.register("lib/youtube-api.coffee", function(exports, require, module) {
var protocol, ref, tag;

window.onYouTubePlayerAPIReady = function() {
  return Backbone.trigger("youtubeplayerapiready");
};

tag = document.createElement("script");

protocol = window.location.protocol.replace("file", "http");

if ((typeof __ !== "undefined" && __ !== null ? (ref = __.slidedeck) != null ? ref.platform : void 0 : void 0) === "iOS") {
  protocol = window.location.protocol.replace("ionic", "http");
}

tag.src = protocol + "//www.youtube.com/player_api";

document.head.appendChild(tag, "beforeEnd");
});

;require.register("models/game/score.coffee", function(exports, require, module) {
var Easie, ScoreModel,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Easie = require("lib/easie");

ScoreModel = (function(superClass) {
  extend(ScoreModel, superClass);

  function ScoreModel() {
    return ScoreModel.__super__.constructor.apply(this, arguments);
  }

  ScoreModel.prototype.defaults = {
    turns: 0
  };

  ScoreModel.prototype.initialize = function() {
    this.on("reset", this.resetScore, this);
    this.on("tally", this.tallyScore, this);
    return this.on("change", this.getTotal, this);
  };

  ScoreModel.prototype.resetScore = function() {
    window.clearTimeout(this.timeout);
    return this.set({
      score: 0,
      total: 0,
      correct: 0,
      incorrect: 0,
      consecutive: 0,
      lastScore: 0
    });
  };

  ScoreModel.prototype.tallyScore = function(arg) {
    var callback, fps, frame, frames, initial, ms, record, ref, repeat, score, start, tallyFrom, total;
    callback = arg.callback, ms = arg.ms, tallyFrom = arg.tallyFrom;
    window.clearTimeout(this.timeout);
    ref = this.attributes, score = ref.score, record = ref.record, total = ref.total;
    if (score === total && total === record && (tallyFrom == null)) {
      return typeof callback === "function" ? callback() : void 0;
    } else {
      start = Date.now();
      fps = 1000 / 60;
      frame = 0;
      initial = tallyFrom || 0;
      if (ms == null) {
        ms = 3000;
      }
      ms = Math.min(ms, Math.abs(initial - score) || 1);
      frames = ms / fps;
      return (repeat = (function(_this) {
        return function() {
          var attrs, dist;
          dist = _.limit((frame / frames) || 0, 1);
          if (!((0 <= dist && dist <= 1))) {
            dist = 1;
          }
          attrs = {
            total: Math.round(Easie.quartInOut(dist, initial, score - initial, 1))
          };
          if (tallyFrom == null) {
            attrs.record = Math.max(attrs.total, record || 0);
          }
          _this.set(attrs);
          if (frame < frames) {
            _this.timeout = window.setTimeout(repeat, fps);
            return frame = Math.floor((Date.now() - start) / fps);
          } else {
            return typeof callback === "function" ? callback() : void 0;
          }
        };
      })(this))();
    }
  };

  ScoreModel.prototype.getTotal = function(e) {
    if (!(e.changed.total || (e.changed.score == null))) {
      return this.set({
        total: this.get("score")
      });
    }
  };

  ScoreModel.prototype.setBy = function(obj, amount) {
    var key, opts, prev, val;
    if (typeof obj === "string") {
      key = obj;
      obj = {};
      obj[key] = amount;
    } else {
      opts = amount;
    }
    for (key in obj) {
      val = obj[key];
      prev = this.get(key);
      this.set(key, Math.max(prev + val, 0), opts);
      if (key === "lastScore") {
        if (typeof console !== "undefined" && console !== null) {
          if (typeof console.log === "function") {
            console.log("`lastScore` cannot be set");
          }
        }
        return;
      }
      if (key === "score" && val > 0) {
        this.set({
          lastScore: 0
        }, {
          silent: true
        });
        this.set({
          lastScore: val
        });
      }
    }
  };

  ScoreModel.prototype.destroy = function() {
    window.clearTimeout(this.timeout);
    return ScoreModel.__super__.destroy.apply(this, arguments);
  };

  return ScoreModel;

})(Backbone.Model);

module.exports = ScoreModel;
});

;require.register("models/game/timer.coffee", function(exports, require, module) {
var TimerModel, cancelAF, requestAF,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

requestAF = window.requestAnimationFrame || window.webkitRequestAnimationFrame;

cancelAF = window.cancelAnimationFrame || window.webkitCancelAnimationFrame;

TimerModel = (function(superClass) {
  extend(TimerModel, superClass);

  function TimerModel() {
    return TimerModel.__super__.constructor.apply(this, arguments);
  }

  TimerModel.prototype.initialize = function(options) {
    this.options = options;
    if (!this.hasLimit()) {
      this.set("limit", -1);
    }
    this.set("passed", 0);
    this.set("isDisabled", this.options.isDisabled || !this.hasLimit());
    this.on("start", this.trackTimer, this);
    this.on("reset", this.resetTimer, this);
    this.on("count", this.countDown, this);
    this.on("change", this.getTotal, this);
    return this.on("stop", this.endTimer, this);
  };

  TimerModel.prototype.resetTimer = function() {
    return this.set({
      bonus: 0,
      total: this.get("limit"),
      remaining: this.get("limit"),
      paused: true
    });
  };

  TimerModel.prototype.trackTimer = function(arg) {
    var callback, repeat;
    callback = arg.callback;
    if (this.hasLimit()) {
      this.set({
        start: Date.now() - (this.get("total") - this.get("remaining")),
        paused: false
      });
      this.clearTimers();
      return (repeat = (function(_this) {
        return function() {
          var interval, limit, now, passed, ref, remaining, start, total;
          now = Date.now();
          ref = _this.attributes, start = ref.start, passed = ref.passed, limit = ref.limit, remaining = ref.remaining, total = ref.total, interval = ref.interval;
          if (_this.get("paused")) {
            _this.set({
              start: now - (limit - remaining)
            });
          } else {
            _this.set({
              remaining: Math.max(total - (now - start), 0),
              passed: now - start
            });
          }
          if (_this.get("remaining") > 0 || _this.get("isDisabled")) {
            return _this.rafWrap = requestAF(repeat);
          } else {
            return _this.timeout = window.setTimeout(callback, 300);
          }
        };
      })(this))();
    }
  };

  TimerModel.prototype.clearTimers = function() {
    if (typeof cancelAF === "function") {
      cancelAF(this.rafWrap);
    }
    return window.clearTimeout(this.timeout);
  };

  TimerModel.prototype.endTimer = function() {
    this.clearTimers();
    return this.set({
      paused: true
    });
  };

  TimerModel.prototype.countDown = function(arg) {
    var callback, count, ms, repeat, steps;
    callback = arg.callback, steps = arg.steps, ms = arg.ms;
    if (!this.hasLimit()) {
      return typeof callback === "function" ? callback() : void 0;
    } else {
      this.set({
        paused: true
      });
      count = steps || 3;
      this.clearTimers();
      return (repeat = (function(_this) {
        return function() {
          _this.set({
            count: count
          });
          if (count === 0) {
            return callback();
          } else {
            _this.timeout = window.setTimeout(repeat, ms || 1200);
            return count--;
          }
        };
      })(this))();
    }
  };

  TimerModel.prototype.getTotal = function(e) {
    if (!e.changed.total) {
      return this.set({
        total: this.get("limit") + (this.get("bonus") || 0)
      });
    }
  };

  TimerModel.prototype.hasLimit = function() {
    return this.get("limit") > 0;
  };

  TimerModel.prototype.setBy = function(obj, amount) {
    var key, prev, results, val;
    if (typeof obj === "string") {
      key = obj;
      obj = {};
      obj[key] = amount;
    }
    results = [];
    for (key in obj) {
      val = obj[key];
      prev = this.get(key);
      this.set(key, prev + val);
      if (key === "bonus" && val > 0) {
        this.set({
          lastBonus: 0
        }, {
          silent: true
        });
        results.push(this.set({
          lastBonus: val
        }));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  TimerModel.prototype.destroy = function() {
    this.clearTimers();
    return TimerModel.__super__.destroy.apply(this, arguments);
  };

  return TimerModel;

})(Backbone.Model);

module.exports = TimerModel;
});

;require.register("models/lesson-engine.coffee", function(exports, require, module) {
var DP, Engines, LessonEngine, dataProcessor, metadataProcessor, processData,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

DP = processData = require("lib/data-processer");

dataProcessor = processData.all;

metadataProcessor = processData.allMD;

Engines = {
  'question-pool': Friedrich.QuestionPool,
  'scorm': Friedrich.Scorm,
  'video': Friedrich.Video
};

LessonEngine = (function() {
  function LessonEngine(conf) {
    if (conf == null) {
      conf = {};
    }
    this.processSlides = bind(this.processSlides, this);
    this.configuration = conf;
    this.states = conf.userState || {};
    this.engines = this.createEngines();
    this._interactions = [];
  }

  LessonEngine.prototype.trackInteraction = function(i) {
    var Analytics;
    Analytics = Application.actions().Analytics;
    return Analytics.trackInteraction(i);
  };

  LessonEngine.prototype.createEngines = function() {
    var slides, slidesWithEngine;
    slides = this.configuration.slides;
    slidesWithEngine = slides.filter(function(s) {
      return Engines[s.type] != null;
    });
    return _.object(slidesWithEngine.map((function(_this) {
      return function(s) {
        return [s.id, new Engines[s.type](s.id, s.name, s.data, _this.states[s.id])];
      };
    })(this)));
  };

  LessonEngine.prototype.processSlides = function(data) {
    data.slides = _.flatten(data.slides.map((function(_this) {
      return function(s, i) {
        var ref, ref1, ref2, ref3, slides;
        if (s.id && (((ref = _this.engines) != null ? (ref1 = ref[s.id]) != null ? ref1.renderSlides : void 0 : void 0) != null)) {
          slides = (ref2 = _this.engines) != null ? (ref3 = ref2[s.id]) != null ? ref3.renderSlides() : void 0 : void 0;
          return slides = slides.map(function(s) {
            s.data = DP.one(s.data, s.type, data.config);
            s.metadata = DP.oneMD(s.metadata);
            s.strippedMetadata = DP.oneSMD(s.metadata);
            return s;
          });
        } else {
          return s;
        }
      };
    })(this)));
    data.slides = data.slides.map(function(s, i) {
      var ref;
      s.isLastSlide = i === data.slides.length - 1 || (((ref = data.slides[i + 1]) != null ? ref.type : void 0) === "exit" && data.config.isQuiz);
      return s;
    });
    return data;
  };

  LessonEngine.prototype.slides = function() {
    var dataPipe, fn, j, len, processedData;
    dataPipe = [dataProcessor, metadataProcessor, this.processSlides];
    processedData = _.extend({}, this.configuration);
    for (j = 0, len = dataPipe.length; j < len; j++) {
      fn = dataPipe[j];
      processedData = fn(processedData);
    }
    this._slides = processedData;
    return this._slides;
  };

  LessonEngine.prototype._recordInteractions = function(intes) {
    var i, j, len, results;
    if (intes == null) {
      intes = [];
    }
    results = [];
    for (j = 0, len = intes.length; j < len; j++) {
      i = intes[j];
      this._interactions.push(i);
      results.push(this.trackInteraction(i));
    }
    return results;
  };

  LessonEngine.prototype._publishState = function() {
    var state;
    state = this.getState();
    return this.trackInteraction({
      isLessonUserState: true,
      state: state
    });
  };

  LessonEngine.prototype.getState = function() {
    var engine, slideId;
    return _.object((function() {
      var ref, results;
      ref = this.engines;
      results = [];
      for (slideId in ref) {
        engine = ref[slideId];
        if (engine.state) {
          results.push([slideId, engine.state]);
        }
      }
      return results;
    }).call(this));
  };

  LessonEngine.prototype.processInteraction = function(interaction) {
    var engine, intes, md;
    this._recordInteractions([interaction]);
    md = interaction.metadata;
    if ((md != null) && (this.engines[md.friedrichId] != null)) {
      engine = this.engines[interaction.metadata.friedrichId];
      if (engine.processInteraction != null) {
        intes = engine.processInteraction(interaction) || [];
        this._recordInteractions(intes);
      }
      if (engine.reduceState != null) {
        engine.reduceState(interaction);
        return this._publishState();
      }
    }
  };

  return LessonEngine;

})();

module.exports = LessonEngine;
});

;require.register("models/lesson.coffee", function(exports, require, module) {
var Lesson, LessonEngine;

LessonEngine = require("models/lesson-engine");

Lesson = (function() {
  function Lesson(conf) {
    if (conf != null) {
      this.loadConfiguration(conf);
    }
  }

  Lesson.prototype.loadConfiguration = function(conf) {
    this.configuration = conf;
    return this.engine = new LessonEngine(this.configuration);
  };

  Lesson.prototype.loadFromConfigJsonFile = function(done) {
    var ajaxParams;
    ajaxParams = {
      type: "GET",
      url: "config.json",
      dataType: "json"
    };
    return this.request = $.ajax(_.extend(ajaxParams, {
      success: function(data) {
        return done(null, data);
      },
      error: function(err) {
        return done(err);
      }
    }));
  };

  Lesson.prototype.loadFromSession = function(done) {
    var Session;
    Session = Application.actions().Session;
    return Session.waitAndGet(function(err, data) {
      if (err != null) {
        return done(err);
      } else if (!(data != null ? data.config : void 0)) {
        return done(new Error("No slides configuration"));
      } else {
        return window.setTimeout((function() {
          return done(null, data.config);
        }), 100);
      }
    });
  };

  Lesson.prototype.loadData = function(done) {
    var ref;
    if ((ref = require('app')) != null ? ref.isPlayer : void 0) {
      return this.loadFromSession(done);
    } else {
      return this.loadFromConfigJsonFile(done);
    }
  };

  Lesson.prototype.load = function(done) {
    return this.loadData((function(_this) {
      return function(err, conf) {
        if (err != null) {
          if (err != null) {
            return done(err);
          }
        } else {
          _this.loadConfiguration(conf);
          return done(null, conf);
        }
      };
    })(this));
  };

  Lesson.prototype.getState = function() {
    return this.engine.getState();
  };

  Lesson.prototype.processInteraction = function(i) {
    return this.engine.processInteraction(i);
  };

  Lesson.prototype.getSlides = function() {
    return this.engine.slides();
  };

  return Lesson;

})();

module.exports = Lesson;
});

;require.register("models/scormAttempt.coffee", function(exports, require, module) {
var Base64, ScormAttempt, processScormPlayerData;

processScormPlayerData = require("lib/scorm").processScormPlayerData;

Base64 = require('js-base64').Base64;

ScormAttempt = (function() {
  function ScormAttempt(lessonId, lessonCompleted, userName, userId, previousAttempt) {
    this.lessonId = lessonId;
    this.lessonCompleted = lessonCompleted;
    this.userName = userName;
    this.previousAttempt = previousAttempt;
    this.userId = userId;
  }

  ScormAttempt.prototype.initialData = function() {
    if (this.previousAttempt) {
      return _.extend(this.previousAttempt, {
        "cmi.core.student_name": {
          value: this.userName,
          status: 0
        },
        "cmi.core.student_id": {
          value: this.userId,
          status: 0
        },
        "cmi.core.lesson_status": {
          value: this.lessonCompleted ? "completed" : "incomplete",
          status: 0
        }
      });
    } else {
      return {
        "ed": {
          "lessonId": this.lessonId
        },
        "cmi.core.lesson_status": {
          value: this.lessonCompleted ? "completed" : "not attempted",
          status: 0
        },
        "cmi.core.student_name": {
          value: this.userName,
          status: 0
        },
        "cmi.core.student_id": {
          value: this.userId,
          status: 0
        }
      };
    }
  };

  ScormAttempt.prototype.processScormPlayerData = function(data) {
    var parsedData;
    parsedData = JSON.parse(Base64.decode(data));
    return this.data = processScormPlayerData(parsedData).all();
  };

  ScormAttempt.prototype.attemptData = function() {
    return this.data;
  };

  return ScormAttempt;

})();

module.exports = ScormAttempt;
});

;require.register("templates/components/background.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (config) {
buf.push("<div id=\"slides-background-wrap\">");
if ( config.background)
{
buf.push("<div id=\"slides-background\"></div>");
}
buf.push("<div id=\"slides-lightbox-bg\"></div></div>");}.call(this,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/components/engine/disconnection-warning.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (i18n) {
buf.push("<div id=\"disconnection-warning\"><div class=\"content-fill block-lg\"><div id=\"disconnection-msg\" class=\"content block-h-xl block-v-lg text-center\"><div class=\"block-v-md\"><h2>To complete this lesson, Ed needs to be running in \nthe&nbsp;background.</h2><p class=\"text-md\">To continue, please open Ed and restart the lesson so that \nyour progress can be tracked&nbsp;correctly.</p></div><div class=\"block-v-md\"><a id=\"close-window\" href=\"https://web.edapp.com\" target=\"_self\" class=\"btn btn-solid btn-block\">" + (jade.escape((jade_interp = i18n("buttons.open-ed")) == null ? '' : jade_interp)) + "</a></div></div></div></div>");}.call(this,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/components/engine/lesson-header.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (config, slides, title) {
buf.push("<div id=\"lesson-header\" class=\"block-lg\"> <div id=\"lesson-header-nav\" class=\"text-center\"><div id=\"narration-loader\"></div><div id=\"lesson-header-nav-page-count\"><strong id=\"lesson-header-nav-page-number\" data-testid=\"lesson-header-page-num\">1</strong><span> / </span><!-- Since exit slide is removed, if type of last slide is exit, exclude from total slide count-->");
if ( slides.length>0 && slides[slides.length-1].type==="exit" && config.isQuiz)
{
buf.push("<strong>" + (jade.escape(null == (jade_interp = slides.length-1) ? "" : jade_interp)) + "</strong>");
}
else
{
buf.push("<strong>" + (jade.escape(null == (jade_interp = slides.length) ? "" : jade_interp)) + "</strong>");
}
buf.push("</div>");
if ( config.networkOnline)
{
buf.push("<div id=\"lesson-header-nav-social-learning\" class=\"has-count\"><span class=\"icon icon-chat text-lg\"></span></div>");
}
if ( !config.hideNavMenuBtn)
{
buf.push("<div id=\"lesson-header-nav-menu-btn\"><span class=\"icon icon-menu text-md\"></span></div>");
}
buf.push("</div><div id=\"lesson-header-title\">");
if ( config.logo)
{
buf.push("<img id=\"lesson-header-title-logo\"" + (jade.attr("src", config.logo, true, false)) + "/>");
}
buf.push("<div id=\"lesson-header-title-content\" class=\"text-ellipsis\"><strong>" + (jade.escape(null == (jade_interp = title) ? "" : jade_interp)) + "</strong></div></div></div>");}.call(this,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined,"slides" in locals_for_with?locals_for_with.slides:typeof slides!=="undefined"?slides:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/components/engine/lesson-menu.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (config, i18n, slides, title) {
buf.push("<div id=\"lesson-menu\"><div id=\"lesson-menu-content\" class=\"content-ver block-h-xl text-center\"><h1 class=\"tight delay-1\">" + (jade.escape(null == (jade_interp = title) ? "" : jade_interp)) + "</h1><h3 id=\"lesson-menu-page-count\"" + (jade.attr("data-total", slides.length, true, false)) + " class=\"block-v-md delay-2\">&nbsp;</h3><hr/><div class=\"block-v-lg clearfix\"><div id=\"lesson-menu-cancel\" class=\"btn btn-block btn-sm btn-primary\">" + (jade.escape(null == (jade_interp = i18n("menu.resume")) ? "" : jade_interp)) + "</div>");
if ( config.contextAllowsFreeNavigation || config.contextRequiresExitButton)
{
if ( config.contextAllowsFreeNavigation)
{
buf.push("<div id=\"lesson-menu-go-back\" class=\"btn btn-block btn-muted\">" + (jade.escape(null == (jade_interp = i18n("menu.go-back")) ? "" : jade_interp)) + "</div><div id=\"lesson-menu-restart\" class=\"btn btn-block btn-muted\">" + (jade.escape(null == (jade_interp = i18n("menu.restart")) ? "" : jade_interp)) + "</div>");
}
if ( config.contextRequiresExitButton && !config.isQuiz)
{
buf.push("<div id=\"lesson-menu-exit\" class=\"btn btn-block btn-muted\">" + (jade.escape(null == (jade_interp = i18n("menu.exit")) ? "" : jade_interp)) + "</div>");
}
else if ( config.contextRequiresExitButton && config.isQuiz)
{
buf.push("<div id=\"lesson-menu-exit\" class=\"btn btn-block btn-outlined\">" + (jade.escape(null == (jade_interp = i18n("menu.exit-quiz")) ? "" : jade_interp)) + "</div>");
}
}
else
{
buf.push("<div id=\"lesson-menu-cancel\" class=\"btn btn-block btn-muted\">" + (jade.escape(null == (jade_interp = i18n("buttons.continue")) ? "" : jade_interp)) + "</div>");
}
buf.push("</div></div></div>");}.call(this,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"slides" in locals_for_with?locals_for_with.slides:typeof slides!=="undefined"?slides:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/components/engine/media-collection-content.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (config, playinline) {
jade_mixins["video-stream"] = jade_interp = function(videoUrl, playsinline, controls, klass, poster){
var block = (this && this.block), attributes = (this && this.attributes) || {};
playinline = playinline || true
controls = controls || true
klass = klass || 'video vjs-fluid'
var cloudinaryVideoFolderUrl = config.CLOUDINARY_CDN_URL+config.CLOUDINARY_VIDEO_FOLDER
var streamUrl = ''
if ( videoUrl && videoUrl.indexOf(cloudinaryVideoFolderUrl) > -1)
{
streamUrl = videoUrl.replace(cloudinaryVideoFolderUrl, cloudinaryVideoFolderUrl+'sp_full_hd/')
streamUrl = streamUrl.replace('.mp4', '.m3u8')
}
buf.push("<video" + (jade.attr("webkit-playsinline", playsinline, true, false)) + (jade.attr("controls", controls, true, false)) + " preload=\"auto\"" + (jade.attr("dir", config.direction, true, false)) + (jade.attr("poster", poster, true, false)) + (jade.cls(['video-js',klass], [null,true])) + "><source" + (jade.attr("src", videoUrl, true, false)) + "/>");
if ( streamUrl)
{
buf.push("<source" + (jade.attr("src", streamUrl, true, false)) + "/>");
}
buf.push("</video>");
};





























}.call(this,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined,"playinline" in locals_for_with?locals_for_with.playinline:typeof playinline!=="undefined"?playinline:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/components/engine/multi-content.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (config, playinline) {
jade_mixins["video-stream"] = jade_interp = function(videoUrl, playsinline, controls, klass, poster){
var block = (this && this.block), attributes = (this && this.attributes) || {};
playinline = playinline || true
controls = controls || true
klass = klass || 'video vjs-fluid'
var cloudinaryVideoFolderUrl = config.CLOUDINARY_CDN_URL+config.CLOUDINARY_VIDEO_FOLDER
var streamUrl = ''
if ( videoUrl && videoUrl.indexOf(cloudinaryVideoFolderUrl) > -1)
{
streamUrl = videoUrl.replace(cloudinaryVideoFolderUrl, cloudinaryVideoFolderUrl+'sp_full_hd/')
streamUrl = streamUrl.replace('.mp4', '.m3u8')
}
buf.push("<video" + (jade.attr("webkit-playsinline", playsinline, true, false)) + (jade.attr("controls", controls, true, false)) + " preload=\"auto\"" + (jade.attr("dir", config.direction, true, false)) + (jade.attr("poster", poster, true, false)) + (jade.cls(['video-js',klass], [null,true])) + "><source" + (jade.attr("src", videoUrl, true, false)) + "/>");
if ( streamUrl)
{
buf.push("<source" + (jade.attr("src", streamUrl, true, false)) + "/>");
}
buf.push("</video>");
};
jade_mixins["image"] = jade_interp = function(imageUrl, klass){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<img" + (jade.attr("src", imageUrl, true, false)) + (jade.cls([klass], [true])) + "/>");
};






























}.call(this,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined,"playinline" in locals_for_with?locals_for_with.playinline:typeof playinline!=="undefined"?playinline:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/components/engine/photoswipe.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;

buf.push("<div id=\"photoswipe\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\" class=\"pswp\"><div class=\"pswp__bg\"></div><div class=\"pswp__scroll-wrap\"><div class=\"pswp__container\"><div class=\"pswp__item\"></div><div class=\"pswp__item\"></div><div class=\"pswp__item\"></div></div><div class=\"pswp__ui pswp__ui--hidden\"><div class=\"pswp__top-bar\"><div class=\"pswp__hint\"></div><div class=\"pswp__counter\"></div><button title=\"Close (Esc)\" class=\"pswp__button pswp__button--close\"></button><button title=\"Zoom in/out\" class=\"pswp__button pswp__button--zoom\"></button><button title=\"Full Screen\" class=\"pswp__button pswp__button--fs\"></button><div class=\"pswp__preloader\"><div class=\"pswp__preloader__icn\"></div></div></div><button title=\"Previous (←)\" class=\"pswp__button pswp__button--arrow--left\"></button><button title=\"Next (→)\" class=\"pswp__button pswp__button--arrow--right\"></button><div class=\"pswp__caption\"><div class=\"pswp__caption__center\"></div></div></div></div></div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/components/engine/play-audio-popup.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (i18n) {
buf.push("<div id=\"play-audio-popup\" class=\"block-xl\"><div class=\"content-fill\"><div class=\"content-ver text-center\"><div class=\"block-v-xl block-h-lg\"><h1>" + (jade.escape((jade_interp = i18n("audio-popup.title")) == null ? '' : jade_interp)) + "</h1><p class=\"text-md\">" + (jade.escape((jade_interp = i18n("audio-popup.description")) == null ? '' : jade_interp)) + "</p></div><div class=\"btn btn-solid btn-block btn-yes text-xl\">" + (jade.escape((jade_interp = i18n("audio-popup.allow")) == null ? '' : jade_interp)) + "</div></div><div class=\"btn btn-block btn-no btn-sm\">" + (jade.escape((jade_interp = i18n("audio-popup.cancel")) == null ? '' : jade_interp)) + "</div></div></div>");}.call(this,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/components/engine/quote-bottom-angle.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;

buf.push("<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0\" y=\"0\" viewbox=\"0 0 40 20\" xml:space=\"preserve\" class=\"quote-angle\"><path d=\"M0,-1V0c6.6,0,11.1,6.2,9.9,13.6c-0.2,1.6,0.8,2.4,1.6,2.4c1,0,1.6-0.6,2.3-1.6C19.9,5.2,30,0,40,0V-1H0z\" class=\"quote-angle-side quote-angle-below-left\"></path><path d=\"M40,-1V0c-6.6,0-11.1,6.2-9.9,13.6c0.2,1.6-0.8,2.4-1.6,2.4c-1,0-1.6-0.6-2.3-1.6C20.1,5.2,10,0,0,0V-1L40,-1z\" class=\"quote-angle-side quote-angle-below-right\"></path></svg>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/components/engine/slide-answer.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (answer, i18n, isCorrect, isTooSlow, showLeftCol, timerPrompt) {
showLeftCol = answer.takeaway && ((isCorrect && answer.correct) || (!isCorrect && answer.incorrect) || answer.text)
buf.push("<div id=\"block-container\" class=\"block-h-md\"><div id=\"slide-answer-container\"" + (jade.cls(['row',showLeftCol ? "" : "split-column"], [null,true])) + "><div id=\"slide-answer-details\"" + (jade.cls(['col-sm-12','block-v-sm',showLeftCol ? "col-md-6" : "text-center"], [null,null,true])) + "><div class=\"content-scroll block-v-lg\"><p class=\"text-md\"><strong id=\"slide-answer-details-response\">");
if ( isTooSlow)
{
buf.push(null == (jade_interp = timerPrompt) ? "" : jade_interp);
}
else
{
buf.push(null == (jade_interp = isCorrect ? answer.correct : answer.incorrect) ? "" : jade_interp);
}
buf.push("</strong></p>");
if ( answer.text)
{
buf.push("<div id=\"slide-answer-details-text\" class=\"text-break text-md\">" + (null == (jade_interp = answer.text) ? "" : jade_interp) + "</div>");
}
buf.push("</div></div><div" + (jade.cls(['col-sm-12','block-v-lg',showLeftCol ? "col-md-6" : "text-center"], [null,null,true])) + ">");
if ( answer.takeaway)
{
buf.push("<div id=\"slide-answer-takeaway\"><h2 class=\"text-center text-break\">" + (null == (jade_interp = answer.takeaway) ? "" : jade_interp) + "</h2></div>");
}
buf.push("<div id=\"slide-answer-continue-container\"><div id=\"slide-answer-continue\" class=\"btn btn-block btn-solid\"> \n" + (jade.escape((jade_interp = i18n("buttons.continue")) == null ? '' : jade_interp)) + "</div></div></div></div></div>");}.call(this,"answer" in locals_for_with?locals_for_with.answer:typeof answer!=="undefined"?answer:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"isCorrect" in locals_for_with?locals_for_with.isCorrect:typeof isCorrect!=="undefined"?isCorrect:undefined,"isTooSlow" in locals_for_with?locals_for_with.isTooSlow:typeof isTooSlow!=="undefined"?isTooSlow:undefined,"showLeftCol" in locals_for_with?locals_for_with.showLeftCol:typeof showLeftCol!=="undefined"?showLeftCol:undefined,"timerPrompt" in locals_for_with?locals_for_with.timerPrompt:typeof timerPrompt!=="undefined"?timerPrompt:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/components/engine/slide-footer.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (continueBtnText, doneText, hasNarration, hasPrompt, i18n, prompt, submitUp) {
buf.push("<div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + ">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/components/engine/slide-timer.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (game) {
if ( game && game.timer && game.timer.limit > 0 && !game.timer.isDisabled)
{
buf.push("<div class=\"full-screen\"><div class=\"game-stepper text-lg text-bold\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div></div>");
}}.call(this,"game" in locals_for_with?locals_for_with.game:typeof game!=="undefined"?game:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/components/engine/slides.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (slides, undefined) {
buf.push("<div id=\"lesson-slides\" class=\"block-h-lg content-fill\"><div id=\"slides\" class=\"content-fill\"><div id=\"slides-scroller\" class=\"content-fill\">");
// iterate slides
;(function(){
  var $$obj = slides;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var slide = $$obj[$index];

buf.push("<div" + (jade.cls(['slide','text-break',"slide-" + (slide.type) + ""], [null,null,true])) + "></div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var slide = $$obj[$index];

buf.push("<div" + (jade.cls(['slide','text-break',"slide-" + (slide.type) + ""], [null,null,true])) + "></div>");
    }

  }
}).call(this);

buf.push("</div></div></div>");}.call(this,"slides" in locals_for_with?locals_for_with.slides:typeof slides!=="undefined"?slides:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/components/engine/social-learning-comments.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (Date, comments, i18n, isEmoji, isNoMoreComments, moment, peerAuthoring, undefined) {
if ( comments.length === 0)
{
buf.push("<p id=\"social-view-no-comments\" class=\"block-h-lg text-lg text-center\">" + (jade.escape(null == (jade_interp = i18n("social.be-first")) ? "" : jade_interp)) + "</p>");
}
else
{
var d1, d2, distance = 1000 * 60 * 5;
buf.push("<ul class=\"clearfix\">");
// iterate comments 
;(function(){
  var $$obj = comments ;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var comment = $$obj[i];

d2 = new Date(comment.timestamp)
if ( !d1 || moment(d1).diff(d2) > distance)
{
d1 = d2;
buf.push("<li class=\"time text-center text-sm\"><strong>" + (jade.escape(null == (jade_interp = moment(comment.timestamp).format("ddd, DD MMM")) ? "" : jade_interp)) + "</strong>" + (jade.escape(null == (jade_interp = moment(comment.timestamp).format(" h:mm")) ? "" : jade_interp)) + "</li>");
}
buf.push("<li" + (jade.attr("style", i < 5 ? "transition-delay: " + ((i + 1) * 100) + "ms" : "", true, false)) + (jade.cls(['comment',[
          comment.isFromCurrentLearner ? "pull-right is-learner" : "pull-left",
          comment.likes > 0 ? "has-likes" : "no-likes",
          comment.isLikedByLearner ? "is-learner-liked" : "",
          comment.isFlaggedByLearner ? "is-learner-flagged" : ""
        ]], [null,true])) + "><div class=\"comment-label clearfix\">");
if ( !comment.isFromCurrentLearner)
{
buf.push("<span class=\"comment-author\">" + (jade.escape(null == (jade_interp = comment.author) ? "" : jade_interp)) + "</span>&ensp;");
}
if ( !peerAuthoring)
{
buf.push("<span" + (jade.attr("data-id", comment.id, true, false)) + " class=\"comment-action comment-like\"><span class=\"icon icon-heart\"></span>&nbsp;" + (jade.escape((jade_interp = comment.likes || 0) == null ? '' : jade_interp)) + "</span>");
}
buf.push("</div>");
if ( !peerAuthoring)
{
buf.push("<div class=\"comment-toggle-action clearfix\">");
if ( comment.isFromCurrentLearner)
{
buf.push("<span" + (jade.attr("data-id", comment.id, true, false)) + " class=\"comment-action comment-delete\">" + (jade.escape(null == (jade_interp = i18n("social.delete")) ? "" : jade_interp)) + "</span><span class=\"comment-action comment-cancel icon icon-close\"></span>");
}
else
{
buf.push("<span" + (jade.attr("data-id", comment.id, true, false)) + " class=\"comment-action comment-flag\"><span class=\"icon icon-flag\"></span>&nbsp;");
if ( comment.isFlaggedByLearner)
{
buf.push(jade.escape(null == (jade_interp = i18n("social.reported")) ? "" : jade_interp));
}
else
{
buf.push(jade.escape(null == (jade_interp = i18n("social.report")) ? "" : jade_interp));
}
buf.push("</span><span class=\"comment-action comment-cancel icon icon-close\"></span>");
}
buf.push("</div>");
}
buf.push("<p class=\"block-md comment-message text-md\">");
if ( isEmoji(comment.message))
{
buf.push("<span class=\"emoji\">" + (jade.escape(null == (jade_interp = comment.message) ? "" : jade_interp)) + "</span>");
}
else
{
buf.push(jade.escape(null == (jade_interp = comment.message) ? "" : jade_interp));
}
buf.push("</p></li>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var comment = $$obj[i];

d2 = new Date(comment.timestamp)
if ( !d1 || moment(d1).diff(d2) > distance)
{
d1 = d2;
buf.push("<li class=\"time text-center text-sm\"><strong>" + (jade.escape(null == (jade_interp = moment(comment.timestamp).format("ddd, DD MMM")) ? "" : jade_interp)) + "</strong>" + (jade.escape(null == (jade_interp = moment(comment.timestamp).format(" h:mm")) ? "" : jade_interp)) + "</li>");
}
buf.push("<li" + (jade.attr("style", i < 5 ? "transition-delay: " + ((i + 1) * 100) + "ms" : "", true, false)) + (jade.cls(['comment',[
          comment.isFromCurrentLearner ? "pull-right is-learner" : "pull-left",
          comment.likes > 0 ? "has-likes" : "no-likes",
          comment.isLikedByLearner ? "is-learner-liked" : "",
          comment.isFlaggedByLearner ? "is-learner-flagged" : ""
        ]], [null,true])) + "><div class=\"comment-label clearfix\">");
if ( !comment.isFromCurrentLearner)
{
buf.push("<span class=\"comment-author\">" + (jade.escape(null == (jade_interp = comment.author) ? "" : jade_interp)) + "</span>&ensp;");
}
if ( !peerAuthoring)
{
buf.push("<span" + (jade.attr("data-id", comment.id, true, false)) + " class=\"comment-action comment-like\"><span class=\"icon icon-heart\"></span>&nbsp;" + (jade.escape((jade_interp = comment.likes || 0) == null ? '' : jade_interp)) + "</span>");
}
buf.push("</div>");
if ( !peerAuthoring)
{
buf.push("<div class=\"comment-toggle-action clearfix\">");
if ( comment.isFromCurrentLearner)
{
buf.push("<span" + (jade.attr("data-id", comment.id, true, false)) + " class=\"comment-action comment-delete\">" + (jade.escape(null == (jade_interp = i18n("social.delete")) ? "" : jade_interp)) + "</span><span class=\"comment-action comment-cancel icon icon-close\"></span>");
}
else
{
buf.push("<span" + (jade.attr("data-id", comment.id, true, false)) + " class=\"comment-action comment-flag\"><span class=\"icon icon-flag\"></span>&nbsp;");
if ( comment.isFlaggedByLearner)
{
buf.push(jade.escape(null == (jade_interp = i18n("social.reported")) ? "" : jade_interp));
}
else
{
buf.push(jade.escape(null == (jade_interp = i18n("social.report")) ? "" : jade_interp));
}
buf.push("</span><span class=\"comment-action comment-cancel icon icon-close\"></span>");
}
buf.push("</div>");
}
buf.push("<p class=\"block-md comment-message text-md\">");
if ( isEmoji(comment.message))
{
buf.push("<span class=\"emoji\">" + (jade.escape(null == (jade_interp = comment.message) ? "" : jade_interp)) + "</span>");
}
else
{
buf.push(jade.escape(null == (jade_interp = comment.message) ? "" : jade_interp));
}
buf.push("</p></li>");
    }

  }
}).call(this);

buf.push("</ul>");
if ( !peerAuthoring)
{
if ( isNoMoreComments)
{
buf.push("<p class=\"text-muted text-center block-v-md\">" + (jade.escape(null == (jade_interp = i18n("social.thats-all")) ? "" : jade_interp)) + "</p>");
}
else
{
buf.push("<img src=\"img/templates/loader-light.gif\" width=\"32\" class=\"loader\"/>");
}
}
}}.call(this,"Date" in locals_for_with?locals_for_with.Date:typeof Date!=="undefined"?Date:undefined,"comments" in locals_for_with?locals_for_with.comments:typeof comments!=="undefined"?comments:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"isEmoji" in locals_for_with?locals_for_with.isEmoji:typeof isEmoji!=="undefined"?isEmoji:undefined,"isNoMoreComments" in locals_for_with?locals_for_with.isNoMoreComments:typeof isNoMoreComments!=="undefined"?isNoMoreComments:undefined,"moment" in locals_for_with?locals_for_with.moment:typeof moment!=="undefined"?moment:undefined,"peerAuthoring" in locals_for_with?locals_for_with.peerAuthoring:typeof peerAuthoring!=="undefined"?peerAuthoring:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/components/engine/social-learning.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (i18n) {
buf.push("<div id=\"social-view\"><div id=\"social-view-input-cancel\" class=\"icon icon-close\"></div><div id=\"social-view-input\"><div class=\"content-fill\"><textarea id=\"social-view-input-text\" class=\"text-md block-lg\"></textarea></div><div id=\"social-view-input-toolbar\" class=\"block-v-md block-h-lg\"><div id=\"social-view-input-status\" class=\"pull-right\"><strong id=\"social-view-input-slide-count\"></strong><strong id=\"social-view-input-limit\"></strong><button id=\"social-view-input-confirm\" class=\"btn btn-solid btn-sm pull-right\">" + (null == (jade_interp = i18n("buttons.send")) ? "" : jade_interp) + "</button></div><label class=\"text-bold\"><div id=\"social-view-input-title\" class=\"text-ellipsis\"></div></label></div></div><div id=\"social-view-messages\"><div id=\"social-view-messages-list\" class=\"block-lg\"></div><div id=\"social-view-input-start\" class=\"block-lg\"><div id=\"social-view-start\" class=\"btn btn-solid btn-block\">" + (null == (jade_interp = i18n("social.have-your-say")) ? "" : jade_interp) + "</div></div></div></div>");}.call(this,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/components/engine/stars-available.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (Array, Math, available, i18n, undefined) {
var displayTotal = Math.min(available, 9);
// iterate new Array(displayTotal)
;(function(){
  var $$obj = new Array(displayTotal);
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var star = $$obj[i];

var dist  = Math.abs(Math.floor(displayTotal / 2) - i)
var klass = "star-delay-" + dist;
if (i < available) klass += " active";
if (available > 4) klass += " bunched";
buf.push("<div" + (jade.cls(['star',klass], [null,true])) + "></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var star = $$obj[i];

var dist  = Math.abs(Math.floor(displayTotal / 2) - i)
var klass = "star-delay-" + dist;
if (i < available) klass += " active";
if (available > 4) klass += " bunched";
buf.push("<div" + (jade.cls(['star',klass], [null,true])) + "></div>");
    }

  }
}).call(this);

buf.push("<h4 class=\"text-bold text-pre\">" + (jade.escape((jade_interp = i18n("stars.available", { smart_count: available })) == null ? '' : jade_interp)) + "</h4>");}.call(this,"Array" in locals_for_with?locals_for_with.Array:typeof Array!=="undefined"?Array:undefined,"Math" in locals_for_with?locals_for_with.Math:typeof Math!=="undefined"?Math:undefined,"available" in locals_for_with?locals_for_with.available:typeof available!=="undefined"?available:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/components/engine/stars-earned.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (Math, i18n, stars, undefined) {
var parentKlass, max = 9;
if (stars.length < 2)      parentKlass = "text-xl";
else if (stars.length < 6) parentKlass = "text-lg";
else if (stars.length < 8) parentKlass = "text-md";
else { parentKlass = "text-sm"; };
buf.push("<div" + (jade.cls(['text-nowrap',parentKlass], [null,true])) + ">");
// iterate stars.slice(0, max)
;(function(){
  var $$obj = stars.slice(0, max);
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var star = $$obj[i];

if (!star) star = {};
var klass = "delay-" + Math.min(i, 10);
if (star.complete) klass += " active";
if (stars.length > 6) klass += " bunched";
buf.push("<div" + (jade.cls(['star',klass], [null,true])) + "></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var star = $$obj[i];

if (!star) star = {};
var klass = "delay-" + Math.min(i, 10);
if (star.complete) klass += " active";
if (stars.length > 6) klass += " bunched";
buf.push("<div" + (jade.cls(['star',klass], [null,true])) + "></div>");
    }

  }
}).call(this);

buf.push("</div><h4 class=\"text-bold text-nowrap\"> ");
var earned = _.where(stars, { complete: true }).length
buf.push("" + (jade.escape((jade_interp = i18n("stars.earned", { earned: earned, smart_count: stars.length })) == null ? '' : jade_interp)) + "</h4>");}.call(this,"Math" in locals_for_with?locals_for_with.Math:typeof Math!=="undefined"?Math:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"stars" in locals_for_with?locals_for_with.stars:typeof stars!=="undefined"?stars:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/components/engine/text-input.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (i18n) {
buf.push("<div id=\"text-input-view\"><div id=\"text-input-container\"><div id=\"text-input-container-top\" class=\"text-input-container block-lg\"><label id=\"text-input-prompt\"></label><label id=\"text-input-count\"><span id=\"text-input-count-current\"></span>&nbsp;/&nbsp;<span id=\"text-input-count-total\"></span></label><div id=\"text-input-dismiss-btn\" class=\"btn btn-solid\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div><div id=\"text-input-scroll\"><textarea id=\"text-input-area\" class=\"block-lg\"></textarea></div></div></div>");}.call(this,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/components/engine/video-slide-footer.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (continueBtnText, doneText, hasNarration, i18n, skipButton, submitUp) {
buf.push("<div" + (jade.cls(['slide-footer','block-v-lg',submitUp ? "slide-footer--up slide-down" : "slide-up"], [null,null,true])) + "><div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done text-ellipsis\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div>");
if ( skipButton)
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done text-ellipsis content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"skipButton" in locals_for_with?locals_for_with.skipButton:typeof skipButton!=="undefined"?skipButton:undefined,"submitUp" in locals_for_with?locals_for_with.submitUp:typeof submitUp!=="undefined"?submitUp:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/components/game/intro.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (description, i18n, title) {
buf.push("<div class=\"content-intro content-fill content-fit\"><div class=\"block-v-lg text-center content\"><div class=\"row\"><div class=\"col-sm-12 col-md-8 col-md-offset-2\"><h1 class=\"tight\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"text-lg block-v-lg\">" + (null == (jade_interp = description) ? "" : jade_interp) + "</div><div class=\"btn btn-solid play-game\">" + (jade.escape(null == (jade_interp = i18n("game.play-game")) ? "" : jade_interp)) + "</div></div></div></div></div>");}.call(this,"description" in locals_for_with?locals_for_with.description:typeof description!=="undefined"?description:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/components/game/outro.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (doneText, hasStars, i18n, title) {
buf.push("<div class=\"content-outro\"><div class=\"content-fill\"><div class=\"block-v-lg text-center content\"><h1>" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"row\"><div class=\"col-sm-12 col-md-8 col-md-offset-2\"><div class=\"row\"><div" + (jade.cls(['col-sm-6','col-md-4','block-v-md',hasStars ? "" : "col-md-offset-2"], [null,null,null,true])) + "><div class=\"block-md block-dk\"><h4 class=\"white-dot-text bold-italic\">" + (jade.escape(null == (jade_interp = i18n("game.your-score")) ? "" : jade_interp)) + "</h4><h1 class=\"game-total tight\">?</h1></div></div><div class=\"col-sm-6 col-md-4 block-v-md\"><div class=\"block-md block-dk\"><h4 class=\"grey-dot-text bold-italic\">" + (jade.escape(null == (jade_interp = i18n("game.your-best")) ? "" : jade_interp)) + "</h4><h1 class=\"game-record tight\">?</h1></div></div>");
if ( hasStars)
{
buf.push("<div class=\"col-sm-12 col-md-4 block-v-md\"><div class=\"block-md block-dk\"><h4 class=\"grey-dot-text bold-italic\">" + (jade.escape(null == (jade_interp = i18n("game.your-stars")) ? "" : jade_interp)) + "</h4><h1 class=\"game-stars tight\">?<sup class=\"stars-total\"></sup></h1></div></div>");
}
buf.push("</div><div class=\"row block-v-md\"><div class=\"col-sm-12 col-md-8 col-md-offset-2 block-md\"><div class=\"btn btn-solid btn-block play-game\">" + (jade.escape(null == (jade_interp = i18n("game.play-again")) ? "" : jade_interp)) + "</div></div></div></div></div></div></div><div class=\"slide-footer block-v-lg\"><div class=\"btn btn-muted goto-next fade-in\">" + (null == (jade_interp = doneText) ? "" : jade_interp) + "</div></div></div>");}.call(this,"doneText" in locals_for_with?locals_for_with.doneText:typeof doneText!=="undefined"?doneText:undefined,"hasStars" in locals_for_with?locals_for_with.hasStars:typeof hasStars!=="undefined"?hasStars:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/components/game/state.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (hasTimeLimit, i18n) {
buf.push("<div class=\"game-state block-h-lg\"><div class=\"game-state-inner row block-v-lg\"><div class=\"game-state-text col-md-6 col-sm-6\">");
if ( hasTimeLimit)
{
buf.push("" + (jade.escape((jade_interp = i18n("game.labels.timer")) == null ? '' : jade_interp)) + "\n&ensp;<strong class=\"game-timer text-lg text-bold\"></strong>");
}
buf.push("</div><div class=\"game-state-text col-md-6 col-sm-6 text-right\">" + (jade.escape((jade_interp = i18n("game.labels.score")) == null ? '' : jade_interp)) + "\n&ensp;<strong class=\"game-score text-lg text-bold\"></strong><strong class=\"game-tally\"></strong></div></div></div>");
if ( hasTimeLimit)
{
buf.push("<div class=\"game-stepper\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div>");
}
if ( hasTimeLimit)
{
buf.push("<div class=\"game-bonus-time\"></div>");
}}.call(this,"hasTimeLimit" in locals_for_with?locals_for_with.hasTimeLimit:typeof hasTimeLimit!=="undefined"?hasTimeLimit:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/components/indicator.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (config, slides) {
buf.push("<div id=\"indicator\"><div id=\"inner\"" + (jade.attr("style", (
    "left: " + (100 / slides.length) + "%;" +
    (config.direction == "rtl" ? "margin-left: -" + (100 / slides.length) + "%;" : "")
  ), true, false)) + "></div></div>");}.call(this,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined,"slides" in locals_for_with?locals_for_with.slides:typeof slides!=="undefined"?slides:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/components/menu.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;

buf.push("<div id=\"menu-view\"></div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/components/pagination.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (slides, undefined) {
buf.push("<div id=\"pagination\">");
// iterate slides
;(function(){
  var $$obj = slides;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var slide = $$obj[i];

buf.push("<a" + (jade.attr("href", "#slide/" + (i+1) + "", true, false)) + " class=\"page\"></a>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var slide = $$obj[i];

buf.push("<a" + (jade.attr("href", "#slide/" + (i+1) + "", true, false)) + " class=\"page\"></a>");
    }

  }
}).call(this);

buf.push("</div>");}.call(this,"slides" in locals_for_with?locals_for_with.slides:typeof slides!=="undefined"?slides:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/main.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;

buf.push("<div id=\"content\"><div id=\"inbound\"></div><div id=\"outbound\"></div></div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/mixins/image.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;




;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/mixins/video-stream.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;



















;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/slides.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (config, i18n, slides, title, undefined) {
buf.push("<div id=\"slides-view-inner\" class=\"content-fill\">");
if ( config.enableCustomCSS)
{
buf.push("<style id=\"custom-css\">" + (jade.escape(null == (jade_interp = config.customCSS) ? "" : jade_interp)) + "</style>");
}
buf.push("<div id=\"indicator\"><div id=\"inner\"" + (jade.attr("style", (
    "left: " + (100 / slides.length) + "%;" +
    (config.direction == "rtl" ? "margin-left: -" + (100 / slides.length) + "%;" : "")
  ), true, false)) + "></div></div><div id=\"slides-background-wrap\">");
if ( config.background)
{
buf.push("<div id=\"slides-background\"></div>");
}
buf.push("<div id=\"slides-lightbox-bg\"></div></div><div id=\"lesson-header\" class=\"block-lg\"> <div id=\"lesson-header-nav\" class=\"text-center\"><div id=\"narration-loader\"></div><div id=\"lesson-header-nav-page-count\"><strong id=\"lesson-header-nav-page-number\" data-testid=\"lesson-header-page-num\">1</strong><span> / </span><!-- Since exit slide is removed, if type of last slide is exit, exclude from total slide count-->");
if ( slides.length>0 && slides[slides.length-1].type==="exit" && config.isQuiz)
{
buf.push("<strong>" + (jade.escape(null == (jade_interp = slides.length-1) ? "" : jade_interp)) + "</strong>");
}
else
{
buf.push("<strong>" + (jade.escape(null == (jade_interp = slides.length) ? "" : jade_interp)) + "</strong>");
}
buf.push("</div>");
if ( config.networkOnline)
{
buf.push("<div id=\"lesson-header-nav-social-learning\" class=\"has-count\"><span class=\"icon icon-chat text-lg\"></span></div>");
}
if ( !config.hideNavMenuBtn)
{
buf.push("<div id=\"lesson-header-nav-menu-btn\"><span class=\"icon icon-menu text-md\"></span></div>");
}
buf.push("</div><div id=\"lesson-header-title\">");
if ( config.logo)
{
buf.push("<img id=\"lesson-header-title-logo\"" + (jade.attr("src", config.logo, true, false)) + "/>");
}
buf.push("<div id=\"lesson-header-title-content\" class=\"text-ellipsis\"><strong>" + (jade.escape(null == (jade_interp = title) ? "" : jade_interp)) + "</strong></div></div></div><div id=\"lesson-slides\" class=\"block-h-lg content-fill\"><div id=\"slides\" class=\"content-fill\"><div id=\"slides-scroller\" class=\"content-fill\">");
// iterate slides
;(function(){
  var $$obj = slides;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var slide = $$obj[$index];

buf.push("<div" + (jade.cls(['slide','text-break',"slide-" + (slide.type) + ""], [null,null,true])) + "></div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var slide = $$obj[$index];

buf.push("<div" + (jade.cls(['slide','text-break',"slide-" + (slide.type) + ""], [null,null,true])) + "></div>");
    }

  }
}).call(this);

buf.push("</div></div></div><div id=\"slide-answer\"></div><div id=\"stars-available\"></div><div id=\"stars-earned\" class=\"content text-center\"></div><div id=\"lesson-menu\"><div id=\"lesson-menu-content\" class=\"content-ver block-h-xl text-center\"><h1 class=\"tight delay-1\">" + (jade.escape(null == (jade_interp = title) ? "" : jade_interp)) + "</h1><h3 id=\"lesson-menu-page-count\"" + (jade.attr("data-total", slides.length, true, false)) + " class=\"block-v-md delay-2\">&nbsp;</h3><hr/><div class=\"block-v-lg clearfix\"><div id=\"lesson-menu-cancel\" class=\"btn btn-block btn-sm btn-primary\">" + (jade.escape(null == (jade_interp = i18n("menu.resume")) ? "" : jade_interp)) + "</div>");
if ( config.contextAllowsFreeNavigation || config.contextRequiresExitButton)
{
if ( config.contextAllowsFreeNavigation)
{
buf.push("<div id=\"lesson-menu-go-back\" class=\"btn btn-block btn-muted\">" + (jade.escape(null == (jade_interp = i18n("menu.go-back")) ? "" : jade_interp)) + "</div><div id=\"lesson-menu-restart\" class=\"btn btn-block btn-muted\">" + (jade.escape(null == (jade_interp = i18n("menu.restart")) ? "" : jade_interp)) + "</div>");
}
if ( config.contextRequiresExitButton && !config.isQuiz)
{
buf.push("<div id=\"lesson-menu-exit\" class=\"btn btn-block btn-muted\">" + (jade.escape(null == (jade_interp = i18n("menu.exit")) ? "" : jade_interp)) + "</div>");
}
else if ( config.contextRequiresExitButton && config.isQuiz)
{
buf.push("<div id=\"lesson-menu-exit\" class=\"btn btn-block btn-outlined\">" + (jade.escape(null == (jade_interp = i18n("menu.exit-quiz")) ? "" : jade_interp)) + "</div>");
}
}
else
{
buf.push("<div id=\"lesson-menu-cancel\" class=\"btn btn-block btn-muted\">" + (jade.escape(null == (jade_interp = i18n("buttons.continue")) ? "" : jade_interp)) + "</div>");
}
buf.push("</div></div></div><div id=\"text-input-view\"><div id=\"text-input-container\"><div id=\"text-input-container-top\" class=\"text-input-container block-lg\"><label id=\"text-input-prompt\"></label><label id=\"text-input-count\"><span id=\"text-input-count-current\"></span>&nbsp;/&nbsp;<span id=\"text-input-count-total\"></span></label><div id=\"text-input-dismiss-btn\" class=\"btn btn-solid\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div><div id=\"text-input-scroll\"><textarea id=\"text-input-area\" class=\"block-lg\"></textarea></div></div></div><div id=\"social-view\"><div id=\"social-view-input-cancel\" class=\"icon icon-close\"></div><div id=\"social-view-input\"><div class=\"content-fill\"><textarea id=\"social-view-input-text\" class=\"text-md block-lg\"></textarea></div><div id=\"social-view-input-toolbar\" class=\"block-v-md block-h-lg\"><div id=\"social-view-input-status\" class=\"pull-right\"><strong id=\"social-view-input-slide-count\"></strong><strong id=\"social-view-input-limit\"></strong><button id=\"social-view-input-confirm\" class=\"btn btn-solid btn-sm pull-right\">" + (null == (jade_interp = i18n("buttons.send")) ? "" : jade_interp) + "</button></div><label class=\"text-bold\"><div id=\"social-view-input-title\" class=\"text-ellipsis\"></div></label></div></div><div id=\"social-view-messages\"><div id=\"social-view-messages-list\" class=\"block-lg\"></div><div id=\"social-view-input-start\" class=\"block-lg\"><div id=\"social-view-start\" class=\"btn btn-solid btn-block\">" + (null == (jade_interp = i18n("social.have-your-say")) ? "" : jade_interp) + "</div></div></div></div><div id=\"photoswipe\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\" class=\"pswp\"><div class=\"pswp__bg\"></div><div class=\"pswp__scroll-wrap\"><div class=\"pswp__container\"><div class=\"pswp__item\"></div><div class=\"pswp__item\"></div><div class=\"pswp__item\"></div></div><div class=\"pswp__ui pswp__ui--hidden\"><div class=\"pswp__top-bar\"><div class=\"pswp__hint\"></div><div class=\"pswp__counter\"></div><button title=\"Close (Esc)\" class=\"pswp__button pswp__button--close\"></button><button title=\"Zoom in/out\" class=\"pswp__button pswp__button--zoom\"></button><button title=\"Full Screen\" class=\"pswp__button pswp__button--fs\"></button><div class=\"pswp__preloader\"><div class=\"pswp__preloader__icn\"></div></div></div><button title=\"Previous (←)\" class=\"pswp__button pswp__button--arrow--left\"></button><button title=\"Next (→)\" class=\"pswp__button pswp__button--arrow--right\"></button><div class=\"pswp__caption\"><div class=\"pswp__caption__center\"></div></div></div></div></div><div id=\"disconnection-warning\"><div class=\"content-fill block-lg\"><div id=\"disconnection-msg\" class=\"content block-h-xl block-v-lg text-center\"><div class=\"block-v-md\"><h2>To complete this lesson, Ed needs to be running in \nthe&nbsp;background.</h2><p class=\"text-md\">To continue, please open Ed and restart the lesson so that \nyour progress can be tracked&nbsp;correctly.</p></div><div class=\"block-v-md\"><a id=\"close-window\" href=\"https://web.edapp.com\" target=\"_self\" class=\"btn btn-solid btn-block\">" + (jade.escape((jade_interp = i18n("buttons.open-ed")) == null ? '' : jade_interp)) + "</a></div></div></div></div><div id=\"play-audio-popup\" class=\"block-xl\"><div class=\"content-fill\"><div class=\"content-ver text-center\"><div class=\"block-v-xl block-h-lg\"><h1>" + (jade.escape((jade_interp = i18n("audio-popup.title")) == null ? '' : jade_interp)) + "</h1><p class=\"text-md\">" + (jade.escape((jade_interp = i18n("audio-popup.description")) == null ? '' : jade_interp)) + "</p></div><div class=\"btn btn-solid btn-block btn-yes text-xl\">" + (jade.escape((jade_interp = i18n("audio-popup.allow")) == null ? '' : jade_interp)) + "</div></div><div class=\"btn btn-block btn-no btn-sm\">" + (jade.escape((jade_interp = i18n("audio-popup.cancel")) == null ? '' : jade_interp)) + "</div></div></div></div>");}.call(this,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"slides" in locals_for_with?locals_for_with.slides:typeof slides!=="undefined"?slides:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("utils/network_utils.coffee", function(exports, require, module) {
var checkOnline;

checkOnline = function() {
  var currentNetworkState, states;
  if (!((navigator.connection != null) && (window.Connection != null))) {
    return navigator.onLine;
  }
  currentNetworkState = navigator.connection.type;
  states = {};
  states[Connection.UNKNOWN] = false;
  states[Connection.NONE] = false;
  states[Connection.ETHERNET] = true;
  states[Connection.WIFI] = true;
  states[Connection.CELL] = true;
  states[Connection.CELL_2G] = true;
  states[Connection.CELL_3G] = true;
  states[Connection.CELL_4G] = true;
  return !!states[currentNetworkState];
};

module.exports = {
  checkOnline: checkOnline
};
});

;require.register("views/base/game.coffee", function(exports, require, module) {

/*
  For the content engine, games should attempt to follow a consistent pattern
  to reduce user (and developer) strain. Score and timer changes, for example,
  are handled in a consistent interface, and games should follow the pattern:

  - initializeData()
  - initializeElements()
  - enterGame()
  - showNext(isFirstRun = true)
  - startGame()
    - checkAnswer()
      if isCorrect
        - endGame()
      else
        - showNext(isFirstRun = false)

  - endGame()
  - afterAnimateScores()

  Games are displayed in "lightbox" mode while the game is in progress.
 */
var Analytics, EngineGameView, GameView, Session, Sound, j, len, ref, sound, system,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

GameView = require("views/game");

ref = Application.actions(), Sound = ref.Sound, Session = ref.Session, Analytics = ref.Analytics;

system = ["system:achievement", "system:new-star", "system:spin-win", "system:correct", "system:ready", "system:spinning", "system:game-music-slow", "system:spin-fail", "system:tally-score", "system:go", "system:spin-stop", "system:welcome", "system:incorrect", "system:spin-success"];

for (j = 0, len = system.length; j < len; j++) {
  sound = system[j];
  Sound.preload(sound, sound);
}

EngineGameView = (function(superClass) {
  extend(EngineGameView, superClass);

  function EngineGameView() {
    return EngineGameView.__super__.constructor.apply(this, arguments);
  }

  EngineGameView.prototype.show = function() {
    EngineGameView.__super__.show.apply(this, arguments);
    this.initializeData();
    this.initializeElements();
    return Session.get((function(_this) {
      return function(err, session) {
        var name, record, scores;
        if (session.scores != null) {
          scores = session.scores;
          name = _this.options.name;
          record = (scores != null ? scores[name] : void 0) != null ? parseInt(scores[name], 10) : null;
          if (record != null) {
            return _this.game.score.set("record", record);
          }
        }
      };
    })(this));
  };

  EngineGameView.prototype.hide = function() {
    EngineGameView.__super__.hide.apply(this, arguments);
    return Sound.stopAll();
  };

  EngineGameView.prototype.onRefresh = function() {
    EngineGameView.__super__.onRefresh.apply(this, arguments);
    Sound.stopAll();
    if (this.game.extra.get("fullscreen")) {
      return this.trigger("ui", {
        minimal: false
      });
    }
  };

  EngineGameView.prototype.initializeData = function() {};

  EngineGameView.prototype.initializeElements = function() {
    var elements, k, key, len1, results, selector;
    elements = ["timer", "progress-bar", "stepper", "score", "tally", "stars", "total", "record", "bonus-time"];
    results = [];
    for (k = 0, len1 = elements.length; k < len1; k++) {
      key = elements[k];
      selector = ".game-" + key;
      results.push(this.setEl(this.el.querySelector(selector), key));
    }
    return results;
  };

  EngineGameView.prototype.onTimerChange = function(m) {
    var asSec, bonusTime, count, d, lastBonus, limit, paused, ref1, remaining;
    ref1 = m.changed, remaining = ref1.remaining, count = ref1.count, lastBonus = ref1.lastBonus, paused = ref1.paused;
    if ((remaining != null) && (this.getEl("timer") != null)) {
      limit = m.get("limit");
      asSec = remaining / 1000;
      asSec = (asSec < 10 ? "0" : "") + asSec.toFixed(2) + "s";
      this.getEl("timer").innerHTML = asSec.replace(/^[0s\.]+/, function(w) {
        return _.wrapInTag(w, "em", {
          "class": "game-timer-muted"
        });
      });
    }
    if ((remaining != null) && (this.getEl("progress-bar") != null)) {
      d = this.game.timer.get("interval");
      this.transform(this.getEl("progress-bar"), {
        x: (-remaining / limit * 100) + "%"
      });
    }
    if ((count != null) && (this.getEl("stepper") != null)) {
      this.transition(this.getEl("stepper"), "all 100ms");
      this.getEl("stepper").offsetLeft;
      this.transform(this.getEl("stepper"), {
        x: "-50%",
        scale: 0.75
      });
      this.el.classList.toggle("game-count-down", count > 0);
      window.setTimeout(((function(_this) {
        return function() {
          _this.transition(_this.getEl("stepper"), "");
          _this.transform(_this.getEl("stepper"), {
            x: "-50%",
            scale: 1.25
          });
          if (count > 0) {
            _this.getEl("stepper").style.opacity = 1;
            _this.getEl("stepper").innerHTML = count;
            return Sound.play("system:ready");
          } else {
            _this.getEl("stepper").style.opacity = 0;
            return _this.getEl("stepper").innerHTML = i18n("game.go");
          }
        };
      })(this)), 120);
    }
    if (lastBonus > 0 && (this.getEl("bonus-time") != null)) {
      bonusTime = (lastBonus / 1000).toFixed(2);
      this.showBonus({
        el: this.getEl("bonus-time"),
        x: "-2em",
        html: i18n("game.bonus-time", {
          bonus_time: bonusTime
        }) || ("+" + bonusTime + " seconds"),
        delay: 400
      });
    }
    if ((paused != null) && m.hasLimit()) {
      return this.el.classList.toggle("game-paused", paused);
    }
  };

  EngineGameView.prototype.onScoreChange = function(m) {
    var correct, record, ref1, total;
    ref1 = m.changed, correct = ref1.correct, total = ref1.total, record = ref1.record;
    if ((record != null) && (this.getEl("record") != null)) {
      this.getEl("record").innerHTML = _.prettyNumber(record);
      this.getEl("record").offsetLeft;
    }
    if ((total != null) && (this.getEl("total") != null)) {
      return this.getEl("total").innerHTML = this.getEl("score").innerHTML = _.prettyNumber(total);
    }
  };

  EngineGameView.prototype.showBonus = function(arg) {
    var delay, el, html, x;
    el = arg.el, x = arg.x, html = arg.html, delay = arg.delay;
    el.innerHTML = html;
    this.transform(el, {
      x: x,
      transition: "none",
      opacity: 0
    });
    el.offsetLeft;
    this.transition(el, "", true);
    window.setTimeout(((function(_this) {
      return function() {
        return _this.transform(el, {
          x: 0,
          opacity: 1
        });
      };
    })(this)), 1 + (delay || 0));
    return window.setTimeout(((function(_this) {
      return function() {
        return _this.transform(el, {
          opacity: 0
        });
      };
    })(this)), 1000 + (delay || 0));
  };

  EngineGameView.prototype.enterGame = function() {
    EngineGameView.__super__.enterGame.apply(this, arguments);
    Sound.stop("system:tally-score");
    this.el.classList.add("disable-goto-next");
    if (this.game.extra.get("fullscreen")) {
      this.trigger("ui", {
        minimal: true
      });
    }
    return this.showNext(true);
  };

  EngineGameView.prototype.startGame = function() {
    if (this.game.extra.get("sounds")) {
      Sound.fadeIn("system:game-music-slow");
    }
    return EngineGameView.__super__.startGame.apply(this, arguments);
  };

  EngineGameView.prototype.endGame = function() {
    var answerDetails, err;
    try {
      answerDetails = typeof this.answerDetails === "function" ? this.answerDetails() : void 0;
    } catch (error) {
      err = error;
      console.error("Error on end game", err);
      answerDetails = [];
    }
    if (this.game.extra.get("sounds")) {
      Sound.fadeOut("system:game-music-slow");
      Sound.loop("system:tally-score");
    }
    EngineGameView.__super__.endGame.apply(this, arguments);
    if (this.game.extra.get("fullscreen")) {
      return this.trigger("ui", {
        minimal: false
      });
    }
  };

  EngineGameView.prototype.afterAnimateScores = function() {
    var challenge_configuration, earned, game, nbStars, preposition, ref1, ref2;
    if (this.game.extra.get("sounds")) {
      Sound.stop("system:tally-score");
      Sound.play("system:spin-win");
    }
    this.el.classList.remove("disable-goto-next");
    if (this.options.data) {
      ref1 = this.options.data, game = ref1.game, challenge_configuration = ref1.challenge_configuration;
    }
    nbStars = (challenge_configuration != null ? challenge_configuration.nb_stars : void 0) === 0 ? 0 : (ref2 = challenge_configuration != null ? challenge_configuration.nb_stars : void 0) != null ? ref2 : challenge_configuration != null ? challenge_configuration.weighting : void 0;
    earned = 0;
    if (!!this.game.timer.get("isDisabled") && this.game.score.get("incorrect") === 0) {
      earned = nbStars;
    } else if ((game != null ? game.stars : void 0) && nbStars) {
      earned = this.calculateStarsEarned({
        score: this.game.score.get("record"),
        stars: nbStars,
        range: this.options.data.game.stars
      }).earned;
    }
    if (game != null ? game.stars : void 0) {
      Session.get((function(_this) {
        return function(err, arg) {
          var attempt;
          attempt = arg.attempt;
          return _this.lesson.processInteraction({
            score: _.clone(_this.game.score.attributes),
            time: _.clone(_this.game.timer.attributes),
            id: _this.options.id,
            name: _this.options.name,
            type: _this.options.type,
            nb_stars_earned: earned,
            configuration: _this.options.data.challenge_configuration,
            game: true,
            slideData: _this.options.data,
            attempt: attempt,
            answerDetails: (typeof _this.answerDetails === "function" ? _this.answerDetails() : void 0) || [],
            metadata: _this.options.metadata
          });
        };
      })(this));
    }
    preposition = i18n('game.of') || 'of';
    this.getEl("stars").innerHTML = earned + _.wrapInTag(" " + preposition + " " + nbStars, "sup", {
      "class": "stars-total"
    });
    return EngineGameView.__super__.afterAnimateScores.apply(this, arguments);
  };

  EngineGameView.prototype.calculateStarsEarned = function(arg) {
    var earned, k, level, levels, max, min, numLevels, range, results, score, stars;
    score = arg.score, stars = arg.stars, range = arg.range;
    min = range.min, max = range.max;
    numLevels = stars > 1 ? stars - 1 : 1;
    levels = (function() {
      results = [];
      for (var k = 0; 0 <= stars ? k < stars : k > stars; 0 <= stars ? k++ : k--){ results.push(k); }
      return results;
    }).apply(this).map(function(i) {
      return (max - min) / numLevels * i + min;
    });
    level = _.chain(levels).filter(function(n) {
      return score >= n;
    }).last().value();
    earned = levels.indexOf(level) + 1;
    return {
      earned: earned
    };
  };

  EngineGameView.prototype.onCorrectAnswer = function() {
    if (this.game.extra.get("sounds")) {
      Sound.play("system:correct");
    }
    return EngineGameView.__super__.onCorrectAnswer.apply(this, arguments);
  };

  EngineGameView.prototype.onIncorrectAnswer = function() {
    if (this.game.extra.get("sounds")) {
      Sound.play("system:incorrect");
    }
    return EngineGameView.__super__.onIncorrectAnswer.apply(this, arguments);
  };

  EngineGameView.prototype.showNext = function(isFirstRun) {};

  EngineGameView.prototype.checkAnswer = function() {};

  EngineGameView.prototype.screenshot = function() {
    this.stopListening();
    this.el.classList.remove("game-count-down", "game-paused");
    this.setState("playing", "game");
    return EngineGameView.__super__.screenshot.apply(this, arguments);
  };

  return EngineGameView;

})(GameView);

module.exports = EngineGameView;
});

;require.register("views/base/slide.coffee", function(exports, require, module) {
var BaseSlideView, Session,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Session = Application.actions().Session;

BaseSlideView = (function(superClass) {
  extend(BaseSlideView, superClass);

  function BaseSlideView() {
    return BaseSlideView.__super__.constructor.apply(this, arguments);
  }

  BaseSlideView.prototype.refresh = function(params, config) {
    var answerChangeOnly, isCorrect, ref, ref1;
    this.setState(true, "refresh");
    answerChangeOnly = _.isEqual(_.omit(params.data, "answer"), _.omit(this.options.data, "answer"));
    if (answerChangeOnly) {
      isCorrect = ((ref = this.options.data.answer) != null ? ref.incorrect : void 0) === ((ref1 = params.data.answer) != null ? ref1.incorrect : void 0);
    }
    this.options.data = params.data;
    this.options.metadata = params.metadata;
    if (answerChangeOnly && params.data.answer) {
      this.trigger("complete", this, {
        isCorrect: isCorrect
      });
    } else {
      this.undelegateEvents();
      this.render(params, config);
      this.delegateEvents();
      this.trigger("refresh", this);
      this.trigger("resize", this);
    }
    return window.setTimeout(((function(_this) {
      return function() {
        return _this.setState(false, "refresh");
      };
    })(this)), 0);
  };

  BaseSlideView.prototype.reset = function() {
    this.undelegateEvents();
    this.render();
    return this.delegateEvents();
  };

  BaseSlideView.prototype.submit = function() {
    var answerDetails, err, isCorrect, isTooSlow, prevState, ref, ref1, ref2;
    try {
      answerDetails = typeof this.answerDetails === "function" ? this.answerDetails() : void 0;
    } catch (error) {
      err = error;
      console.error("Error on answer details", err);
      answerDetails = [];
    }
    isCorrect = this.isCorrect();
    prevState = this.currentState.state;
    isTooSlow = prevState === "prompt" && ((ref = this.options.data.game) != null ? (ref1 = ref.timer) != null ? ref1.limit : void 0 : void 0) > 0;
    this.trigger("complete", this, {
      isCorrect: isCorrect,
      isTooSlow: isTooSlow,
      answerDetails: answerDetails
    });
    if (!this.options.data.answer) {
      return this.next();
    }
    this.setState("complete");
    if ((ref2 = this.options.lessonConfiguration) != null ? ref2.hasAnswerFeedback : void 0) {
      return this.showAnswer();
    } else {
      return this.next();
    }
  };

  BaseSlideView.prototype.slideCompleted = function(isCorrect, answerDetails) {
    var isInteractive;
    if (isCorrect == null) {
      isCorrect = this.isCorrect();
    }
    if (answerDetails == null) {
      answerDetails = typeof this.answerDetails === "function" ? this.answerDetails() : void 0;
    }
    isInteractive = ((answerDetails != null ? answerDetails.length : void 0) || 0) > 0;
    return Application.publish("event:slide-completed")({
      isCorrect: isCorrect,
      isInteractive: isInteractive
    });
  };

  BaseSlideView.prototype.slideNext = function() {
    var slideIndex;
    slideIndex = this.options.slideIndex;
    return Application.publish("event:next-slide")({
      slideIndex: slideIndex
    });
  };

  BaseSlideView.prototype.answerDetails = function() {
    return [];
  };

  BaseSlideView.prototype.isCorrect = function() {
    return true;
  };

  BaseSlideView.prototype.showAnswer = function() {};

  BaseSlideView.prototype.exit = function() {
    return Backbone.Events.trigger("application-exit");
  };

  BaseSlideView.prototype.delegateEvents = function() {
    BaseSlideView.__super__.delegateEvents.call(this);
    this.toggleNonBubblingEvents("add");
    this.listenTo(this, "refresh", this.onRefresh);
    this.listenTo(this, "narration-loaded", this.onNarrationLoaded);
    this.listenTo(this, "narration-progress", this.onNarrationProgress);
    this.listenTo(this, "narration-pause", this.onNarrationComplete);
    return this.listenTo(this, "narration-complete", this.onNarrationComplete);
  };

  BaseSlideView.prototype.undelegateEvents = function() {
    var arr, i, key, len, obj, ref, ref1;
    this.stopListening();
    this.toggleNonBubblingEvents("remove");
    ref = this;
    for (key in ref) {
      arr = ref[key];
      if (!_.isArray(arr)) {
        arr = [arr];
      }
      ref1 = _.compact(arr);
      for (i = 0, len = ref1.length; i < len; i++) {
        obj = ref1[i];
        if (typeof obj.undelegateEvents === "function") {
          obj.undelegateEvents();
        }
      }
    }
    return BaseSlideView.__super__.undelegateEvents.call(this);
  };

  BaseSlideView.prototype.toggleNonBubblingEvents = function(dir) {
    var el, events, evt, results, selector;
    events = {
      scroll: [".content-scroll", ".content-sm-scroll", ".content-md-scroll", ".content-lg-scroll"]
    };
    results = [];
    for (evt in events) {
      selector = events[evt];
      results.push((function() {
        var i, len, ref, results1;
        ref = this.el.querySelectorAll(selector.join(", "));
        results1 = [];
        for (i = 0, len = ref.length; i < len; i++) {
          el = ref[i];
          results1.push(el[dir + "EventListener"](evt, this, false));
        }
        return results1;
      }).call(this));
    }
    return results;
  };

  BaseSlideView.prototype.handleEvent = function(e) {
    switch (e.type) {
      case "scroll":
        return this.onScroll(e);
    }
  };

  BaseSlideView.prototype.onScroll = function(e) {
    return this.trigger("scroll", e);
  };

  return BaseSlideView;

})(Backbone.View);

module.exports = BaseSlideView;
});

;require.register("views/base/slides.coffee", function(exports, require, module) {

/*
  For the content engine, slides are configured by first loading the
  config.json file and post-rendering slides. The corresponding views are
  created from templates rather than slide specific views.
 */
var Analytics, BaseSlidesView, CommentCollection, I18N, Lesson, LessonEngine, LessonMenuView, Preloader, Session, SlideAnswerView, SocialView, Sound, TextInputView, device, network_utils, processData, ref,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CommentCollection = require("collections/comments");

ref = Application.actions(), Sound = ref.Sound, Analytics = ref.Analytics, Session = ref.Session;

LessonMenuView = require("views/components/lesson-menu");

SlideAnswerView = require("views/components/slide-answer");

TextInputView = require("views/components/text-input");

SocialView = require("views/components/social-learning");

Preloader = require("lib/preload");

Lesson = require("models/lesson");

LessonEngine = require("models/lesson-engine");

processData = require("lib/data-processer");

I18N = require("lib/i18n");

device = require("lib/device");

network_utils = require("utils/network_utils");

BaseSlidesView = (function(superClass) {
  extend(BaseSlidesView, superClass);

  function BaseSlidesView() {
    this.onComplete = bind(this.onComplete, this);
    this.surveyCompleted = bind(this.surveyCompleted, this);
    this.calculateDuration = bind(this.calculateDuration, this);
    return BaseSlidesView.__super__.constructor.apply(this, arguments);
  }

  BaseSlidesView.prototype.templates = {
    starsAvailable: require("templates/components/engine/stars-available"),
    starsEarned: require("templates/components/engine/stars-earned"),
    slideAnswer: require("templates/components/engine/slide-answer")
  };

  BaseSlidesView.prototype.events = {
    "iostap #slide-answer-continue": "onContinue",
    "iostap #lesson-header-nav-menu-btn": "openMenu",
    "iostap #lesson-header-nav-social-learning": "openSocialLearning",
    "iostap #play-audio-popup .btn-yes": "onNarrationAccept",
    "iostap #play-audio-popup .btn-no": "onNarrationReject"
  };

  BaseSlidesView.prototype.initialize = function(params, callback) {
    var isFullScreen;
    callback();
    this.slideSocialComments = [];
    this.listenTo(this, "goToPage", this.onGoToPage);
    this.listenTo(this, "showView", this.onShowView);
    this.listenTo(Backbone.Events, "subscribe:event:comment-loaded", this.onCommentLoad);
    this.listenTo(Backbone.Events, "subscribe:event:goToPage", this.goToPage);
    this.listenTo(Backbone.Events, "subscribe:event:toggle-page-count", this.toggleHeaderPageCount);
    this.listenTo(Backbone.Events, "subscribe:event:toggle-title", this.toggleHeaderTitle);
    this.listenTo(Backbone.Events, "subscribe:event:toggle-nav-btn", this.toggleNavBtn);
    this.listenTo(Backbone.Events, "subscribe:event:toggle-open-menu-externally", this.toggleOpenMenuExternally);
    this.listenTo(Backbone.Events, "subscribe:event:resume-tracking", this.resumeTracking);
    this.listenTo(Backbone.Events, "subscribe:event:pause-tracking", this.pauseTracking);
    this.listenTo(Backbone.Events, "application-exit", this.onExit);
    this.listenTo(Backbone.Events, "ed-closed", this.onDisconnection);
    this.listenTo(Backbone.Events, "load-narration", this.onLoadNarration);
    this.listenTo(Backbone.Events, "subscribe:event:new-star", this.onNewStar);
    this.listenTo(Backbone.Events, "event:survey-complete", this.surveyCompleted);
    $(window).bind("unload pagehide", (function(_this) {
      return function() {
        Application.publish("event:lesson-closed")({});
        Application.publish("event:lesson-unload")({});
        _this.onExit();
      };
    })(this));
    isFullScreen = false;
    $(document).on(["webkitfullscreenchange", "mozfullscreenchange", "fullscreenchange", "MSFullscreenChange"].join(" "), (function(_this) {
      return function() {
        isFullScreen = document.fullScreen || document.mozFullScreen || document.webkitIsFullScreen || !isFullScreen;
        return _this.toggleUI({
          fullscreen: isFullScreen
        });
      };
    })(this));
    if (params.cms) {
      window.ED_LMS_PREVIEW = true;
    }
    if (params["public"]) {
      window.ED_PUBLIC_PREVIEW = true;
    }
    if (params.engine_preview) {
      window.ENGINE_PREVIEW = true;
    }
    if (params.cms || params["public"]) {
      return window.addEventListener("message", (function(_this) {
        return function(event) {
          switch (event.data.type) {
            case "go-to-page":
              return _this.goToPageFromPreview(event.data.value, event.data.options);
            case "set-current-state":
              return _this.setCurrentState(event.data.value);
            case "refresh":
              return _this.refresh(event.data.value, event.data.options);
            case "refresh-current-view":
              return _this.refreshCurrentView(event.data.value, event.data.config, event.data.slideIndex);
          }
        };
      })(this));
    } else {
      this.lesson = new Lesson();
      return this.lesson.load((function(_this) {
        return function(err) {
          var ref1, renderData;
          if (err != null) {
            return console.error("Error while loading the lesson data", err);
          } else {
            renderData = _.extend({}, params, _this.lesson.getSlides());
            I18N.initialize(((ref1 = renderData.config) != null ? ref1.language : void 0) || "en");
            return _this.initRenderWith(renderData);
          }
        };
      })(this));
    }
  };

  BaseSlidesView.prototype.initRenderWith = function(data) {
    this.render(data);
    this.setElements();
    Preloader.preloadLessonAssets(data.slides);
    return Preloader.preloadThomasAssets();
  };

  BaseSlidesView.prototype.onExit = function() {
    var e;
    this.stopCurrentNarration();
    this.stopTracking();
    Application.publish("event:exit")({});
    Application.publish("lesson:exit")({});
    if ((this.options != null) && this.options.scorm && this.options.config.hasScormExitButton) {
      try {
        return window.top.close();
      } catch (error) {
        e = error;
        return console.error("error when closing window:", e);
      }
    }
  };

  BaseSlidesView.prototype.onDisconnection = function() {
    return this.el.querySelector("#disconnection-warning").classList.add("active");
  };

  BaseSlidesView.prototype.refresh = function(data, params) {
    var cmsOpts, j, len, options, ref1, ref2, ref3, renderedData, view;
    if ((ref1 = this.request) != null) {
      ref1.abort();
    }
    window.clearTimeout(this.timeout);
    delete this.currentIndex;
    ref2 = this.slideViews || [];
    for (j = 0, len = ref2.length; j < len; j++) {
      view = ref2[j];
      view.undelegateEvents().remove();
    }
    cmsOpts = {
      withoutNarration: true,
      forceResize: true,
      isRefresh: true
    };
    if (typeof Sound.disableSystemSounds === "function") {
      Sound.disableSystemSounds();
    }
    this.lesson = new Lesson(data);
    renderedData = this.lesson.getSlides();
    options = _.extend(cmsOpts, renderedData, params);
    I18N.initialize((data != null ? (ref3 = data.config) != null ? ref3.language : void 0 : void 0) || "en");
    this.render(options);
    return this.setElements();
  };

  BaseSlidesView.prototype.setCurrentState = function(state) {
    var ref1;
    this.getCurrentSlide().setState(state);
    if (state === "complete" && (((ref1 = this.getCurrentSlide().options.data) != null ? ref1.answer : void 0) != null)) {
      return this.onComplete(this.getCurrentSlide(), {
        isCorrect: true
      });
    } else {
      return this.slideAnswerView.toggle(false);
    }
  };

  BaseSlidesView.prototype.refreshCurrentView = function(options, config, slideIndex) {
    var view;
    if (this.currentIndex !== slideIndex) {
      return;
    }
    if (this.currentIndex != null) {
      view = this.getCurrentSlide();
      options.data = processData.one(options.data, view.options.type, config);
      options.metadata = processData.oneMD(options.metadata);
      if ((view != null) && !_.isEqual(options.data, view.options.data)) {
        this.toggleViewInDOM(view, true);
        view.withoutNarration = true;
        return view.refresh(options, config);
      }
    }
  };

  BaseSlidesView.prototype.createSlideViews = function(config, params) {
    var el, i, j, len, ref1, view;
    if (this.slideViews) {
      ref1 = this.slideViews;
      for (j = 0, len = ref1.length; j < len; j++) {
        view = ref1[j];
        view.off().undelegateEvents();
      }
    }
    this.setElements();
    this.setGlobalStyles(this.options);
    this.slideViews = (function() {
      var l, len1, ref2, results;
      ref2 = this.el.querySelectorAll(".slide");
      results = [];
      for (i = l = 0, len1 = ref2.length; l < len1; i = ++l) {
        el = ref2[i];
        view = this.createViewFor(el, this.options.slides[i], config, params, i);
        view.on("ui", this.toggleUI, this);
        view.on("complete", this.onComplete, this);
        view.on("refresh", this.onRefresh, this);
        view.on("scroll", this.onScroll, this);
        view.on("video-play", this.onVideoPlay, this);
        view.on("video-pause", this.onVideoPause, this);
        results.push(view);
      }
      return results;
    }).call(this);
    if (this.options.debug) {
      return this.logMenu();
    }
  };

  BaseSlidesView.prototype.logMenu = function() {
    var Logger, el, i, j, len, name, ref1, results;
    Logger = new (require("lib/logger"))(!window.cordova, "MENU", "#2DB906");
    ref1 = this.slideViews;
    results = [];
    for (i = j = 0, len = ref1.length; j < len; i = ++j) {
      el = ref1[i];
      name = el.options.name;
      while (name.length < 22) {
        name += " ";
      }
      results.push(Logger(name + " " + window.location.origin + "/#slide/" + (i + 1)));
    }
    return results;
  };

  BaseSlidesView.prototype.createViewFor = function(el, data, config, params, slideIndex) {
    var View, v;
    View = require("engine/" + data.type + "/view");
    v = new View(this.optionsForView(el, data, config, params, slideIndex));
    v.lesson = this.lesson;
    return v;
  };

  BaseSlidesView.prototype.getExtraConfig = function(params) {
    var config, defaultConfig, ref1, ref2, ref3;
    defaultConfig = {
      locked: true,
      contextRequiresExitButton: !window.ED_PUBLIC_PREVIEW && !params.hideExitButton && (!params.scorm || params.config.hasScormExitButton),
      contextAllowsFreeNavigation: !(params.scorm || ((ref1 = window.__) != null ? (ref2 = ref1.slidedeck) != null ? ref2.isScored : void 0 : void 0)),
      networkOnline: network_utils.checkOnline()
    };
    config = (ref3 = window.__) != null ? ref3.downloadConfiguration : void 0;
    params.config = _.extend({}, defaultConfig, params.config, config);
    return params;
  };

  BaseSlidesView.prototype.toggleUI = function(state) {
    var key, results, val;
    if (state.lightbox != null) {
      if (state.minimal == null) {
        state.minimal = state.lightbox;
      }
      this.lightboxBgEl.style.backgroundColor = typeof state.lightbox === "string" ? state.lightbox : state.lightbox ? "#111" : "";
    }
    results = [];
    for (key in state) {
      val = state[key];
      if (val != null) {
        results.push(this.el.classList.toggle("ui-" + (written.hyphenCase(key)), val));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  BaseSlidesView.prototype.onVideoPlay = function() {
    this.toggleUI({
      videoActive: true
    });
    return Application.publish("event:video-play")({});
  };

  BaseSlidesView.prototype.onVideoPause = function() {
    return this.toggleUI({
      videoActive: false
    });
  };

  BaseSlidesView.prototype.toggleStars = function(index) {
    if ((this.slideViews[index] == null) || this.options.scorm) {
      return;
    }
    return Session.get((function(_this) {
      return function(err, arg) {
        var alreadyCompleted, available, data, earned, enableStars, id, isGame, isQuestionPoolSlide, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, starOrWeightValue, stars, starsKey, total;
        stars = arg.stars, alreadyCompleted = arg.alreadyCompleted, enableStars = arg.enableStars;
        ref1 = _this.slideViews[index].options, data = ref1.data, id = ref1.id;
        starsKey = stars && _.find(Object.keys(stars), (function(k) {
          return k.length > 1;
        })) ? id : index;
        isQuestionPoolSlide = _this.slideViews[index].options.metadata.friedrichType === "QuestionPool";
        starOrWeightValue = (data != null ? (ref2 = data.challenge_configuration) != null ? ref2.nb_stars : void 0 : void 0) === 0 ? 0 : (data != null ? (ref3 = data.challenge_configuration) != null ? ref3.nb_stars : void 0 : void 0) || (data != null ? (ref4 = data.challenge_configuration) != null ? ref4.weighting : void 0 : void 0) || 0;
        available = !isQuestionPoolSlide && (enableStars || _this.options.enableStars) ? (ref5 = stars != null ? (ref6 = stars[starsKey]) != null ? ref6.available : void 0 : void 0) != null ? ref5 : starOrWeightValue : 0;
        earned = (stars != null ? (ref7 = stars[starsKey]) != null ? ref7.earned : void 0 : void 0) || 0;
        total = available + earned;
        isGame = (data != null ? (ref8 = data.game) != null ? (ref9 = ref8.stars) != null ? ref9.min : void 0 : void 0 : void 0) != null;
        window.clearTimeout(_this.starsTimeout);
        if (available > 0) {
          return _this.starsTimeout = window.setTimeout((function() {
            _this.slideStarsEl.innerHTML = _this.templates.starsAvailable({
              available: available
            });
            _this.slideStarsEl.offsetLeft;
            _this.el.classList.add("display-stars-avail");
            return _this.starsTimeout = window.setTimeout((function() {
              return _this.el.classList.remove("display-stars-avail");
            }), 2100);
          }), 600);
        } else {
          return _this.el.classList.remove("display-stars-avail");
        }
      };
    })(this));
  };

  BaseSlidesView.prototype.calculateDuration = function(id) {
    var details, duration, j, len, ref1, ref2, ref3;
    if (((ref1 = this.durations) != null ? ref1[id] : void 0) != null) {
      duration = 0;
      ref2 = this.durations[id];
      for (j = 0, len = ref2.length; j < len; j++) {
        details = ref2[j];
        duration += ((ref3 = details.end) != null ? ref3 : Date.now()) - details.start;
      }
      return duration;
    } else {
      return -1;
    }
  };

  BaseSlidesView.prototype.surveyCompleted = function(event) {
    var attempt, duration, slide_id, user_input;
    slide_id = event.slide_id, user_input = event.user_input, attempt = event.attempt;
    duration = this.calculateDuration(slide_id);
    return this.lesson.processInteraction({
      survey: true,
      slide_id: slide_id,
      user_input: user_input,
      attempt: attempt,
      duration: duration
    });
  };

  BaseSlidesView.prototype.onComplete = function(view, arg) {
    var answerDetails, courseId, data, id, isCorrect, isTooSlow, lessonConfiguration, lessonId, name, ref1, totalDuration, type;
    isCorrect = arg.isCorrect, isTooSlow = arg.isTooSlow, answerDetails = arg.answerDetails;
    ref1 = view.options, name = ref1.name, type = ref1.type, data = ref1.data, id = ref1.id, lessonConfiguration = ref1.lessonConfiguration, lessonId = ref1.lessonId, courseId = ref1.courseId;
    totalDuration = this.calculateDuration(view.id);
    return Session.get((function(_this) {
      return function(err, arg1) {
        var attempt, ref2, timerPrompt;
        attempt = arg1.attempt;
        _this.lesson.processInteraction({
          lesson_id: lessonId,
          course_id: courseId,
          id: id,
          name: name,
          type: type,
          slideData: data,
          correct: isCorrect,
          tooSlow: isTooSlow,
          answerDetails: answerDetails,
          configuration: data.challenge_configuration,
          playedSound: true,
          attempt: attempt,
          metadata: view.options.metadata,
          duration: totalDuration
        });
        if ((isCorrect != null) && (lessonConfiguration != null ? lessonConfiguration.hasAnswerFeedback : void 0) && (data.answer != null)) {
          id = isCorrect ? "system:correct" : "system:incorrect";
          Sound.play(id);
          timerPrompt = (ref2 = data.game) != null ? ref2.timer["out-of-time-prompt"] : void 0;
          if ((!timerPrompt) || timerPrompt.trim() === "") {
            timerPrompt = i18n("slide-answer.times-up");
          }
          _this.slideAnswerView.render({
            isCorrect: isCorrect,
            isTooSlow: isTooSlow,
            timerPrompt: timerPrompt,
            answer: data.answer
          });
          return _this.slideAnswerView.toggle(true);
        }
      };
    })(this));
  };

  BaseSlidesView.prototype.onRefresh = function() {
    this.setElements();
    this.toggleStars(this.scroller.currentPage.pageX);
    return this.slideAnswerView.toggle(false);
  };

  BaseSlidesView.prototype.onContinue = function() {
    this.slideAnswerView.toggle(false);
    return this.getCurrentSlide().next();
  };

  BaseSlidesView.prototype.openMenu = function() {
    if (this.shouldOpenMenuExternally === true) {
      return Application.publish("event:open-menu")({
        slideId: this.getCurrentSlide().id
      });
    } else {
      return this.lessonMenuView.open();
    }
  };

  BaseSlidesView.prototype.openSocialLearning = function() {
    Application.publish("event:social-view-clicked")({
      slideId: this.getCurrentSlide().id
    });
    return this.socialLearningView.open(this.getCurrentSlide(), this.slideSocialComments);
  };

  BaseSlidesView.prototype.toggleHeaderPageCount = function(show) {
    var pageCount;
    pageCount = this.el.querySelector("#lesson-header-nav-page-count");
    if (show === true) {
      return pageCount.style.display = 'inline-block';
    } else {
      return pageCount.style.display = 'none';
    }
  };

  BaseSlidesView.prototype.toggleHeaderTitle = function(show) {
    var titleContent;
    titleContent = this.el.querySelector("#lesson-header-title-content");
    if (show === true) {
      return titleContent.style.display = 'block';
    } else {
      return titleContent.style.display = 'none';
    }
  };

  BaseSlidesView.prototype.toggleNavBtn = function(show) {
    var navBtn;
    navBtn = this.el.querySelector("#lesson-header-nav-menu-btn");
    if (show === true) {
      return navBtn.style.display = 'inline-block';
    } else {
      return navBtn.style.display = 'none';
    }
  };

  BaseSlidesView.prototype.toggleOpenMenuExternally = function(shouldOpen) {
    return this.shouldOpenMenuExternally = shouldOpen;
  };

  BaseSlidesView.prototype.onGoToPage = function(index, ms, options) {
    if (options == null) {
      options = {};
    }
    this.slideSocialComments = [];
    if (!(this.slideStarsEl && this.starsAlertEl && this.slideAnswerView)) {
      this.setElements();
    }
    this.toggleStars(index);
    this.toggleUI({
      lightbox: false
    });
    this.slideAnswerView.toggle(false);
    this.lessonMenuView.setPage(index);
    return this.socialLearningView.exit();
  };

  BaseSlidesView.prototype.onShowView = function(slideView) {
    var ref1;
    if ((ref1 = this.socialIconEl) != null) {
      ref1.classList.remove("has-count");
    }
    this.startTracking(slideView);
    if (window.location.href.split("thumbnail=true").length !== 2) {
      this.playNarration(slideView);
    }
    return this.el.classList.remove("scroll-top", "scroll-bottom", "scroll-middle");
  };

  BaseSlidesView.prototype.onScroll = function(e, key) {
    var el;
    el = e != null ? e.currentTarget : void 0;
    if (key == null) {
      key = (function() {
        switch (el.scrollTop) {
          case 0:
            return "top";
          case el.scrollHeight - el.offsetHeight:
            return "bottom";
          default:
            return "middle";
        }
      })();
    }
    this.el.classList.toggle("scroll-top", key === "top");
    this.el.classList.toggle("scroll-bottom", key === "bottom");
    return this.el.classList.toggle("scroll-middle", key === "middle");
  };

  BaseSlidesView.prototype.goToPageFromPreview = function(index, options) {
    var ref1, ref2;
    if ((ref1 = this.slideViews[index]) != null) {
      ref1.reset();
    }
    if ((ref2 = this.slideViews[index]) != null) {
      ref2.withoutNarration = true;
    }
    this.goToPage(index, options.ms, {
      fromPreview: true
    });
    window.clearTimeout(this.gotoTimeout);
    return this.gotoTimeout = window.setTimeout(((function(_this) {
      return function() {
        var ref3;
        return (ref3 = _this.slideViews[index]) != null ? ref3.trigger("resize") : void 0;
      };
    })(this)), 600);
  };

  BaseSlidesView.prototype.onCommentLoad = function(arg) {
    var comments, hasMore, ref1, total;
    comments = arg.comments, total = arg.total, hasMore = arg.hasMore;
    if (comments) {
      this.slideSocialComments = comments;
    }
    if ((ref1 = this.socialIconEl) != null) {
      ref1.classList.toggle("has-count", total > 0);
    }
    if (comments) {
      return this.socialLearningView.updateComments(this.slideSocialComments, hasMore);
    }
  };

  BaseSlidesView.prototype.onNewStar = function(arg) {
    var earned, score, total;
    earned = arg.earned, total = arg.total, score = arg.score;
    window.clearTimeout(this.starAlertTimeout);
    if (earned > 0 && score > 0) {
      this.starsAlertEl.classList.add("before-display");
      return this.starAlertTimeout = window.setTimeout(((function(_this) {
        return function() {
          var j, results;
          _this.starsAlertEl.innerHTML = _this.templates.starsEarned({
            stars: (function() {
              results = [];
              for (var j = 0; 0 <= total ? j < total : j > total; 0 <= total ? j++ : j--){ results.push(j); }
              return results;
            }).apply(this).map(function(el, i) {
              return {
                complete: i < score
              };
            })
          });
          _this.starsAlertEl.offsetLeft;
          _this.starsAlertEl.classList.add("display");
          _this.starAlertTimeout = window.setTimeout((function() {
            return _this.starsAlertEl.classList.remove("display", "before-display");
          }), 2100);
          return Session.get(function(err, arg1) {
            var ref1, remainingStars, slideId, stars, starsForSlide;
            stars = arg1.stars;
            if (Array.isArray(stars)) {
              starsForSlide = stars[_this.currentIndex];
            } else {
              slideId = (ref1 = _this.slideViews[_this.currentIndex]) != null ? ref1.id : void 0;
              starsForSlide = stars[slideId];
            }
            if (starsForSlide != null) {
              remainingStars = starsForSlide.available;
              starsForSlide.earned = Math.min(starsForSlide.earned + earned, starsForSlide.available);
              return starsForSlide.available = Math.max(0, starsForSlide.available - earned);
            }
          });
        };
      })(this)), 300);
    }
  };

  BaseSlidesView.prototype.onLoadNarration = function(isLoading) {
    return this.el.classList.toggle("is-loading-narration", isLoading);
  };

  BaseSlidesView.prototype.setElements = function() {
    var goToPage, ref1, ref2, ref3, ref4;
    this.slideStarsEl = this.el.querySelector("#stars-available");
    this.starsAlertEl = this.el.querySelector("#stars-earned");
    this.audioPopupEl = this.el.querySelector("#play-audio-popup");
    this.lightboxBgEl = this.el.querySelector("#slides-lightbox-bg");
    this.socialIconEl = this.el.querySelector("#lesson-header-nav-social-learning");
    if ((ref1 = this.textInputView) != null) {
      ref1.undelegateEvents();
    }
    this.textInputView = new TextInputView({
      el: "#text-input-view"
    });
    this.textInputView.on("open", (function(_this) {
      return function() {
        return _this.toggleUI({
          textInput: true
        });
      };
    })(this));
    this.textInputView.on("exit", (function(_this) {
      return function() {
        return _this.toggleUI({
          textInput: false
        });
      };
    })(this));
    if ((ref2 = this.socialLearningView) != null) {
      ref2.undelegateEvents();
    }
    this.socialLearningView = new SocialView({
      el: "#social-view"
    });
    this.socialLearningView.on("open", (function(_this) {
      return function() {
        _this.toggleUI({
          socialLearning: true
        });
        return _this.socialLearningOpen = true;
      };
    })(this));
    this.socialLearningView.on("exit", (function(_this) {
      return function() {
        _this.toggleUI({
          socialLearning: false
        });
        return _this.socialLearningOpen = false;
      };
    })(this));
    if (device.platform === "iOS") {
      document.addEventListener('touchmove', (function(_this) {
        return function(e) {
          var socialMessagesList;
          if (_this.socialLearningOpen) {
            if (!$(e.target).parents("#social-view-messages").length) {
              return e.preventDefault();
            } else {
              socialMessagesList = document.getElementById("social-view-messages-list");
              if (!socialMessagesList || socialMessagesList.scrollHeight <= socialMessagesList.clientHeight) {
                return e.preventDefault();
              }
            }
          }
        };
      })(this), {
        passive: false
      });
    }
    goToPage = (function(_this) {
      return function(index) {
        _this.toggleViewInDOM(_this.slideViews[index], true);
        _this.slideViews[index].el.offsetWidth;
        return _this.goToPage(index);
      };
    })(this);
    if ((ref3 = this.lessonMenuView) != null) {
      ref3.undelegateEvents();
    }
    this.lessonMenuView = new LessonMenuView({
      el: this.el.querySelector("#lesson-menu"),
      back: (function(_this) {
        return function() {
          goToPage(_this.currentIndex - 1);
          return _this.trigger('thomas-menu:back');
        };
      })(this),
      restart: (function(_this) {
        return function() {
          goToPage(0);
          return _this.trigger('thomas-menu:restart');
        };
      })(this),
      exit: (function(_this) {
        return function() {
          return _this.trigger('thomas-menu:exit');
        };
      })(this),
      scorm: this.options.scorm,
      isQuiz: this.options.config.isQuiz
    });
    this.socialLearningView.getCurrentPage = (function(_this) {
      return function() {
        return _this.currentIndex;
      };
    })(this);
    if ((ref4 = this.slideAnswerView) != null) {
      ref4.undelegateEvents();
    }
    return this.slideAnswerView = new SlideAnswerView({
      el: this.el.querySelector("#slide-answer")
    });
  };

  BaseSlidesView.prototype.setGlobalStyles = function(params) {
    _.extend(this.options, params);
    this.setColors();
    this.setCustomCSS();
    this.setBackgroundImage();
    this.initializeHtmlLang();
    return this.lessonMenuView.updateStyle(this.options.config);
  };

  BaseSlidesView.prototype.setColors = function() {
    var background, isDark, ref1, ref2, text;
    if (((ref1 = this.options.config) != null ? ref1.colors : void 0) != null) {
      ref2 = this.options.config.colors, text = ref2.text, background = ref2.background;
      this.el.className = this.el.className.replace(/theme-[\w-]+/, "");
      if (this.options.config.colors.theme) {
        this.el.classList.add("theme-" + (this.options.config.colors.theme.replace(/\s/g, '')));
      }
      this.el.style.color = text;
      this.el.style.backgroundColor = background;
      document.body.style.backgroundColor = background;
      isDark = (window.getComputedStyle(this.el).color.split(/\D+/).filter(function(e) {
        return e;
      }).slice(0, 3).map(parseFloat).reduce((function(m, e) {
        return m + e / 255;
      }), 0)) / 3 < 0.3;
      return this.el.classList.toggle("text-dark", isDark);
    }
  };

  BaseSlidesView.prototype.setCustomCSS = function() {
    var css, ref1, ref2, ref3;
    if ((ref1 = this.options.config) != null ? ref1.enableCustomCSS : void 0) {
      css = (ref2 = this.options.config) != null ? ref2.customCSS : void 0;
      return (ref3 = this.el.querySelector("#custom-css")) != null ? ref3.innerHTML = css : void 0;
    }
  };

  BaseSlidesView.prototype.setBackgroundImage = function() {
    var backgroundEl, backgroundImage, ref1;
    backgroundEl = this.el.querySelector("#slides-background");
    backgroundImage = ((ref1 = this.options.config) != null ? ref1.background : void 0) != null ? "url(" + this.options.config.background + ")" : "";
    if (backgroundEl != null) {
      backgroundEl.style.backgroundImage = backgroundImage;
    }
    return document.body.style.backgroundImage = backgroundImage;
  };

  BaseSlidesView.prototype.initializeHtmlLang = function() {
    var ref1;
    return document.documentElement.lang = (ref1 = this.options.config) != null ? ref1.language : void 0;
  };

  BaseSlidesView.prototype.startTracking = function(slideView) {
    var id, name, ref1, ref2;
    if (this.durations == null) {
      this.durations = {};
    }
    this.stopTracking();
    Application.publish("event:slide-start")({
      slideId: slideView.id
    });
    id = (ref1 = slideView.options) != null ? ref1.id : void 0;
    name = slideView.getTrackingTitle() || ((ref2 = slideView.options) != null ? ref2.name : void 0);
    return this.durations[id] = [
      {
        start: Date.now(),
        end: null,
        name: name
      }
    ];
  };

  BaseSlidesView.prototype.pauseTracking = function() {
    var slideView, timestamps;
    slideView = this.getCurrentSlide();
    timestamps = this.durations[slideView.id];
    if (timestamps) {
      return timestamps[timestamps.length - 1].end = Date.now();
    }
  };

  BaseSlidesView.prototype.resumeTracking = function() {
    var slideView, timestamps;
    slideView = this.getCurrentSlide();
    timestamps = this.durations[slideView.id];
    if (timestamps) {
      return timestamps.push({
        start: Date.now(),
        end: null,
        name: name
      });
    }
  };

  BaseSlidesView.prototype.stopTracking = function() {
    var id, ref1, ref2, results, slideName, totalDuration;
    results = [];
    for (id in this.durations) {
      slideName = (ref1 = this.durations[id]) != null ? (ref2 = ref1[0]) != null ? ref2.name : void 0 : void 0;
      totalDuration = this.calculateDuration(id);
      delete this.durations[id];
      results.push(Session.get(function(err, arg) {
        var sessionId;
        sessionId = arg.sessionId;
        return Analytics.trackView({
          name: slideName,
          id: id,
          duration: totalDuration,
          session: sessionId
        });
      }));
    }
    return results;
  };

  BaseSlidesView.prototype.getCurrentSlide = function() {
    return this.slideViews[this.currentIndex];
  };

  BaseSlidesView.prototype.stopCurrentNarration = function() {
    if (this.narration != null) {
      return Sound.stop(this.narration);
    }
  };

  BaseSlidesView.prototype.onNarrationReject = function() {
    var slideView;
    slideView = this.getCurrentSlide();
    this.audioPopupEl.classList.remove("active");
    slideView.trigger("narration-complete");
    return slideView.setState("prompt");
  };

  BaseSlidesView.prototype.onNarrationAccept = function() {
    this.audioPopupEl.classList.remove("active");
    return this.playNarration(this.getCurrentSlide());
  };

  BaseSlidesView.prototype.playNarration = function(slideView) {
    var data, loaded, ref1, wait;
    this.stopCurrentNarration();
    window.clearTimeout(this.narrationTimeout);
    if (slideView.withoutNarration || this.options.withoutNarration) {
      return;
    }
    data = slideView != null ? slideView.serialize() : void 0;
    wait = 100;
    loaded = false;
    this.narration = (ref1 = data.narration) != null ? ref1.audio_file : void 0;
    if (this.narration) {
      Application.publish("event:narration-started")({
        can_not_be_skipped: data.narration.can_not_be_skipped
      });
      if (data.narration.can_not_be_skipped) {
        slideView.setState("narration");
        slideView.trigger("narration-progress", 0);
      }
      return this.narrationTimeout = window.setTimeout((function(_this) {
        return function() {
          var checkIfSoundHasPlayed;
          checkIfSoundHasPlayed = Sound.firstSoundPlayed || function(n) {
            return n(null, true);
          };
          return checkIfSoundHasPlayed(function(err, hasFirstSoundPlayed) {
            if (!hasFirstSoundPlayed) {
              return _this.audioPopupEl.classList.add("active");
            } else {
              return Sound.play(_this.narration, {
                cb: function() {},
                onProgress: function(e) {
                  if (!loaded) {
                    slideView.trigger("narration-loaded", e);
                    loaded = true;
                  }
                  return slideView.trigger("narration-progress", e);
                },
                onComplete: (function(startingSlide) {
                  return function(e) {
                    var ref2;
                    Application.publish("event:narration-completed")({
                      can_not_be_skipped: data.narration.can_not_be_skipped
                    });
                    if (data.narration.progress_on_completion && ((ref2 = _this.getCurrentSlide()) != null ? ref2.id : void 0) === (startingSlide != null ? startingSlide.id : void 0)) {
                      return slideView.next();
                    } else {
                      return slideView.trigger("narration-complete");
                    }
                  };
                })(_this.getCurrentSlide())
              });
            }
          });
        };
      })(this), wait);
    }
  };

  return BaseSlidesView;

})(Backbone.View);

module.exports = BaseSlidesView;
});

;require.register("views/components/draggy.coffee", function(exports, require, module) {

/*
  DraggyView abstracts dragging functionality across all Thomas's
  templates. It can be bound to a rectangle, locked on an axis or constrained
  to a cicle. It's important to note that DraggyView doesn't actually
  transform the element, it merely provides evented feedback of it's
  interaction. Listen to it's drag and drop events and manipulate the view as
  necessary, whether it be transforming a child, the view itself or adding
  dropping logic rules.

  Properties:
    draggy.x: Current x position
    draggy.y: Current y position
    draggy.t: Current rotation (theta) adjusted to the *top of the circle*

    These attributes are also available as data attributes on draggy.el.

    draggy.velocity:
      x: horizontal pixel movement per ms
      y: vertical pixel movement per ms
      t: angle of movement
      dir: "up", "right", "down", "left" or "none"

    Velocity is a measurement of movement occuring in the last 300ms.
    Use getVelocity(ms) to include movement over a different duration.

  Public methods:
    draggy.lock()
    draggy.unlock()
    draggy.isWithin(bounds[, buffer])
    draggy.isOver(bounds[, buffer])
    draggy.closest([bounds...])
    draggy.distanceTo(x, y[, opts])
    draggy.reset({x, y, t})
    draggy.getVelocity([ms])
    draggy.resetPosition()

  Events:
    drag: (draggy, isFirstDrag)
    drop: (draggy)

  Options:
    minX: Minimum x position
    maxX: Maximum x position
    minY: Minimum y position
    maxY: Maximum y position
    lock: "x" or "y"
    radius: Radius of circular bounds
    isParent: False if the element transforms, true if a child will instead
    allowPropagation: Stop immediate event propagation on touch start
 */
var AutoCursorRemoveDraggy, DraggyView, Easie, FULL_TURN, Prefix, QUARTER_TURN, getBounds, pointer,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Easie = require("lib/easie");

Prefix = require("lib/prefix");

getBounds = require("lib/element").getBounds;

pointer = require("lib/device").events.pointer;

QUARTER_TURN = Math.PI / 2;

FULL_TURN = Math.PI * 2;

DraggyView = (function(superClass) {
  extend(DraggyView, superClass);

  function DraggyView() {
    return DraggyView.__super__.constructor.apply(this, arguments);
  }

  DraggyView.prototype.initialize = function(options) {
    var base, base1, base2, base3, ref, ref1;
    this.options = options;
    if ((base = this.options).minX == null) {
      base.minX = -2e308;
    }
    if ((base1 = this.options).minY == null) {
      base1.minY = -2e308;
    }
    if ((base2 = this.options).maxX == null) {
      base2.maxX = 2e308;
    }
    if ((base3 = this.options).maxY == null) {
      base3.maxY = 2e308;
    }
    this.x = (ref = this.el.dataset) != null ? ref.x = 0 : void 0;
    this.y = (ref1 = this.el.dataset) != null ? ref1.y = 0 : void 0;
    this.velocity = {};
    return this.getOffset();
  };

  DraggyView.prototype.events = function() {
    var events;
    events = {
      "dragstart": "preventDefault"
    };
    events[pointer.start] = "onStart";
    return events;
  };

  DraggyView.prototype.bindExtra = function() {
    document.addEventListener(pointer.move, this, false);
    return document.addEventListener(pointer.end, this, false);
  };

  DraggyView.prototype.unbindExtra = function() {
    document.removeEventListener(pointer.move, this, false);
    return document.removeEventListener(pointer.end, this, false);
  };

  DraggyView.prototype.handleEvent = function(e) {
    switch (e.type) {
      case pointer.move:
        e.preventDefault();
        this.onMove(e);
        break;
      case pointer.end:
        this.onEnd(e);
        break;
    }
  };

  DraggyView.prototype.undelegateEvents = function() {
    this.unbindExtra();
    return DraggyView.__super__.undelegateEvents.apply(this, arguments);
  };

  DraggyView.prototype.onStart = function(e) {
    if (this.locked) {
      return;
    }
    if (!this.options.allowPropagation) {
      e.stopImmediatePropagation();
    }
    this.el.classList.add("active");
    this.el.style.zIndex = 99;
    this.el.style[Prefix("touchAction")] = "none";
    this.history = [];
    this.getOffset();
    this.getStart(e);
    this.onMove(e);
    return this.bindExtra();
  };

  DraggyView.prototype.onMove = function(e) {
    var _e, ref;
    e.preventDefault();
    _e = pointer.isTouch ? e.touches[0] : e;
    ref = this.constrain({
      x: _e.pageX - this.start.x,
      y: _e.pageY - this.start.y,
      buffer: 20
    }), this.x = ref.x, this.y = ref.y, this.t = ref.t;
    this.getVelocity();
    this.trigger("drag", this, e.type === pointer.start);
    return this.disableUserSelect();
  };

  DraggyView.prototype.disableUserSelect = function() {
    return document.body.classList.add("disable-select");
  };

  DraggyView.prototype.onEnd = function(e) {
    var ref;
    this.unbindExtra();
    ref = this.constrain({
      x: this.x,
      y: this.y,
      t: this.t,
      buffer: 0
    }), this.x = ref.x, this.y = ref.y, this.t = ref.t;
    this.el.dataset.x = this.x;
    this.el.dataset.y = this.y;
    this.el.dataset.t = this.t;
    this.el.classList.remove("active");
    this.el.style.zIndex = "";
    this.el.style[Prefix("touchAction")] = "";
    this.trigger("drop", this);
    return document.body.classList.remove("disable-select");
  };

  DraggyView.prototype.getOffset = function() {
    var bottom, height, left, ref, right, top, width;
    ref = this.el.getBoundingClientRect(), top = ref.top, left = ref.left, right = ref.right, bottom = ref.bottom, width = ref.width, height = ref.height;
    return this.offset = getBounds(this.el, {
      x: (this.options.isParent ? 0 : -this.x),
      y: (this.options.isParent ? 0 : -this.y)
    });
  };

  DraggyView.prototype.getStart = function(e) {
    var _e;
    _e = pointer.isTouch ? e.touches[0] : e;
    this.start = {
      x: _e.pageX - this.x,
      y: _e.pageY - this.y
    };
    if (this.options.isParent) {
      this.start.x += this.x + this.offset.left - _e.pageX;
      this.start.y += this.y + this.offset.top - _e.pageY;
    }
    if (this.options.radius) {
      this.start.x += this.options.radius;
      return this.start.y += this.options.radius;
    }
  };

  DraggyView.prototype.getVelocity = function(ms) {
    var dimension, dir, history, now, ref, t, velocity, x, y;
    if (ms == null) {
      ms = 300;
    }
    now = Date.now();
    this.history.push({
      x: this.x,
      y: this.y,
      timestamp: now
    });
    history = this.history.filter(function(p) {
      return now - p.timestamp < ms;
    });
    ref = (function() {
      var j, len, ref, results;
      ref = ["x", "y"];
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        dimension = ref[j];
        velocity = history.reduce((function(m, p1, i, a) {
          var p2;
          p2 = a[i - 1] || p1;
          return m + (p2[dimension] - p1[dimension]);
        }), 0);
        results.push(velocity / (now - history[0].timestamp));
      }
      return results;
    })(), x = ref[0], y = ref[1];
    t = -Math.atan2(x, y);
    dir = (function() {
      switch (Math.round(t / QUARTER_TURN)) {
        case 0:
          return "up";
        case 1:
          return "right";
        case 2:
        case -2:
          return "down";
        case -1:
          return "left";
        default:
          return "none";
      }
    })();
    return this.velocity = {
      x: x,
      y: y,
      t: t,
      dir: dir
    };
  };

  DraggyView.prototype.constrain = function(arg) {
    var buffer, lock, maxX, maxY, minX, minY, radius, ref, ref1, t, x, y;
    x = arg.x, y = arg.y, buffer = arg.buffer;
    ref = this.options, minX = ref.minX, minY = ref.minY, maxX = ref.maxX, maxY = ref.maxY, lock = ref.lock, radius = ref.radius;
    if (radius) {
      t = this.toAngle(x, y);
      ref1 = this.toPosition(t), x = ref1.x, y = ref1.y;
    } else {
      x = lock === "x" ? 0 : this.limit(x, minX, maxX, buffer);
      y = lock === "y" ? 0 : this.limit(y, minY, maxY, buffer);
    }
    return {
      x: x,
      y: y,
      t: t
    };
  };

  DraggyView.prototype.limit = function(value, min, max, buffer) {
    if (value < min) {
      return min - Easie.expoOut(min - value, 0, buffer, max - min);
    } else if (value > max) {
      return max + Easie.expoOut(value - max, 0, buffer, max - min);
    } else {
      return value;
    }
  };

  DraggyView.prototype.setPosition = function(arg) {
    var ref, ref1, t, x, y;
    ref = arg != null ? arg : {}, x = ref.x, y = ref.y, t = ref.t;
    if ((x != null) || (y != null) || (t == null)) {
      if (x == null) {
        x = 0;
      }
      if (y == null) {
        y = 0;
      }
      t = this.toAngle(x, y);
      if (t < 0) {
        t += FULL_TURN;
      }
    } else if (t != null) {
      ref1 = this.toPosition(t), x = ref1.x, y = ref1.y;
    }
    this.el.dataset.t = this.t = t;
    this.el.dataset.x = this.x = x;
    return this.el.dataset.y = this.y = y;
  };

  DraggyView.prototype.reset = function(arg) {
    var ref, t, x, y;
    ref = arg != null ? arg : {}, x = ref.x, y = ref.y, t = ref.t;
    this.setPosition({
      x: x,
      y: y,
      t: t
    });
    return this.trigger("drop", this, true);
  };

  DraggyView.prototype.resetPosition = function() {
    this.el.dataset.t = this.t = 0;
    this.el.dataset.x = this.x = 0;
    return this.el.dataset.y = this.y = 0;
  };

  DraggyView.prototype.toAngle = function(x, y) {
    return -Math.atan2(x, y) + Math.PI;
  };

  DraggyView.prototype.toPosition = function(t) {
    return {
      x: Math.cos(t - QUARTER_TURN) * this.options.radius,
      y: Math.sin(t - QUARTER_TURN) * this.options.radius
    };
  };

  DraggyView.prototype.lock = function() {
    this.locked = true;
    return this.el.classList.add("locked");
  };

  DraggyView.prototype.unlock = function() {
    this.locked = false;
    return this.el.classList.remove("locked");
  };

  DraggyView.prototype.isWithin = function(bounds, buffer) {
    var bottom, left, ref, right, top;
    if (buffer == null) {
      buffer = 0;
    }
    if (this.options.isParent) {
      left = top = right = bottom = 0;
    } else {
      ref = this.offset, left = ref.left, top = ref.top, right = ref.right, bottom = ref.bottom;
    }
    return left + this.x > bounds.left - buffer && right + this.x < bounds.right + buffer && top + this.y > bounds.top - buffer && bottom + this.y < bounds.bottom + buffer;
  };

  DraggyView.prototype.isOver = function(bounds, buffer) {
    var bottom, height, left, ref, right, top, width;
    left = bounds.left, top = bounds.top, right = bounds.right, bottom = bounds.bottom;
    ref = this.offset, width = ref.width, height = ref.height;
    left -= width;
    right += width;
    top -= height;
    bottom += height;
    return this.isWithin({
      left: left,
      top: top,
      right: right,
      bottom: bottom
    }, buffer);
  };

  DraggyView.prototype.closest = function(areas) {
    var a, ref;
    a = {
      xmin: this.offset.left + this.x,
      xmax: this.offset.left + this.x + this.offset.width,
      ymin: this.offset.top + this.y,
      ymax: this.offset.top + this.y + this.offset.height
    };
    return (ref = _.chain(areas).map(function(bounds) {
      return {
        xmin: bounds.left,
        xmax: bounds.left + bounds.width,
        ymin: bounds.top,
        ymax: bounds.top + bounds.height
      };
    }).map(function(b, index) {
      var area, dx, dy;
      dx = Math.min(a.xmax, b.xmax) - Math.max(a.xmin, b.xmin);
      dy = Math.min(a.ymax, b.ymax) - Math.max(a.ymin, b.ymin);
      if (dx >= 0 && dy >= 0) {
        area = dx * dy;
      }
      return {
        area: area,
        index: index
      };
    }).filter("area").sortBy("area").last().value()) != null ? ref.index : void 0;
  };

  DraggyView.prototype.distanceTo = function(x1, y1, arg) {
    var fromCenter, height, left, offsetX, offsetY, ref, ref1, top, width, x, y;
    ref = arg != null ? arg : {}, fromCenter = ref.fromCenter, offsetX = ref.offsetX, offsetY = ref.offsetY;
    ref1 = this.offset, left = ref1.left, top = ref1.top, width = ref1.width, height = ref1.height;
    if (offsetX == null) {
      offsetX = fromCenter ? left + width / 2 : 0;
    }
    if (offsetY == null) {
      offsetY = fromCenter ? top + height / 2 : 0;
    }
    x = x1 - (this.x + offsetX);
    y = y1 - (this.y + offsetY);
    return Math.sqrt(x * x + y * y);
  };

  DraggyView.prototype.preventDefault = function() {
    return false;
  };

  return DraggyView;

})(Backbone.View);

AutoCursorRemoveDraggy = (function(superClass) {
  extend(AutoCursorRemoveDraggy, superClass);

  function AutoCursorRemoveDraggy() {
    return AutoCursorRemoveDraggy.__super__.constructor.apply(this, arguments);
  }

  AutoCursorRemoveDraggy.prototype.bindExtra = function() {
    AutoCursorRemoveDraggy.__super__.bindExtra.apply(this, arguments);
    return document.addEventListener('mouseout', this, false);
  };

  AutoCursorRemoveDraggy.prototype.unbindExtra = function() {
    AutoCursorRemoveDraggy.__super__.unbindExtra.apply(this, arguments);
    return document.removeEventListener('mouseout', this, false);
  };

  AutoCursorRemoveDraggy.prototype.handleEvent = function(e) {
    AutoCursorRemoveDraggy.__super__.handleEvent.apply(this, arguments);
    if (e.type === 'mouseout') {
      return this.onEnd(e);
    }
  };

  return AutoCursorRemoveDraggy;

})(DraggyView);

module.exports = {
  DraggyView: DraggyView,
  AutoCursorRemoveDraggy: AutoCursorRemoveDraggy
};
});

;require.register("views/components/lesson-menu.coffee", function(exports, require, module) {
var LessonMenuView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

LessonMenuView = (function(superClass) {
  extend(LessonMenuView, superClass);

  function LessonMenuView() {
    return LessonMenuView.__super__.constructor.apply(this, arguments);
  }

  LessonMenuView.prototype.events = {
    "iostap #lesson-menu-exit": "exit",
    "iostap #lesson-menu-go-back": "back",
    "iostap #lesson-menu-restart": "restart",
    "iostap #lesson-menu-cancel": "close"
  };

  LessonMenuView.prototype.initialize = function(options) {
    this.options = options;
    return this.pageNumber = this.el.querySelector("#lesson-menu-page-count");
  };

  LessonMenuView.prototype.open = function() {
    return this.el.classList.add("active");
  };

  LessonMenuView.prototype.close = function() {
    return this.el.classList.remove("active");
  };

  LessonMenuView.prototype.exit = function() {
    this.options.exit();
    Backbone.Events.trigger("application-exit");
    return Application.publish("event:menu-exit")({});
  };

  LessonMenuView.prototype.back = function() {
    this.options.back();
    return this.close();
  };

  LessonMenuView.prototype.restart = function() {
    this.options.restart();
    return this.close();
  };

  LessonMenuView.prototype.updateStyle = function(arg) {
    var background, colors, image, ref, ref1, text;
    ref = arg != null ? arg : {}, colors = ref.colors, background = ref.background;
    image = background != null ? "url(" + background + ")" : "";
    ref1 = colors || {}, text = ref1.text, background = ref1.background;
    this.el.style.backgroundImage = image;
    this.el.style.backgroundColor = background;
    return this.el.style.color = text;
  };

  LessonMenuView.prototype.setPage = function(index) {
    var total;
    total = this.pageNumber.dataset.total;
    if (this.options.isQuiz) {
      this.pageNumber.innerHTML = window.marked(i18n("menu.brainboost-page-count", {
        index: index + 1,
        total: total
      }));
    } else {
      this.pageNumber.innerHTML = window.marked(i18n("menu.page-count", {
        index: index + 1,
        total: total
      }));
    }
    $(this.el).removeClass(function(index, classes) {
      return (classes.match(/page-\d+/g) || []).join(" ");
    });
    return this.el.classList.add("page-" + (this.currentIndex = index));
  };

  return LessonMenuView;

})(Backbone.View);

module.exports = LessonMenuView;
});

;require.register("views/components/menu.coffee", function(exports, require, module) {
var MenuView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

MenuView = (function(superClass) {
  extend(MenuView, superClass);

  function MenuView() {
    return MenuView.__super__.constructor.apply(this, arguments);
  }

  MenuView.prototype.events = function() {};

  MenuView.prototype.show = function() {
    return this.el.classList.add("show");
  };

  MenuView.prototype.hide = function() {
    return this.el.classList.remove("show");
  };

  return MenuView;

})(Backbone.View);

module.exports = MenuView;
});

;require.register("views/components/picker.coffee", function(exports, require, module) {

/*
  PickerView stores the value of a picker element, handles interaction and
  a scrolling element. While it doesn't apply transforms to the scroller, it
  provides feedback via a "change" event allowing manipulation by it's parent.

  Properties:
    picker.value: Current value of the picker

    This attribute is also available as a data attribute on picker.el.

  Public methods:
    picker.toggleUp(boolean)
    picker.toggleDown(boolean)
    picker.setBy(diff)

  Events:
    change: (picker, isIncreasing)

  Options:
    value: Initial value of the picker
 */
var PickerView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

PickerView = (function(superClass) {
  extend(PickerView, superClass);

  function PickerView() {
    return PickerView.__super__.constructor.apply(this, arguments);
  }

  PickerView.prototype.initialize = function(options) {
    this.options = options;
    this.value = this.el.dataset.value = this.options.value;
    this.scroller = this.el.querySelector(".number-picker-nums-scroller");
    return this.getOffset();
  };

  PickerView.prototype.events = function() {
    return {
      "iostap .number-picker-arr-up": "onTapUp",
      "iostap .number-picker-arr-down": "onTapDown"
    };
  };

  PickerView.prototype.setBy = function(diff) {
    var value;
    value = this.value + diff;
    if (value > 9) {
      value = 0;
    }
    if (value < 0) {
      value = 9;
    }
    this.value = this.el.dataset.value = value;
    return this.trigger("change", this, diff);
  };

  PickerView.prototype.onTapUp = function() {
    return this.setBy(1, true);
  };

  PickerView.prototype.onTapDown = function() {
    return this.setBy(-1, false);
  };

  PickerView.prototype.toggleUp = function(enabled) {
    return this.el.classList.toggle("disabled-up", enabled);
  };

  PickerView.prototype.toggleDown = function(enabled) {
    return this.el.classList.toggle("disabled-down", enabled);
  };

  PickerView.prototype.getOffset = function() {
    var el;
    el = this.el.querySelector(".number-picker-nums");
    return this.offset = {
      width: el.offsetWidth,
      height: el.offsetHeight
    };
  };

  return PickerView;

})(Backbone.View);

module.exports = PickerView;
});

;require.register("views/components/slide-answer.coffee", function(exports, require, module) {
var DraggyView, SlideAnswerView, ref, transform, transition,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

DraggyView = require("views/components/draggy").DraggyView;

ref = require("lib/element"), transform = ref.transform, transition = ref.transition;

SlideAnswerView = (function(superClass) {
  extend(SlideAnswerView, superClass);

  function SlideAnswerView() {
    return SlideAnswerView.__super__.constructor.apply(this, arguments);
  }

  SlideAnswerView.prototype.template = require("templates/components/engine/slide-answer");

  SlideAnswerView.prototype.events = function() {
    return {
      "touchstart #slide-answer-details .content-scroll": "toggleDraggy",
      "touchmove  #slide-answer-details .content-scroll": "toggleDraggy",
      "touchend   #slide-answer-details .content-scroll": "toggleDraggy"
    };
  };

  SlideAnswerView.prototype.initialize = function() {
    this.draggy = new DraggyView({
      el: this.el,
      lock: "x",
      minY: 0,
      maxY: this.el.offsetHeight,
      isParent: false,
      allowPropagation: true
    });
    this.toggle(false);
    this.listenTo(this.draggy, "drag", this.onDrag);
    return this.listenTo(this.draggy, "drop", this.onDrop);
  };

  SlideAnswerView.prototype.render = function(data) {
    if (data == null) {
      data = {};
    }
    data = _.extend({}, typogr, data);
    this.el.classList.toggle("has-takeaway", data.answer.takeaway);
    this.el.innerHTML = this.template(data);
    this.draggy.getOffset();
    return this.draggy.options.maxY = this.el.offsetHeight;
  };

  SlideAnswerView.prototype.onDrag = function(draggy, isInitial) {
    return transform(draggy.el, {
      y: draggy.y,
      opacity: 1 - (draggy.y / draggy.options.maxY) / 6,
      transition: isInitial ? "all 300ms" : "none"
    });
  };

  SlideAnswerView.prototype.onDrop = function(draggy, isReset) {
    if (!isReset) {
      return draggy.reset();
    } else {
      return transform(draggy.el, {
        y: draggy.y,
        opacity: 1,
        transition: "all 300ms"
      });
    }
  };

  SlideAnswerView.prototype.toggle = function(enabled) {
    if (enabled) {
      this.draggy.unlock();
    } else {
      this.draggy.lock();
    }
    transition(this.el, "all 300ms " + (enabled ? 600 : 0) + "ms", true);
    return transform(this.el, {
      y: enabled ? 0 : "100%"
    });
  };

  SlideAnswerView.prototype.destroy = function() {
    this.draggy.undelegateEvents();
    this.draggy = null;
    return this.undelegateEvents();
  };

  SlideAnswerView.prototype.toggleDraggy = function(e) {
    if (e.currentTarget.scrollHeight > e.currentTarget.offsetHeight) {
      e.stopImmediatePropagation();
    }
    return true;
  };

  return SlideAnswerView;

})(Backbone.View);

module.exports = SlideAnswerView;
});

;require.register("views/components/social-learning.coffee", function(exports, require, module) {
var CommentCollection, DEFAULT_COMMENT_LENGTH, PAGE_SIZE, SocialLearningView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CommentCollection = require("collections/comments");

PAGE_SIZE = 10;

DEFAULT_COMMENT_LENGTH = 140;

SocialLearningView = (function(superClass) {
  extend(SocialLearningView, superClass);

  function SocialLearningView() {
    return SocialLearningView.__super__.constructor.apply(this, arguments);
  }

  SocialLearningView.prototype.templates = {
    list: require("templates/components/engine/social-learning-comments")
  };

  SocialLearningView.prototype.events = {
    "open": "open",
    "exit": "exit",
    "iostap": "exit",
    "iostap .comment-like": "likeComment",
    "iostap .comment-flag": "flagComment",
    "iostap .comment-delete": "deleteComment",
    "iostap .comment": "toggleComment",
    "focus #social-view-input-text": "onFocus",
    "iostap #social-view-start": "openInput",
    "iostap #social-view-input-confirm": "addComment",
    "iostap #social-view-input-cancel": "closeInput",
    "input #social-view-input-text": "onChangeText"
  };

  SocialLearningView.prototype.initialize = function() {
    this.eventSuffix = "";
    this.listenTo(Backbone.Events, "open-social-learning", (function(_this) {
      return function(arg) {
        var contentId, peerAuthoring, slide;
        slide = arg.slide, peerAuthoring = arg.peerAuthoring, contentId = arg.contentId;
        return _this.open(slide, void 0, peerAuthoring, contentId);
      };
    })(this));
    if (!this.el) {
      return;
    }
    if (window.navigator.userAgent.match(/iP(ad|hone|od)/)) {
      this.el.classList.add("is-ios");
    }
    return this.elements = {
      list: this.el.querySelector("#social-view-messages-list"),
      input: this.el.querySelector("#social-view-input-text"),
      title: this.el.querySelector("#social-view-input-title"),
      limit: this.el.querySelector("#social-view-input-limit"),
      count: this.el.querySelector("#social-view-input-slide-count")
    };
  };

  SocialLearningView.prototype.open = function(slide1, comments, peerAuthoring1, contentId1) {
    this.slide = slide1;
    this.peerAuthoring = peerAuthoring1;
    this.contentId = contentId1;
    if (this.peerAuthoring) {
      this.eventSuffix = "-pa";
    } else {
      this.eventSuffix = "";
    }
    if (!this.peerAuthoring && comments.length < PAGE_SIZE) {
      this.isNoMoreComments = true;
    } else {
      this.isNoMoreComments = false;
    }
    this.id = this.slide.id;
    this.comments = new CommentCollection();
    if (comments) {
      this.comments.add(comments);
    }
    this.listenTo(this.comments, "change add remove", this.renderComments);
    this.renderComments();
    this.renderSlideData();
    if (this.peerAuthoring) {
      this.getMoreComments();
    }
    this.el.classList.add("visible");
    this.trigger("open");
    this.elements.list.addEventListener("scroll", this);
    return this.showtimeout = window.setTimeout(((function(_this) {
      return function() {
        _this.active = true;
        return _this.el.classList.add("active");
      };
    })(this)), 300);
  };

  SocialLearningView.prototype.updateComments = function(comments, hasMore) {
    if (hasMore) {
      this.isNoMoreComments = false;
    }
    if (this.comments) {
      return this.comments.set(comments);
    }
  };

  SocialLearningView.prototype.renderComments = function() {
    var commentThreadHtml, comments, isEmoji, rx;
    if (!this.comments) {
      return;
    }
    comments = this.comments.toJSON();
    rx = /^(\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67|\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74)\uDB40\uDC7F|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC68(?:\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|[\u2695\u2696\u2708]\uFE0F|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92])|(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2695\u2696\u2708]\uFE0F|(?:\uD83C[\uDFFB-\uDFFF])\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]))|\uD83D\uDC69\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92])|\uD83D\uDC69\u200D\uD83D\uDC66\u200D\uD83D\uDC66|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2695\u2696\u2708]|(?:(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)\uFE0F|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF])\u200D[\u2640\u2642]|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDD6-\uDDDD])(?:(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|\u200D[\u2640\u2642])|\uD83D\uDC69\u200D[\u2695\u2696\u2708])\uFE0F|\uD83D\uDC69\u200D\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D\uDC68(?:\u200D(?:(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D[\uDC66\uDC67])|\uD83C[\uDFFB-\uDFFF])|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|\uD83D\uDC69\u200D\uD83D\uDC67|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92])|\uD83D\uDC69\u200D\uD83D\uDC66|\uD83C\uDDF4\uD83C\uDDF2|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF6\uD83C\uDDE6|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|[#\*0-9]\uFE0F\u20E3|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270A-\u270D]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC70\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDCAA\uDD74\uDD7A\uDD90\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD36\uDDD1-\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC69\uDC6E\uDC70-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD18-\uDD1C\uDD1E\uDD1F\uDD26\uDD30-\uDD39\uDD3D\uDD3E\uDDD1-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])?|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDEEB\uDEEC\uDEF4-\uDEF8]|\uD83E[\uDD10-\uDD3A\uDD3C-\uDD3E\uDD40-\uDD45\uDD47-\uDD4C\uDD50-\uDD6B\uDD80-\uDD97\uDDC0\uDDD0-\uDDE6])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u2660\u2663\u2665\u2666\u2668\u267B\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEF8]|\uD83E[\uDD10-\uDD3A\uDD3C-\uDD3E\uDD40-\uDD45\uDD47-\uDD4C\uDD50-\uDD6B\uDD80-\uDD97\uDDC0\uDDD0-\uDDE6])\uFE0F)+$/;
    isEmoji = function(msg) {
      return msg.length < 16 && msg.match(rx);
    };
    this.isLoading = false;
    this.el.classList.remove("is-loading");
    commentThreadHtml = this.templates.list({
      comments: comments,
      isEmoji: isEmoji,
      peerAuthoring: this.peerAuthoring,
      isNoMoreComments: this.isNoMoreComments
    });
    return $(this.elements.list).html(commentThreadHtml);
  };

  SocialLearningView.prototype.renderSlideData = function() {
    var limit, ref, ref1;
    if ((ref = this.slide.lesson) != null ? ref.configuration : void 0) {
      $(this.elements.title).html(this.slide.lesson.configuration.title || "");
      $(this.elements.count).html([this.getCurrentPage() + 1, this.slide.lesson.configuration.slides.length].join(" / "));
      limit = ((ref1 = this.slide.options.data.socialLearning) != null ? ref1.maxResponseLength : void 0) || 140;
      $(this.elements.limit).html(limit);
      return this.el.classList.toggle("has-limit", limit > 0);
    }
  };

  SocialLearningView.prototype.exit = function(e) {
    if ((e != null ? e.target : void 0) === this.el || !(e != null ? e.target : void 0)) {
      window.clearTimeout(this.showtimeout);
      if (document.activeElement) {
        document.activeElement.blur();
      }
      this.active = false;
      this.elements.input.value = "";
      this.elements.list.removeEventListener("scroll", this);
      this.el.classList.remove("active");
      this.el.classList.remove("visible");
      this.trigger("exit");
      return Backbone.Events.trigger("social-learning:exit");
    }
  };

  SocialLearningView.prototype.onBlur = function() {
    if (!this.active) {
      return;
    }
    return this.exit();
  };

  SocialLearningView.prototype.toggleComment = function(e) {
    var el, ref;
    el = e.currentTarget;
    el.classList.toggle("is-selected");
    if (el !== this.elements.activeComment) {
      if ((ref = this.elements.activeComment) != null) {
        ref.classList.remove("is-selected");
      }
    }
    if (el.classList.contains("is-selected")) {
      return this.elements.activeComment = el;
    } else {
      return delete this.elements.activeComment;
    }
  };

  SocialLearningView.prototype.likeComment = function(e) {
    var like;
    e.stopImmediatePropagation();
    like = this.comments.like(this.id, e.currentTarget.dataset.id);
    if (like) {
      return Application.publish("event:like-comment" + this.eventSuffix)({
        slideId: this.id,
        commentId: e.currentTarget.dataset.id,
        contentId: this.contentId
      });
    } else {
      return Application.publish("event:unlike-comment" + this.eventSuffix)({
        slideId: this.id,
        commentId: e.currentTarget.dataset.id,
        contentId: this.contentId
      });
    }
  };

  SocialLearningView.prototype.flagComment = function(e) {
    var updated;
    e.stopImmediatePropagation();
    updated = this.comments.flag(e.currentTarget.dataset.id);
    if (updated) {
      return Application.publish("event:flag-comment" + this.eventSuffix)({
        slideId: this.id,
        commentId: e.currentTarget.dataset.id,
        contentId: this.contentId
      });
    }
  };

  SocialLearningView.prototype.deleteComment = function(e) {
    e.stopImmediatePropagation();
    return Application.publish("event:delete-comment" + this.eventSuffix)({
      slideId: this.id,
      commentId: e.currentTarget.dataset.id,
      contentId: this.contentId
    });
  };

  SocialLearningView.prototype.openInput = function(e) {
    this.el.classList.add("is-input-mode");
    return this.elements.input.focus();
  };

  SocialLearningView.prototype.onFocus = function() {
    return window.setTimeout((function() {
      return Application.publish("event:scroll-to-top" + this.eventSuffix)();
    }), 400);
  };

  SocialLearningView.prototype.handleEvent = function(e) {
    switch (e.type) {
      case "scroll":
        return this.onScroll(e);
    }
  };

  SocialLearningView.prototype.onScroll = function(e) {
    if (e.target.scrollTop >= e.target.scrollHeight - e.target.offsetHeight) {
      return this.getMoreComments();
    } else if (e.target.scrollTop > 0) {
      this.elements.list.firstChild.style.transform = "translate3d(0,0,0)";
      this.elements.list.firstChild.offsetHeight;
      return this.elements.list.firstChild.style.transform = "";
    }
  };

  SocialLearningView.prototype.closeInput = function() {
    this.el.classList.remove("is-input-mode");
    return this.elements.input.blur();
  };

  SocialLearningView.prototype.addComment = function() {
    var maxLength, message, ref, ref1, ref2, ref3;
    message = this.elements.input.value;
    maxLength = ((ref = this.slide.options) != null ? (ref1 = ref.data) != null ? (ref2 = ref1.socialLearning) != null ? ref2.maxResponseLength : void 0 : void 0 : void 0) || 5000;
    if (((ref3 = this.comment) != null ? ref3.length : void 0) >= PAGE_SIZE - 1) {
      this.isNoMoreComments = false;
    }
    if (message && message.length <= maxLength) {
      this.elements.input.value = "";
      this.updateCharacterCount();
      this.closeInput();
      return Application.publish("event:add-comment" + this.eventSuffix)({
        message: message,
        slideId: this.id,
        contentId: this.contentId
      });
    } else {
      return console.log("character too many! expect " + maxLength + " got: " + message.length + " ");
    }
  };

  SocialLearningView.prototype.getMoreComments = function() {
    if (!this.isLoading && !this.isNoMoreComments) {
      this.isLoading = true;
      this.el.classList.add("is-loading");
      return Application.publish("event:more-comment" + this.eventSuffix)({
        slideId: this.id,
        contentId: this.contentId
      });
    }
  };

  SocialLearningView.prototype.onChangeText = function(e) {
    if (!this.active) {
      return;
    }
    return this.updateCharacterCount();
  };

  SocialLearningView.prototype.updateCharacterCount = function() {
    var limit, ref, value;
    value = this.elements.input.value;
    limit = ((ref = this.slide.options.data.socialLearning) != null ? ref.maxResponseLength : void 0) || DEFAULT_COMMENT_LENGTH;
    if (limit > 0) {
      $(this.elements.limit).html(limit - value.length);
      return this.el.classList.toggle("over-limit", limit - value.length < 0);
    } else {
      return this.el.classList.remove("over-limit");
    }
  };

  return SocialLearningView;

})(Backbone.View);

module.exports = SocialLearningView;
});

;require.register("views/components/text-input.coffee", function(exports, require, module) {
var TextInputView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

TextInputView = (function(superClass) {
  extend(TextInputView, superClass);

  function TextInputView() {
    return TextInputView.__super__.constructor.apply(this, arguments);
  }

  TextInputView.prototype.events = {
    "open": "open",
    "exit": "exit",
    "iostap #text-input-dismiss-btn": "onBlur",
    "input #text-input-area": "onChange",
    "touchmove": "lockScroll"
  };

  TextInputView.prototype.initialize = function() {
    if (!this.el) {
      return;
    }
    if (window.navigator.userAgent.match(/iP(ad|hone|od)/)) {
      this.el.classList.add("is-ios");
    }
    return this.elements = {
      input: this.el.querySelector("#text-input-area"),
      title: this.el.querySelector("#text-input-title"),
      prompt: this.el.querySelector("#text-input-prompt"),
      total: this.el.querySelector("#text-input-count-total"),
      current: this.el.querySelector("#text-input-count-current")
    };
  };

  TextInputView.prototype.open = function(e, options) {
    var ref;
    this.options = options != null ? options : {};
    this.border = document.body.scrollTop;
    this.el.classList.add("visible");
    this.el.classList.toggle("has-min", this.options.min > 0);
    this.elements.input.value = this.options.value || "";
    this.elements.current.innerHTML = ((ref = this.options.value) != null ? ref.length : void 0) || 0;
    this.elements.total.innerHTML = this.options.min || 0;
    this.elements.prompt.innerHTML = this.options.prompt || "";
    return this.showtimeout = window.setTimeout(((function(_this) {
      return function() {
        _this.active = true;
        _this.onChange();
        _this.elements.input.focus();
        _this.lockScroll();
        _this.el.classList.add("active");
        return _this.el.style.borderTop = _this.el.style.borderBottom = _this.border + "px";
      };
    })(this)), 300);
  };

  TextInputView.prototype.exit = function() {
    window.clearTimeout(this.showtimeout);
    document.activeElement.blur();
    this.active = false;
    this.el.classList.remove("active");
    this.el.classList.remove("visible");
    return this.trigger("exit");
  };

  TextInputView.prototype.onBlur = function() {
    if (!this.active) {
      return;
    }
    return this.exit();
  };

  TextInputView.prototype.onChange = function(e) {
    var value;
    if (!this.active) {
      return;
    }
    value = this.elements.input.value;
    window.clearTimeout(this.changetimeout);
    this.changetimeout = window.setTimeout(((function(_this) {
      return function() {
        return _this.$el.trigger("update", value);
      };
    })(this)), 100);
    this.elements.current.innerHTML = value.length;
    return this.el.classList.toggle("is-complete", value.length >= this.options.min);
  };

  TextInputView.prototype.lockScroll = function(e) {
    var ref;
    if (this.active) {
      if ((e != null ? e.target : void 0) !== this.elements.input) {
        if (e != null) {
          e.preventDefault();
        }
      }
      if ((ref = document.scrollingElement) != null) {
        ref.scrollTop = this.border;
      }
      return document.body.scrollTop = this.border;
    }
  };

  return TextInputView;

})(Backbone.View);

module.exports = TextInputView;
});

;require.register("views/components/zoom.coffee", function(exports, require, module) {
var Easie, Element, ZoomView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Element = require("lib/element");

Easie = require("lib/easie");

ZoomView = (function(superClass) {
  extend(ZoomView, superClass);

  function ZoomView() {
    return ZoomView.__super__.constructor.apply(this, arguments);
  }

  ZoomView.prototype.initialize = function(options) {
    var base, base1, base2, base3, base4;
    this.options = options;
    this.x = this.y = 0;
    this.getOffset();
    if ((base = this.options).minScale == null) {
      base.minScale = 0.5;
    }
    if ((base1 = this.options).maxScale == null) {
      base1.maxScale = 1.0;
    }
    if ((base2 = this.options).buffer == null) {
      base2.buffer = 0.1;
    }
    if ((base3 = this.options).contentWidth == null) {
      base3.contentWidth = this.offset.width;
    }
    if ((base4 = this.options).contentHeight == null) {
      base4.contentHeight = this.offset.height;
    }
    this.velocity = {};
    this.scale = this.options.minScale;
    return this.transform();
  };

  ZoomView.prototype.events = function() {
    return {
      "touch:gesture": "onGesture",
      "touch:drag": "onDrag",
      "touch:dbltap": "onDoubleTap"
    };
  };

  ZoomView.prototype.transform = function(isEnd) {
    var buffer, change, cscale, maxH, maxScale, maxW, minScale, ref;
    ref = this.options, minScale = ref.minScale, maxScale = ref.maxScale, buffer = ref.buffer;
    cscale = Math.max(this.scale, this.options.minScale);
    change = -(this.options.minScale - cscale) / cscale;
    if (isEnd) {
      this.scale = Math.max(Math.min(this.scale, maxScale), minScale);
      this.isZoomed = this.scale > minScale;
      maxW = this.options.contentWidth / 2 * this.scale;
      maxH = this.options.contentHeight / 2 * this.scale;
      this.x = Math.max(Math.min(this.x, maxW), -maxW);
      this.y = Math.max(Math.min(this.y, maxH), -maxH);
      this.trigger("zoom", this);
    }
    return Element.transform(this.el.firstChild, {
      x: this.x * change,
      y: this.y * change,
      scale: this.scale,
      transition: isEnd ? "all 400ms" : "none"
    });
  };

  ZoomView.prototype.getOffset = function() {
    var bottom, height, left, ref, right, top, width;
    ref = this.el.getBoundingClientRect(), top = ref.top, left = ref.left, right = ref.right, bottom = ref.bottom, width = ref.width, height = ref.height;
    return this.offset = {
      top: top,
      left: left,
      right: right,
      bottom: bottom,
      width: width,
      height: height
    };
  };

  ZoomView.prototype.set = function(arg) {
    var scale, transition, x, y;
    scale = arg.scale, x = arg.x, y = arg.y, transition = arg.transition;
    if (scale != null) {
      this.scale = scale;
    }
    if (x != null) {
      this.x = x;
    }
    if (y != null) {
      this.y = y;
    }
    return this.transform(transition);
  };

  ZoomView.prototype.onDoubleTap = function(arg) {
    var buffer, detail, maxScale, minScale, ref, x, y;
    detail = arg.detail;
    ref = this.options, minScale = ref.minScale, maxScale = ref.maxScale, buffer = ref.buffer;
    x = detail.x, y = detail.y;
    if (this.scale === maxScale) {
      this.scale = minScale;
    } else {
      this.scale += Math.max((maxScale - minScale) / 2, 0.2);
    }
    this.x = x * this.scale;
    this.y = y * this.scale;
    return this.transform(true);
  };

  ZoomView.prototype.onDrag = function(arg) {
    var buffer, destX, destY, detail, didMove, distX, distY, distance, duration, maxH, maxScale, maxW, minScale, origin, ref, repeat, start, state, timestamp, x, y;
    detail = arg.detail;
    ref = this.options, minScale = ref.minScale, maxScale = ref.maxScale, buffer = ref.buffer;
    x = detail.x, y = detail.y, start = detail.start, state = detail.state;
    didMove = x !== start.x || y !== start.y;
    if (state === "down") {
      window.clearTimeout(this.momentum);
      this.origin = {
        x: this.x - x,
        y: this.y - y
      };
      return this.history = [];
    } else if (didMove) {
      this.x = this.origin.x + x;
      this.y = this.origin.y + y;
      this.getVelocity();
      if (state === "move") {
        return this.transform(false);
      } else if (state === "up" && (this.velocity.x || this.velocity.y)) {
        timestamp = Date.now();
        duration = 400;
        distance = 600;
        origin = {
          x: this.x,
          y: this.y
        };
        maxW = this.options.contentWidth / 2 * this.scale;
        maxH = this.options.contentHeight / 2 * this.scale;
        destX = this.x - this.velocity.x * this.scale * distance;
        destY = this.y - this.velocity.y * this.scale * distance;
        distX = Math.max(Math.min(destX, maxW), -maxW) - origin.x;
        distY = Math.max(Math.min(destY, maxH), -maxH) - origin.y;
        return (repeat = (function(_this) {
          return function() {
            var diff;
            diff = Math.min(Date.now() - timestamp, duration);
            if (diff < duration) {
              _this.x = Easie.cubicOut(diff, origin.x, distX, duration);
              _this.y = Easie.cubicOut(diff, origin.y, distY, duration);
              _this.transform(false);
              return _this.momentum = window.setTimeout(repeat, 1000 / 60);
            } else {
              return _this.transform(true);
            }
          };
        })(this))();
      }
    }
  };

  ZoomView.prototype.onGesture = function(arg) {
    var buffer, detail, max, maxScale, min, minScale, ref, scale, state, x, y;
    detail = arg.detail;
    ref = this.options, minScale = ref.minScale, maxScale = ref.maxScale, buffer = ref.buffer;
    x = detail.x, y = detail.y, scale = detail.scale, state = detail.state;
    if (state === "start") {
      window.clearTimeout(this.momentum);
      this.origin = {
        x: this.x - x,
        y: this.y - y,
        scale: this.scale - scale
      };
    } else {
      this.x = this.origin.x + x;
      this.y = this.origin.y + y;
    }
    min = minScale - buffer;
    max = maxScale + buffer;
    this.scale = Math.max(Math.min(this.origin.scale + scale, max), min);
    return this.transform(state === "end");
  };

  ZoomView.prototype.getVelocity = function(ms) {
    var dimension, history, now, ref, velocity, x, y;
    if (ms == null) {
      ms = 200;
    }
    now = Date.now();
    this.history.push({
      x: this.x,
      y: this.y,
      timestamp: now
    });
    history = this.history.filter(function(p) {
      return now - p.timestamp < ms;
    });
    ref = (function() {
      var j, len, ref, results;
      ref = ["x", "y"];
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        dimension = ref[j];
        velocity = history.reduce((function(m, p1, i, a) {
          var p2;
          p2 = a[i - 1] || p1;
          return m + (p2[dimension] - p1[dimension]);
        }), 0);
        results.push(velocity / (now - history[0].timestamp));
      }
      return results;
    })(), x = ref[0], y = ref[1];
    return this.velocity = {
      x: x,
      y: y
    };
  };

  return ZoomView;

})(Backbone.View);

module.exports = ZoomView;
});

;require.register("views/game.coffee", function(exports, require, module) {
var GameView, ScoreModel, SlideView, TimerModel,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SlideView = require("views/slide");

TimerModel = require("models/game/timer");

ScoreModel = require("models/game/score");

GameView = (function(superClass) {
  extend(GameView, superClass);

  function GameView() {
    return GameView.__super__.constructor.apply(this, arguments);
  }

  GameView.prototype.initialize = function() {
    GameView.__super__.initialize.apply(this, arguments);
    this.el.classList.add("game-slide");
    return this.createModels();
  };

  GameView.prototype.serialize = function() {
    var data;
    data = GameView.__super__.serialize.apply(this, arguments);
    return _.extend(data, {
      hasTimeLimit: this.hasTimeLimit()
    });
  };

  GameView.prototype.createModels = function() {
    var Model, base, key, models, options, ref, ref1, results;
    if (this.game == null) {
      this.game = {};
    }
    models = {
      timer: TimerModel,
      score: ScoreModel,
      extra: Backbone.Model
    };
    results = [];
    for (key in models) {
      Model = models[key];
      if ((ref = this.game[key]) != null) {
        if (typeof (base = ref.off()).destroy === "function") {
          base.destroy();
        }
      }
      options = ((ref1 = this.options.data.game) != null ? ref1[key] : void 0) || {};
      results.push(this.game[key] = new Model(options));
    }
    return results;
  };

  GameView.prototype.show = function() {
    this.setState("intro", "game");
    this.listenTo(this.game.timer, "change", this.onTimerChange);
    this.listenTo(this.game.score, "change", this.onScoreChange);
    return Application.publish("event:slide-rendered")({});
  };

  GameView.prototype.hide = function() {
    var ref;
    this.stopListening();
    if ((ref = this.game.timer) != null) {
      ref.destroy();
    }
    this.setState(false, "game");
    return this.trackEvent({
      category: "Game",
      action: "Record",
      label: this.game.score.get("record")
    });
  };

  GameView.prototype.onRefresh = function() {
    var ref;
    if ((ref = this.game.timer) != null) {
      ref.clearTimers();
    }
    this.el.classList.remove("game-count-down", "game-paused", "game-playing");
    this.createModels();
    this.show();
    return this.preloadMedia();
  };

  GameView.prototype.enterGame = function() {
    if (!this.options.data) {
      this.lock();
    }
    this.setState("playing", "game");
    this.game.score.trigger("reset");
    this.game.timer.trigger("reset");
    if (this.hasTimeLimit()) {
      return this.game.timer.trigger("count", {
        callback: (function(_this) {
          return function() {
            return _this.startGame();
          };
        })(this)
      });
    } else {
      return window.setTimeout((function(_this) {
        return function() {
          return _this.startGame();
        };
      })(this), 0);
    }
  };

  GameView.prototype.startGame = function() {
    var callback, ref;
    if (this.hasTimeLimit()) {
      callback = (function(_this) {
        return function() {
          return _this.endGame();
        };
      })(this);
    } else {
      callback = (function(_this) {
        return function() {
          return _this.game.timer.trigger("stop");
        };
      })(this);
    }
    return (ref = this.game.timer) != null ? ref.trigger("start", {
      callback: callback
    }) : void 0;
  };

  GameView.prototype.endGame = function() {
    this.setState("outro", "game");
    window.setTimeout((function(_this) {
      return function() {
        return _this.game.score.trigger("tally", {
          callback: function() {
            return _this.afterAnimateScores();
          }
        });
      };
    })(this), 0);
    return this.game.timer.trigger("stop");
  };

  GameView.prototype.pauseGame = function() {
    return this.game.timer.set({
      paused: true
    });
  };

  GameView.prototype.unpauseGame = function() {
    return this.game.timer.set({
      paused: false
    });
  };

  GameView.prototype.togglePaused = function() {
    return this.game.timer.set({
      paused: !this.game.timer.get("paused")
    });
  };

  GameView.prototype.afterAnimateScores = function() {
    if (!this.options.data) {
      this.unlock();
    }
    this.trackEvent({
      category: "Game",
      action: "Score",
      label: this.game.score.get("total")
    });
    return this.slideCompleted();
  };

  GameView.prototype.onCorrectAnswer = function(arg) {
    var ref, score, sound, tally, time, total;
    ref = arg != null ? arg : {}, sound = ref.sound, score = ref.score, time = ref.time, tally = ref.tally;
    if (this.hasTimeLimit() && this.game.timer.get("paused")) {
      return;
    }
    if (time == null) {
      time = 0;
    }
    if (score == null) {
      score = 0;
    }
    total = this.game.score.get("total");
    this.game.timer.setBy({
      bonus: time
    });
    this.game.score.setBy({
      consecutive: 1,
      correct: 1
    });
    this.game.score.setBy({
      score: score
    }, {
      silent: tally != null
    });
    if (tally) {
      return this.game.score.trigger("tally", {
        tallyFrom: total,
        ms: 300
      });
    }
  };

  GameView.prototype.onIncorrectAnswer = function(arg) {
    var ref, score, sound, tally, time, total;
    ref = arg != null ? arg : {}, sound = ref.sound, score = ref.score, time = ref.time, tally = ref.tally;
    if (this.hasTimeLimit() && this.game.timer.get("paused")) {
      return;
    }
    if (time == null) {
      time = 0;
    }
    if (score == null) {
      score = 0;
    }
    total = this.game.score.get("total");
    this.game.timer.setBy({
      bonus: -time
    });
    this.game.score.set({
      consecutive: 0
    });
    this.game.score.setBy({
      score: -score,
      incorrect: 1
    }, {
      silent: tally != null
    });
    if (tally) {
      return this.game.score.trigger("tally", {
        tallyFrom: total,
        ms: 300
      });
    }
  };

  GameView.prototype.onTimerChange = function(timer) {};

  GameView.prototype.onScoreChange = function(score) {};

  GameView.prototype.setArray = function(array, key) {
    var ref;
    if (_.isString(array)) {
      ref = [key, array], array = ref[0], key = ref[1];
    }
    if (this.data == null) {
      this.data = {};
    }
    return this.data[key] = {
      current: _.shuffle(array),
      original: _.clone(array)
    };
  };

  GameView.prototype.getArray = function(key) {
    return this.data[key].original;
  };

  GameView.prototype.getRandom = function(key) {
    if (this.data[key].current.length === 0) {
      this.data[key].current = _.chain(this.data[key].original).without(this.data[key].lastValue).shuffle().value().concat(this.data[key].lastValue);
    }
    return this.data[key].lastValue = this.data[key].current.shift();
  };

  GameView.prototype.getNext = function(key) {
    if (this.data[key].current.length === 0) {
      this.data[key].current = this.data[key].original;
    }
    return this.data[key].lastValue = this.data[key].current.shift();
  };

  GameView.prototype.hasTimeLimit = function() {
    var ref, ref1, ref2, ref3;
    return !((ref = this.options.data.game) != null ? (ref1 = ref.timer) != null ? ref1.isDisabled : void 0 : void 0) && ((ref2 = this.options.data.game) != null ? (ref3 = ref2.timer) != null ? ref3.limit : void 0 : void 0) > 0;
  };

  return GameView;

})(SlideView);

module.exports = GameView;
});

;require.register("views/input.coffee", function(exports, require, module) {
var Analytics, InputView, Session, SlideView, ref,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SlideView = require("views/slide");

ref = Application.actions(), Analytics = ref.Analytics, Session = ref.Session;

InputView = (function(superClass) {
  extend(InputView, superClass);

  function InputView() {
    return InputView.__super__.constructor.apply(this, arguments);
  }

  InputView.prototype.nextSlide = function() {
    Session.get((function(_this) {
      return function(err, arg) {
        var attempt;
        attempt = arg.attempt;
        return Backbone.Events.trigger('event:survey-complete', {
          slide_id: _this.options.id,
          user_input: _this.userInput(),
          attempt: attempt
        });
      };
    })(this));
    return this.submit();
  };

  return InputView;

})(SlideView);

module.exports = InputView;
});

;require.register("views/main.coffee", function(exports, require, module) {
var MainView, app, content, inbound, outbound, platform, template,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

app = require("app");

template = require("templates/main");

platform = require("lib/device").platform;

content = inbound = outbound = null;

MainView = (function(superClass) {
  extend(MainView, superClass);

  function MainView() {
    return MainView.__super__.constructor.apply(this, arguments);
  }

  MainView.prototype.currentClass = "none";

  MainView.prototype.views = {};

  MainView.prototype.events = {
    "touchstart a[href*='//']": "openExternalUrl",
    "click a[href*='//']": "openExternalUrl",
    "touchstart a:not([href*='//'])": "openRelativeUrl",
    "click a:not([href*='//'])": "openRelativeUrl",
    "mouseleave": "triggerMouseUp",
    "touchmove": "onTouchMove"
  };

  MainView.prototype.initialize = function() {
    this.el.innerHTML = template();
    inbound = this.el.querySelector("#inbound");
    outbound = this.el.querySelector("#outbound");
    content = this.el.querySelector("#content");
    this.addGestures();
    this.classForDeviceVersion();
    return this.onOrientationChange();
  };

  MainView.prototype.classForDeviceVersion = function() {
    return this.el.classList.add("device-" + (platform.toLowerCase()));
  };

  MainView.prototype.openExternalUrl = function(e) {
    var externalUrl;
    externalUrl = e.currentTarget.getAttribute("href");
    if (window.ED_LMS_PREVIEW || window.ED_PUBLIC_PREVIEW) {
      window.parent.postMessage({
        type: "open-external-url",
        value: externalUrl
      }, "*");
    }
    if (window.ENGINE_PREVIEW) {
      window.open(externalUrl, "_blank");
    }
    Application.publish("event:url-open")({
      url: externalUrl
    });
    return false;
  };

  MainView.prototype.openRelativeUrl = function(e) {
    if (e.currentTarget.hash) {
      return window.setTimeout((function(_this) {
        return function() {
          var ref, ref1;
          if (!(e.currentTarget.hash.match(/slide/) && ((ref = _this.currentView) != null ? (ref1 = ref.scroller) != null ? ref1.enabled : void 0 : void 0) === false)) {
            return app.router.navigate(e.currentTarget.hash, true);
          }
        };
      })(this), 1);
    }
  };

  MainView.prototype.display = function(child, params) {
    var klass;
    klass = child + "-active";
    if (this.currentClass === klass) {
      return this.currentView.display((function() {}), params);
    } else {
      this.el.classList.remove("display", this.currentClass);
      this.el.classList.add(klass);
      this.currentClass = klass;
      return this.transitionViews(child, params);
    }
  };

  MainView.prototype.transitionViews = function(child, params) {
    var View, base, done;
    View = require("./" + child);
    done = (function(_this) {
      return function(callback) {
        return _this.afterDisplay(callback);
      };
    })(this);
    this.undelegateEvents();
    inbound.removeAttribute("id");
    outbound.removeAttribute("id");
    inbound.id = "outbound";
    outbound.id = "inbound";
    if (this.currentView != null) {
      this.currentView.stopListening();
      this.currentView.undelegateEvents();
      if (typeof (base = this.currentView).hide === "function") {
        base.hide();
      }
    }
    if (this.views[child] && this.views[child].cid !== this.currentView.cid) {
      this.currentView = this.views[child];
      this.currentView.display(done, params);
    } else {
      this.currentView = new View(params, done);
      this.currentView.el.classList.add("view");
      this.currentView.undelegateEvents();
      if (this.currentView.cache !== false) {
        this.views[child] = this.currentView;
      }
    }
    if (params.preventScroll != null) {
      this.preventScroll = params.preventScroll;
    }
    if (params.disableHistory != null) {
      this.currentView.disableHistory = params.disableHistory;
    }
    while (outbound.lastChild) {
      outbound.removeChild(outbound.lastChild);
    }
    outbound.appendChild(this.currentView.el);
    return window.addEventListener("orientationchange", (function(_this) {
      return function() {
        return _this.onOrientationChange();
      };
    })(this));
  };

  MainView.prototype.afterDisplay = function(callback) {
    window.clearTimeout(this.afterTimeout);
    return this.afterTimeout = window.setTimeout(((function(_this) {
      return function() {
        _this.el.classList.add("display");
        if (callback) {
          callback();
        }
        return _this.afterTransition();
      };
    })(this)), 10);
  };

  MainView.prototype.afterTransition = function() {
    window.clearTimeout(this.timeout);
    return this.timeout = window.setTimeout((function(_this) {
      return function() {
        _this.currentView.delegateEvents();
        _this.delegateEvents();
        return _this.swapContainers();
      };
    })(this), 600);
  };

  MainView.prototype.swapContainers = function() {
    var _inb, _otb, results;
    _inb = outbound;
    _otb = inbound;
    inbound = _inb;
    outbound = _otb;
    results = [];
    while (outbound.lastChild) {
      results.push(outbound.removeChild(outbound.lastChild));
    }
    return results;
  };

  MainView.prototype.onOrientationChange = function() {
    var isPortrait;
    isPortrait = window.orientation != null ? window.orientation % 180 === 0 : this.el.offsetHeight > this.el.offsetWidth;
    this.el.classList.toggle("device-landscape", !isPortrait);
    return this.el.classList.toggle("device-portrait", isPortrait);
  };

  MainView.prototype.triggerMouseUp = function() {
    return this.$el.trigger("mouseup");
  };

  MainView.prototype.onTouchMove = function(e) {
    var scrollSelector;
    scrollSelector = ".content-sm-scroll, .content-md-scroll, .content-lg-scroll";
    if (this.preventScroll && $(e.target).parents(scrollSelector).size() === 0) {
      return e.preventDefault();
    }
  };

  MainView.prototype.addGestures = function() {
    var evt, i, len, ref, ref1, results;
    ref = ["swipe", "gesture", "drag", "tap", "dbltap"];
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      evt = ref[i];
      results.push((ref1 = window.eventjs) != null ? ref1.add(this.el, evt, (function(_this) {
        return function(e, self) {
          if (self.gesture === "tap") {
            if (_this.ignoreNextTap) {
              return _this.ignoreNextTap = false;
            } else {
              return _this.tapTimeout = window.setTimeout((function() {
                return _this.dispatchEvent(e, self);
              }), 300);
            }
          } else {
            if (self.gesture === "dbltap") {
              _this.ignoreNextTap = true;
            }
            return _this.dispatchEvent(e, self);
          }
        };
      })(this)) : void 0);
    }
    return results;
  };

  MainView.prototype.dispatchEvent = function(e, data) {
    var event, evtName;
    window.clearTimeout(this.tapTimeout);
    if (data.fingers > 1) {
      this.preventDrag = true;
    } else if (data.state === "down") {
      this.preventDrag = false;
    }
    if (data.gesture === "drag" && this.preventDrag) {
      return;
    }
    if (e.target != null) {
      this.touchTarget = e.target;
    }
    evtName = "touch:" + (data.gesture || data.type);
    event = document.createEvent('CustomEvent');
    event.initCustomEvent(evtName, true, true, _.extend({}, e, data));
    return this.touchTarget.dispatchEvent(event);
  };

  return MainView;

})(Backbone.View);

module.exports = MainView;
});

;require.register("views/slide.coffee", function(exports, require, module) {
var Analytics, BaseSlide, Element, SlideView, device, domtoimage, fitText,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  slice = [].slice;

Element = require("lib/element");

BaseSlide = require("views/base/slide");

device = require("lib/device");

fitText = require("lib/fit-text");

Analytics = Application.actions().Analytics;

domtoimage = require('dom-to-image/dist/dom-to-image.min.js');

SlideView = (function(superClass) {
  extend(SlideView, superClass);

  function SlideView() {
    return SlideView.__super__.constructor.apply(this, arguments);
  }

  SlideView.prototype.fitTextOnResize = true;

  SlideView.prototype.fitTextOnRender = true;

  SlideView.prototype.initialize = function(options) {
    var base, ref;
    this.options = options;
    this.transform = Element.transform, this.transition = Element.transition, this.getBounds = Element.getBounds;
    if (((ref = this.options.data) != null ? ref.autoplay : void 0) && this.options.notInteractable) {
      this.options.data.autoplay = false;
    }
    return (base = this.options).metadata != null ? base.metadata : base.metadata = {};
  };

  SlideView.prototype.lock = function(direction, bounce) {
    return this.options.lock(direction, bounce);
  };

  SlideView.prototype.unlock = function() {
    return this.options.unlock();
  };

  SlideView.prototype.next = function(ms) {
    if (this.options.isLastSlide) {
      Application.publish("event:completed")({});
      Application.publish("event:exit")({});
      return Application.publish("lesson:exit")({});
    } else {
      this.options.next(_.isNumber(ms) ? ms : void 0);
      return this.slideNext();
    }
  };

  SlideView.prototype.prev = function(ms) {
    return this.options.prev(_.isNumber(ms) ? ms : void 0);
  };

  SlideView.prototype.trackEvent = function(arg) {
    var action, category, label, value;
    category = arg.category, action = arg.action, label = arg.label, value = arg.value;
    if (this.getTrackingTitle()) {
      category += " - " + (this.getTrackingTitle());
    }
    return Analytics.trackEvent(category, action, label, value);
  };

  SlideView.prototype.getTrackingTitle = function() {
    return this.el.dataset.title || this.el.id;
  };

  SlideView.prototype.setState = function(state, key) {
    if (key == null) {
      key = "state";
    }
    if (this.currentState == null) {
      this.currentState = {};
    }
    if (state === "touched" && this.currentState[key] === "narration") {
      return this.hasInteracted = true;
    } else {
      this.el.classList.remove(key + "-" + this.currentState[key]);
      if (state === false) {
        return delete this.currentState[key];
      } else {
        return this.el.classList.add(key + "-" + (this.currentState[key] = state));
      }
    }
  };

  SlideView.prototype.setEl = function(el, key) {
    if (this.elements == null) {
      this.elements = {};
    }
    return this.elements[key] = el || document.createElement("div");
  };

  SlideView.prototype.getEl = function(key) {
    var ref;
    return (ref = this.elements) != null ? ref[key] : void 0;
  };

  SlideView.prototype.render = function() {
    var base, data, ref, ref1, ref2, ref3;
    data = _.extend(this.serialize());
    if (data.lessonHeaderTitle != null) {
      document.querySelector('#lesson-header-title-content strong').innerText = data.lessonHeaderTitle;
    }
    this.el.innerHTML = typeof (base = this.template || ((ref = this.templates) != null ? ref["default"] : void 0)) === "function" ? base(data) : void 0;
    if (!this.ignoreStateOnRefresh) {
      this.setState("prompt");
    }
    this.setEl(this.el.querySelector(".narration-progress-bar"), "narration-progress");
    if (this.fixTextFontSize) {
      if ((ref1 = this.el.querySelector(".content-fit")) != null) {
        ref1.style.fontSize = this.fixTextFontSize;
      }
    }
    if (this.fitTextOnRender) {
      if ((ref2 = this.currentState) != null ? ref2.refresh : void 0) {
        window.clearTimeout(this.fitTextTimeout);
        this.fitTextTimeout = window.setTimeout(((function(_this) {
          return function() {
            return _this.fitText();
          };
        })(this)), 120);
      } else {
        this.el.classList.remove("active");
        this.fitText((function(_this) {
          return function() {
            return window.setTimeout((function() {
              return _this.el.classList.add("active");
            }), 300);
          };
        })(this));
      }
    }
    this.preloadMedia();
    if (data.hasNarration && !(window.ED_LMS_PREVIEW || window.ED_PUBLIC_PREVIEW)) {
      this.showLoadingNarration();
    } else {
      this.hideLoadingNarration();
    }
    if ((ref3 = data.socialLearning) != null ? ref3.enabled : void 0) {
      this.trigger("ui", {
        isSocial: true
      });
    } else {
      this.trigger("ui", {
        isSocial: false
      });
    }
    return Application.publish("event:slide-rendered")({});
  };

  SlideView.prototype.toggleLoadingNarration = function(v) {
    return Backbone.Events.trigger("load-narration", v);
  };

  SlideView.prototype.showLoadingNarration = function() {
    return this.toggleLoadingNarration(true);
  };

  SlideView.prototype.hideLoadingNarration = function() {
    return this.toggleLoadingNarration(false);
  };

  SlideView.prototype.fitText = function(done) {
    var el, ref;
    if (el = this.el.querySelector(".content-fit")) {
      if ((ref = this._fitText) != null) {
        ref.cancel();
      }
      return this._fitText = fitText(el, (function(_this) {
        return function() {
          _this.$el.trigger("fittextend");
          _this.fixTextFontSize = el.style.fontSize;
          return typeof done === "function" ? done() : void 0;
        };
      })(this));
    } else {
      return typeof done === "function" ? done() : void 0;
    }
  };

  SlideView.prototype.findOne = function(selector) {
    var el;
    el = this.el.querySelector(".content-fit");
    return (el != null ? el.querySelector(selector) : void 0) || this.el.querySelector(selector);
  };

  SlideView.prototype.findAll = function(selector) {
    var el, res;
    el = this.el.querySelector(".content-fit");
    res = el != null ? el.querySelectorAll(selector) : void 0;
    if ((res != null ? res.length : void 0) > 0) {
      return res;
    } else {
      return this.el.querySelectorAll(selector);
    }
  };

  SlideView.prototype.preloadMedia = function() {
    var i, iframe, j, len, len1, media, player, ref, ref1, results, trigger, update;
    update = function(e) {
      e.target.removeEventListener("timeupdate", update, false);
      e.target.pause();
      return e.target.volume = 1;
    };
    ref = this.el.querySelectorAll(".multi-content");
    for (i = 0, len = ref.length; i < len; i++) {
      media = ref[i];
      if (media.getAttribute("webkit-playsinline") && device.platform === "iOS") {
        if (media.nodeName === "AUDIO") {
          media.volume = 0;
          media.addEventListener("timeupdate", update, false);
        }
      }
      if (media.nodeName === "VIDEO") {
        trigger = (function(_this) {
          return function() {
            return window.setTimeout((function() {
              return _this.trigger("resize");
            }), 300);
          };
        })(this);
        if (this.players == null) {
          this.players = [];
        }
        player = window.videojs(media, {
          fluid: true
        });
        player.one("error", function() {
          return player.src(player.currentSources());
        });
        player.on("loadedmetadata", trigger);
        player.on("play", (function(_this) {
          return function() {
            return _this.trigger("video-play");
          };
        })(this));
        player.on("pause", (function(_this) {
          return function() {
            return _this.trigger("video-pause");
          };
        })(this));
        this.players.push(player);
        if (device.platform === !"browser") {
          player.on("fullscreenchange", (function(_this) {
            return function() {
              if (player.isFullscreen()) {
                return Application.publish("event:rotation-unlock")({});
              } else {
                return Application.publish("event:rotation-lock")({});
              }
            };
          })(this));
          player.ready(function() {
            player.play().pause();
            return window.setTimeout((function() {
              return player.hasStarted(false);
            }), 1);
          });
        }
      }
    }
    if (device.ios) {
      ref1 = this.el.querySelectorAll(".multi-content-iframe iframe");
      results = [];
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        iframe = ref1[j];
        if (iframe.src.match(/\?/)) {
          results.push(iframe.src += "&forceReloadForAppContext=true");
        } else {
          results.push(iframe.src += "?forceReloadForAppContext=true");
        }
      }
      return results;
    }
  };

  SlideView.prototype.stopMedia = function() {
    var i, iframe, j, len, len1, media, ref, ref1, results;
    ref = this.el.querySelectorAll("audio, video");
    for (i = 0, len = ref.length; i < len; i++) {
      media = ref[i];
      if (!media.paused) {
        media.pause();
      }
    }
    ref1 = this.el.querySelectorAll("iframe");
    results = [];
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      iframe = ref1[j];
      results.push(iframe.parentNode.removeChild(iframe));
    }
    return results;
  };

  SlideView.prototype.serialize = function() {
    var locals, ref, ref1, ref2, ref3, ref4, ref5, ref6, starsEnabled;
    starsEnabled = (typeof __ !== "undefined" && __ !== null ? (ref = __.slidedeck) != null ? ref.enableStars : void 0 : void 0) || this.options.enableStars;
    locals = {
      lessonHeaderTitle: this.options.lessonTitle,
      width: this.el.offsetWidth,
      height: this.el.offsetHeight,
      config: this.options.config(),
      hasPrompt: ((ref1 = this.options.data) != null ? ref1.prompt : void 0) != null,
      hasNarration: (ref2 = this.options.data) != null ? (ref3 = ref2.narration) != null ? ref3.audio_file : void 0 : void 0,
      hasStars: starsEnabled && ((ref4 = this.options.data) != null ? (ref5 = ref4.challenge_configuration) != null ? ref5.nb_stars : void 0 : void 0) > 0,
      scorm: this.options.scorm,
      contextRequiresExitButton: this.options.contextRequiresExitButton,
      doneText: ((ref6 = this.options.data) != null ? ref6.doneText : void 0) || window.i18n("buttons.done")
    };
    return _.extend({}, this.options.data, locals, {
      metadata: this.options.metadata
    });
  };

  SlideView.prototype.onRefresh = function() {
    return typeof this.show === "function" ? this.show() : void 0;
  };

  SlideView.prototype.onNarrationLoaded = function() {
    return this.hideLoadingNarration();
  };

  SlideView.prototype.onNarrationProgress = function(progress) {
    var interval, ref;
    interval = progress === 0 ? 0 : Date.now() - this.narrationTimestamp;
    this.transform(this.getEl("narration-progress"), {
      scale: progress + ", 1",
      transition: "transform " + interval + "ms linear"
    });
    if ((ref = this.getEl("narration-progress")) != null) {
      ref.offsetLeft;
    }
    return this.narrationTimestamp = Date.now();
  };

  SlideView.prototype.onNarrationComplete = function() {
    if (this.hasInteracted) {
      delete this.hasInteracted;
      this.setState("");
      return this.setState("touched");
    } else if (this.currentState.state === "narration") {
      return this.setState("prompt");
    }
  };

  SlideView.prototype.hide = function() {
    var i, len, p, ref;
    if (this.players != null) {
      ref = this.players;
      for (i = 0, len = ref.length; i < len; i++) {
        p = ref[i];
        if ((p != null ? p.dispose : void 0) != null) {
          p.dispose();
        }
      }
      return this.players = [];
    }
  };

  SlideView.prototype.delegateEvents = function() {
    SlideView.__super__.delegateEvents.call(this);
    if (this.fitTextOnResize) {
      return this.on("resize", this.fitText, this);
    }
  };

  SlideView.prototype.screenshot = function() {
    if (this.options.data.answer != null) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return _this.collateScreenshots().then(function(images) {
            _this.trigger("complete", _this, {
              isCorrect: true
            });
            return _this.collateScreenshots(images);
          }).then(resolve)["catch"](reject);
        };
      })(this));
    } else {
      return this.collateScreenshots();
    }
  };

  SlideView.prototype.collateScreenshots = function(images) {
    if (images == null) {
      images = [];
    }
    return new Promise((function(_this) {
      return function(resolve, reject) {
        return window.setTimeout(function() {
          return domtoimage.toJpeg(window.document.body, {
            ignoreImageErrors: true,
            dpi: 200,
            quality: 0.8,
            filter: function(e) {
              var ref;
              return (e != null ? e.tagName : void 0) !== "IMG" || !(e != null ? (ref = e.src) != null ? ref.match("img.youtube.com/vi/") : void 0 : void 0);
            }
          }).then(function(src) {
            return resolve(slice.call(images).concat([src]));
          })["catch"](function(err) {
            return reject(err);
          });
        }, 200);
      };
    })(this));
  };

  return SlideView;

})(BaseSlide);

module.exports = SlideView;
});

;require.register("views/slides.coffee", function(exports, require, module) {
var BaseSlidesView, SlidesView, Sound, app, device,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  slice = [].slice;

app = require("app");

device = require("lib/device");

BaseSlidesView = require("views/base/slides");

Sound = Application.actions().Sound;

SlidesView = (function(superClass) {
  extend(SlidesView, superClass);

  function SlidesView() {
    this.onKeyPress = bind(this.onKeyPress, this);
    this.onResize = bind(this.onResize, this);
    return SlidesView.__super__.constructor.apply(this, arguments);
  }

  SlidesView.prototype.id = "slides-view";

  SlidesView.prototype.template = require("templates/slides");

  SlidesView.prototype.initialize = function() {
    var h, w;
    SlidesView.__super__.initialize.apply(this, arguments);
    w = window.innerWidth;
    h = window.innerHeight;
    this._debounceResize = _.debounce(((function(_this) {
      return function() {
        return _this.onResize();
      };
    })(this)), 300);
    window.addEventListener(device.events.resize, this._debounceResize);
    return window.addEventListener("keypress", this.onKeyPress);
  };

  SlidesView.prototype.render = function(params) {
    var afterRender, index, initialSlideWidth, ref, ref1;
    this.hasRendered = true;
    this.options = this.getExtraConfig(params);
    this.el.innerHTML = this.template(this.options);
    this.el.classList.add("direction-" + (this.options.config.direction || "ltr"));
    if (((ref = this.options) != null ? (ref1 = ref.styleConfiguration) != null ? ref1.soundDisabled : void 0 : void 0) === true) {
      if (typeof Sound.disableSystemSounds === "function") {
        Sound.disableSystemSounds();
      }
    }
    this.createSlideViews(this.options.config, params);
    index = this.cleanIndex(this.options.index);
    if (this.options.title) {
      document.title = this.options.title;
    }
    this.sizeContent(this.options.forceResize);
    initialSlideWidth = this.slideViews[index].el.offsetWidth;
    afterRender = (function(_this) {
      return function() {
        _this.createScroller(params);
        _this.goToPage(index, 0);
        Application.publish("event:thomas-ready")({});
        if (window.ED_LMS_PREVIEW || window.ED_PUBLIC_PREVIEW) {
          window.parent.postMessage("thomas-ready", "*");
        }
        return window.setTimeout((function() {
          var ref2;
          if (_this.slideViews[index].el.offsetWidth !== initialSlideWidth) {
            return (ref2 = _this.slideViews[index]) != null ? ref2.trigger("resize") : void 0;
          }
        }), 600);
      };
    })(this);
    if (params.isRefresh) {
      afterRender();
    } else {
      window.setTimeout(afterRender, 300);
    }
    return Backbone.trigger("ready");
  };

  SlidesView.prototype.display = function(callback, params) {
    var index;
    index = this.cleanIndex(params.index);
    if (this.currentIndex !== index && this.options.config.contextAllowsFreeNavigation) {
      this.toggleViewInDOM(this.slideViews[index], true);
      this.slideViews[index].el.offsetWidth;
      this.goToPage(index, params.ms);
    }
    return callback();
  };

  SlidesView.prototype.removeScroller = function() {
    this.scroller.off("scrollEnd");
    return this.scroller.destroy();
  };

  SlidesView.prototype.createScroller = function(params) {
    var indicators, ref, ref1;
    if ((ref = this.options) != null ? (ref1 = ref.config) != null ? ref1.fade : void 0 : void 0) {
      this.scroller = {
        currentPage: {
          pageX: 0
        },
        scroller: this.el.querySelector("#slides-scroller"),
        goToPage: (function(_this) {
          return function(nextPage) {
            var prevPage;
            prevPage = _this.scroller.currentPage.pageX;
            _this.scroller.currentPage.pageX = nextPage;
            return _this.onScrollEnd();
          };
        })(this)
      };
    } else {
      if (this.scroller != null) {
        this.removeScroller();
      }
      indicators = [];
      if (this.options.config.background) {
        indicators.push({
          el: "#slides-background-wrap",
          resize: false,
          shrink: "clip",
          listenY: false,
          speedRatioX: 1 / (this.slideViews.length - 1) * 0.5,
          ignoreBoundaries: true
        });
      }
      if (this.options.config.indicator) {
        indicators.push({
          el: "#indicator",
          resize: true,
          shrink: "clip",
          listenY: false,
          ignoreBoundaries: true
        });
      }
      this.scroller = new IScroll(this.el.querySelector("#slides"), {
        scrollX: true,
        scrollY: false,
        snap: true,
        tap: "scrolltap",
        snapThreshold: 0.15,
        momentum: false,
        resizePolling: 9999999,
        eventPassthrough: true,
        indicators: indicators,
        preventDefaultException: {
          tagName: /^(INPUT|TEXTAREA|BUTTON|SELECT|IFRAME)$/
        }
      });
      if (!params.cms) {
        this.scroller.on("scrollEnd", (function(_this) {
          return function() {
            return _this.onScrollEnd();
          };
        })(this));
      }
      if (this.options.config.locked) {
        this.toggleScroller(false);
      }
    }
    if (this.options.config.pageNumbers) {
      return this.pageNumber = this.el.querySelector("#lesson-header-nav-page-number");
    }
  };

  SlidesView.prototype.optionsForView = function(el, data, config, params, slideIndex) {
    if (data == null) {
      data = {};
    }
    if (config == null) {
      config = {};
    }
    if (params == null) {
      params = {};
    }
    return _.extend({}, data, {
      slideIndex: slideIndex,
      lessonConfiguration: config,
      enableStars: this.options.enableStars,
      scorm: this.options.scorm,
      contextRequiresExitButton: this.options.contextRequiresExitButton
    }, {
      el: el,
      lock: (function(_this) {
        return function() {
          return _this.toggleScroller.apply(_this, [false].concat(slice.call(arguments)));
        };
      })(this),
      unlock: (function(_this) {
        return function() {
          return _this.toggleScroller(true);
        };
      })(this),
      next: (function(_this) {
        return function(ms) {
          return _this.goToPage(_this.currentIndex + 1, ms);
        };
      })(this),
      prev: (function(_this) {
        return function(ms) {
          return _this.goToPage(_this.currentIndex - 1, ms);
        };
      })(this),
      config: (function(_this) {
        return function() {
          return _this.options.config;
        };
      })(this),
      notInteractable: this.notInteractable || params.interactable === false
    });
  };

  SlidesView.prototype.goToPage = function(index, ms, options) {
    var k, len, maxScrollX, minScrollX, nextView, prevView, ref, ref1, ref2, ref3, ref4, view, wrapperWidth;
    if (ms == null) {
      ms = 600;
    }
    if (options == null) {
      options = {};
    }
    if ((index !== this.currentIndex || (this.currentIndex == null)) && (0 <= index && index < this.slideViews.length)) {
      prevView = this.slideViews[this.currentIndex];
      nextView = this.slideViews[index];
      this.toggleViewInDOM(nextView, true);
      this.trigger.apply(this, ["goToPage"].concat(slice.call(arguments)));
      if (window.ED_LMS_PREVIEW || window.ED_PUBLIC_PREVIEW) {
        window.parent.postMessage({
          type: "go-to-page",
          value: index
        }, "*");
      } else {
        Application.publish("event:go-to-page")({
          value: index
        });
      }
      if (prevView != null) {
        if (typeof prevView.beforeHide === "function") {
          prevView.beforeHide();
        }
      }
      nextView.render();
      if (typeof nextView.beforeShow === "function") {
        nextView.beforeShow();
      }
      ref = this.slideViews;
      for (k = 0, len = ref.length; k < len; k++) {
        view = ref[k];
        view.el.classList.remove("visible");
      }
      nextView.el.classList.add("visible");
      if (((ref1 = this.scroller) != null ? (ref2 = ref1.pages) != null ? ref2.length : void 0 : void 0) && this.slideViews.length > 1) {
        ref3 = this.scroller, wrapperWidth = ref3.wrapperWidth, maxScrollX = ref3.maxScrollX, minScrollX = ref3.minScrollX;
        if (!(this.options.config.locked || (minScrollX > (ref4 = -index * wrapperWidth) && ref4 > maxScrollX))) {
          this.toggleScroller(true);
        }
        this.scroller.goToPage(this.getIndexForDirection(index), 0, ms);
        return window.setTimeout(((function(_this) {
          return function() {
            return _this.onScrollEnd();
          };
        })(this)), ms);
      } else if (!options.fromPreview) {
        return this.onScrollEnd();
      }
    }
  };

  SlidesView.prototype.cleanIndex = function(index) {
    var i, slide;
    if (_.isNaN(+index)) {
      return ((function() {
        var k, len, ref, ref1, results;
        ref = this.slideViews;
        results = [];
        for (i = k = 0, len = ref.length; k < len; i = ++k) {
          slide = ref[i];
          if (((ref1 = slide.el) != null ? ref1.id : void 0) === index) {
            results.push(i);
          }
        }
        return results;
      }).call(this))[0] || 0;
    } else {
      return _.limit(index - 1, 0, this.slideViews.length - 1);
    }
  };

  SlidesView.prototype.getIndexForDirection = function(index) {
    if (this.options.config.direction === "rtl") {
      return this.slideViews.length - 1 - index;
    } else {
      return index;
    }
  };

  SlidesView.prototype.onScrollEnd = function() {
    var audioElement, audioElements, clonedNode, currentViewElement, i, isActive, j, k, l, len, len1, ref, ref1, ref2, ref3, results, slideView;
    i = this.getIndexForDirection(+((ref = this.scroller) != null ? (ref1 = ref.currentPage) != null ? ref1.pageX : void 0 : void 0));
    if (_.isNaN(i)) {
      return;
    }
    if (i !== this.currentIndex) {
      ref2 = this.slideViews;
      for (j = k = 0, len = ref2.length; k < len; j = ++k) {
        slideView = ref2[j];
        if (this.options.config.fade) {
          slideView.el.style.opacity = j === i ? 1 : 0;
          slideView.transition(slideView.el, "opacity 300ms");
          isActive = j === i || j === this.currentIndex;
        } else {
          isActive = (j - 1 <= i && i <= j + 1);
        }
        this.toggleViewInDOM(slideView, isActive);
        if ((ref3 = this.pageNumber) != null) {
          ref3.innerHTML = i + 1;
        }
      }
      if (this.currentIndex != null) {
        this.hideView(this.slideViews[this.currentIndex]);
      }
      this.showView(this.slideViews[i]);
      this.currentIndex = i;
      if (this.disableHistory == null) {
        app.router.navigate("slide/" + (i + 1), true);
      }
      currentViewElement = this.slideViews[this.currentIndex].el;
      if (currentViewElement && (currentViewElement.replaceWith != null)) {
        audioElements = currentViewElement.querySelectorAll("audio");
        results = [];
        for (l = 0, len1 = audioElements.length; l < len1; l++) {
          audioElement = audioElements[l];
          clonedNode = audioElement.cloneNode(true);
          audioElement.replaceWith(clonedNode);
          results.push(clonedNode.style.visibility = "visible");
        }
        return results;
      }
    }
  };

  SlidesView.prototype.onResize = function(e) {
    if (this.hasRendered) {
      window.clearTimeout(this.resizeTimeout);
      return this.resizeTimeout = window.setTimeout((function(_this) {
        return function() {
          var ref, ref1;
          _this.sizeContent(true);
          if ((ref = _this.scroller) != null) {
            if (typeof ref.refresh === "function") {
              ref.refresh();
            }
          }
          return window.clearTimeout((ref1 = _this.scroller) != null ? ref1.resizeTimeout : void 0);
        };
      })(this), 0);
    }
  };

  SlidesView.prototype.toggleViewInDOM = function(slideView, isActive) {
    if (!slideView) {
      return;
    }
    if (slideView.__isActive !== isActive) {
      slideView.__isActive = isActive;
      if (isActive && slideView.el.parentNode !== this.scroller.scroller) {
        return this.scroller.scroller.appendChild(slideView.el);
      } else if (!isActive && slideView.el.parentNode === this.scroller.scroller) {
        return this.scroller.scroller.removeChild(slideView.el);
      }
    }
  };

  SlidesView.prototype.hideView = function(slideView) {
    slideView.el.classList.remove("active");
    if (typeof slideView.undelegateEvents === "function") {
      slideView.undelegateEvents();
    }
    slideView.stopMedia();
    return typeof slideView.hide === "function" ? slideView.hide() : void 0;
  };

  SlidesView.prototype.showView = function(slideView) {
    if (slideView == null) {
      return;
    }
    slideView.el.offsetWidth;
    slideView.el.classList.add("active");
    if (typeof slideView.delegateEvents === "function") {
      slideView.delegateEvents();
    }
    if (typeof slideView.show === "function") {
      slideView.show();
    }
    return this.trigger("showView", slideView);
  };

  SlidesView.prototype.toggleScroller = function(isEnabled, direction, bounce) {
    var index, pageX, ref, ref1, wrapperWidth;
    if (bounce == null) {
      bounce = true;
    }
    if (this.options.config.fade) {
      return;
    }
    ref = this.scroller, wrapperWidth = ref.wrapperWidth, (ref1 = ref.currentPage, pageX = ref1.pageX);
    index = this.getIndexForDirection(pageX);
    switch (direction) {
      case "left":
      case "l":
        this.scroller.minScrollX = -wrapperWidth * index;
        return this.scroller.options.bounce = bounce;
      case "right":
      case "r":
        this.scroller.maxScrollX = -wrapperWidth * index;
        return this.scroller.options.bounce = bounce;
      default:
        this.scroller.options.bounce = bounce;
        this.scroller.refresh();
        return this.scroller.enabled = isEnabled;
    }
  };

  SlidesView.prototype.sizeContent = function(forceResize) {
    var i, innerEl, k, l, len, len1, outerEl, ref, ref1, ref2, ref3, ref4, ref5, ref6, slideView, width;
    if (forceResize == null) {
      forceResize = false;
    }
    if (((ref = this.scroller) != null ? ref.wrapperWidth : void 0) === this.el.offsetWidth && !forceResize) {
      return;
    }
    outerEl = $("#slides");
    innerEl = $("#slides-scroller");
    width = outerEl[0].offsetWidth;
    if ((ref1 = this.options) != null ? (ref2 = ref1.config) != null ? ref2.fade : void 0 : void 0) {
      ref3 = this.slideViews;
      for (i = k = 0, len = ref3.length; k < len; i = ++k) {
        slideView = ref3[i];
        slideView.el.style.width = width + "px";
      }
    } else {
      innerEl.css('width', width * this.slideViews.length + "px");
      ref4 = this.slideViews;
      for (i = l = 0, len1 = ref4.length; l < len1; i = ++l) {
        slideView = ref4[i];
        slideView.el.style.width = width + "px";
        slideView.el.style.left = width * this.getIndexForDirection(i) + "px";
      }
    }
    if ((this.scroller != null) || this.slideViews.length === 1) {
      if ((ref5 = this.slideViews[this.currentIndex]) != null) {
        ref5.trigger("resize", {
          width: width
        });
      }
    }
    return (ref6 = this.scroller) != null ? typeof ref6.refresh === "function" ? ref6.refresh() : void 0 : void 0;
  };

  SlidesView.prototype.onKeyPress = function(e) {
    var ref;
    return (ref = this.slideViews[this.currentIndex]) != null ? ref.trigger(e.type, e) : void 0;
  };

  SlidesView.prototype.stopListening = function() {
    window.removeEventListener("resize", this._debounceResize);
    window.removeEventListener("orientationchange", this._debounceResize);
    window.removeEventListener("keypress", this.onKeyPress);
    return SlidesView.__super__.stopListening.apply(this, arguments);
  };

  return SlidesView;

})(BaseSlidesView);

module.exports = SlidesView;
});

;require.register("views/video.coffee", function(exports, require, module) {
var SlideView, VideoView, device,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SlideView = require("views/slide");

device = require("lib/device");

VideoView = (function(superClass) {
  extend(VideoView, superClass);

  function VideoView() {
    return VideoView.__super__.constructor.apply(this, arguments);
  }

  VideoView.prototype.events = function() {
    return {
      "iostap .video": "toggleVideo",
      "iostap .video-play": "playVideo",
      "iostap .video-replay": "restartVideo",
      "iostap .btn-done": "next"
    };
  };

  VideoView.prototype.render = function() {
    var evt, i, len, ref, results;
    this.unbindVideoEvents();
    VideoView.__super__.render.apply(this, arguments);
    this.initializeVideo();
    this.listeners = {};
    this.setState("loading", "video");
    ref = ["load", "timeupdate", "error"];
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      evt = ref[i];
      this.listeners[evt] = _.bind(this["onVideo" + (_.capitalize(evt))], this);
      results.push(this.getEl("video").addEventListener(evt, this.listeners[evt]));
    }
    return results;
  };

  VideoView.prototype.initializeVideo = function() {
    var vid;
    vid = this.el.querySelector(".video");
    return this.setEl(vid, "video");
  };

  VideoView.prototype.onVideoLoad = function() {
    var ref;
    if ((ref = this.getEl("video")) != null) {
      ref.pause();
    }
    return this.setState("paused", "video");
  };

  VideoView.prototype.onVideoError = function() {
    return this.setState("error", "video");
  };

  VideoView.prototype.onVideoTimeupdate = function() {
    if (this.getEl("video").currentTime === this.getEl("video").duration && this.getEl("video").ended) {
      return this.onVideoEnd();
    }
  };

  VideoView.prototype.toggleVideo = function() {
    if (this.getEl("video").paused) {
      return this.playVideo();
    } else {
      return this.stopVideo();
    }
  };

  VideoView.prototype.playVideo = function() {
    if (this.currentState.video === "error") {
      return;
    }
    this.setState("playing", "video");
    if (this.getEl("video").ended) {
      this.getEl("video").load();
    }
    this.getEl("video").play();
    return this.trackEvent({
      category: "Video",
      action: "Play",
      label: this.getVideoName()
    });
  };

  VideoView.prototype.stopVideo = function() {
    var ref;
    if (this.currentState.video === "error") {
      return;
    }
    if ((ref = this.getEl("video")) != null) {
      ref.pause();
    }
    this.trackEvent({
      category: "Video",
      action: "Pause",
      label: this.getVideoName()
    });
    return window.setTimeout((function(_this) {
      return function() {
        return _this.setState("paused", "video");
      };
    })(this), 1);
  };

  VideoView.prototype.restartVideo = function() {
    if (this.getEl("video").ended) {
      this.getEl("video").load();
    } else {
      this.getEl("video").currentTime = 0;
    }
    return this.playVideo();
  };

  VideoView.prototype.onVideoEnd = function() {
    return this.setState("paused", "video");
  };

  VideoView.prototype.getVideoName = function() {
    return this.getEl("video").src.split("/").slice(-1)[0];
  };

  VideoView.prototype.hide = function() {
    var ref;
    if ((ref = this.getEl("video")) != null) {
      ref.pause();
    }
    this.onVideoEnd();
    return this.unbindVideoEvents();
  };

  VideoView.prototype.unbindVideoEvents = function() {
    var evt, ref, results;
    results = [];
    for (evt in this.listeners) {
      results.push((ref = this.getEl("video")) != null ? ref.removeEventListener(evt, this.listeners[evt]) : void 0);
    }
    return results;
  };

  return VideoView;

})(SlideView);

module.exports = VideoView;
});

;require.register("___globals___", function(exports, require, module) {
  
});})();require('___globals___');


//# sourceMappingURL=app.js.map